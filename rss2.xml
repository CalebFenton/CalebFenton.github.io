<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Caleb Fenton&#39;s Blog</title>
  <subtitle>Break Stuff To Make It Better</subtitle>
  <link href="/rss2.xml" rel="self"/>
  
  <link href="https://CalebFenton.github.io/"/>
  <updated>2017-05-27T19:49:09.000Z</updated>
  <id>https://CalebFenton.github.io/</id>
  
  <author>
    <name>Caleb Fenton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How to Monitor HTTPS Traffic of a Single App on OSX</title>
    <link href="https://CalebFenton.github.io/2017/05/27/monitoring-https-of-a-single-app-on-osx/"/>
    <id>https://CalebFenton.github.io/2017/05/27/monitoring-https-of-a-single-app-on-osx/</id>
    <published>2017-05-27T07:13:37.000Z</published>
    <updated>2017-05-27T19:49:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you reverse engineer network protocols or do any other network security stuff, you’ve probably needed to collect network traffic at least once – either to understand a protocol or look for sensitive information. Back in the <a href="https://en.wikipedia.org/wiki/Rosy_retrospection" target="_blank" rel="external">good old days</a>, this simply meant firing up tcpdump and watching those sweet, plaintext packets flow on by. Now, everyone has a stick up their butts about encryption – bunch of cry babies couldn’t handle getting their accounts hacked and their private info sold on the <a href="www.4chan.org">deep dark web</a> for a few hundred <a href="https://coinmarketcap.com/currencies/dogecoin/" target="_blank" rel="external">dogecoin</a>.</p>
<p>In today-time, doing any network analysis absolutely requires knowledge of HTTPS / SSL / TLS interception and it turns out to be non trivial almost all of the time! Of course, this makes sense because the entire point of TLS is to secure your communication. Like any other seldom trodden path, intercepting TLS has some caveats.  First, you have to grok how <a href="https://security.stackexchange.com/questions/8145/does-https-prevent-man-in-the-middle-attacks-by-proxy-server" target="_blank" rel="external">Man-in-the-Middle works</a>, how certificates work and how to install them on your system, how to massage your OS and certain apps into using those certs. Finally, you’ve got to navigate a bunch of proxy documentation and configuration to actually intercept and display the traffic.</p>
<p>In this post, I’ll be describing how to monitor the encrypted HTTPS traffic of a single app on macOS as well as solutions to some of the frustrating problems I encountered.<br><a id="more"></a></p>
<h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>The process for intercepting traffic is as follows:</p>
<ol>
<li>Generate a root certificate</li>
<li>Install the cert</li>
<li>Use <a href="https://github.com/rofl0r/proxychains-ng" target="_blank" rel="external">proxychains</a> to proxy a specific app</li>
<li>Use <a href="https://mitmproxy.org/" target="_blank" rel="external">mitmproxy</a> to intercept traffic</li>
<li>Yell at your computer because it doesn’t work for reasons which are highly opaque</li>
</ol>
<p>You get to skip step 5 since you’re reading this post. Congratulations.</p>
<h2 id="Installing-Stuff"><a href="#Installing-Stuff" class="headerlink" title="Installing Stuff"></a>Installing Stuff</h2><p>Install proxychains the way you probably install everything else: by blindly <code>brew install</code>‘ing it, but add a little <code>-ng</code> at the end:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">brew install proxychains-ng</div></pre></td></tr></table></figure>
<p>There’s a slightly newer version forked <a href="https://github.com/haad/proxychains" target="_blank" rel="external">on GitHub</a> but I couldn’t be bothered to <code>make</code> it and the brew formula is <em>conspicuously</em> <a href="https://gist.github.com/allenhuang/3792521#gistcomment-1367295" target="_blank" rel="external">missing from the brew repo</a>. What are you trying to hide, bro?</p>
<p>Create a <em>proxychains.conf</em> and add these lines:</p>
<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">strict_chain</div><div class="line">quiet_mode</div><div class="line">proxy_dns</div><div class="line">remote_dns_subnet <span class="number">224</span></div><div class="line">tcp_read_time_out <span class="number">15000</span></div><div class="line">tcp_connect_time_out <span class="number">8000</span></div><div class="line"></div><div class="line">[ProxyList]</div><div class="line">http <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">8080</span></div></pre></td></tr></table></figure>
<p>The main important line is <code>http 127.0.0.1 8080</code> which tells proxychains to redirect all traffic from the app to 127.0.0.1 port 8080, which is where we’ll be running mitmproxy.</p>
<p>Next, install mitmproxy with <code>pip</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="comment"># because I know you probably never upgrade pip and this is really just a test to see if you're paying attention and just copy / pasting everything</span></div><div class="line">pip install --upgrade pip</div><div class="line">pip install mitmproxy <span class="comment"># this is all that matters</span></div></pre></td></tr></table></figure>
<p>Go ahead and start mitmproxy so it’ll be running (duh) and because it helpfully generates a root cert for you in <em>~/.mitmproxy</em>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./mitmproxy --host</div></pre></td></tr></table></figure>
<p>To install the certs, you have two options. First, the clicky-clicky method:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">open ~/.mitmproxy</div></pre></td></tr></table></figure>
<p>Then, press <code>Command+Space</code> and type <code>Keychain Access</code>. Next, double click <em>mitmproxy-ca-cert.pem</em> to install it. Or, you can drag it to Keychain Access. At this point, you should see something like this:</p>
<p><img src="/images/single-app-mitm-proxy/added_cert_untrusted.png" alt=""></p>
<p>The cert is installed but it’s not trusted. To trust the cert, right click on it and select <code>Get Info</code>. Expand <code>Trust</code> and select <code>Always Trust</code> for <code>When using this certificate</code>. It should look like this:</p>
<p><img src="/images/single-app-mitm-proxy/trust_info.png" alt=""></p>
<p>The second install option is to just do it from the command line:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo security add-trusted-cert <span class="_">-d</span> -r trustRoot -k /Library/Keychains/System.keychain ~/.mitmproxy/mitmproxy-ca-cert.pem</div></pre></td></tr></table></figure>
<p>Finally, your cert should look something like this:</p>
<p><img src="/images/single-app-mitm-proxy/cert_installed_trusted.png" alt=""></p>
<p>If you have any other certs than those in the screen shot, you may be backdoor’ed! The <a href="https://cdn.arstechnica.net/wp-content/uploads/2013/11/party-van-640x215.jpg" target="_blank" rel="external">vans</a> are on their way.</p>
<h2 id="Using-mitmproxy"><a href="#Using-mitmproxy" class="headerlink" title="Using mitmproxy"></a>Using mitmproxy</h2><p>The mitmproxy manual is very good and those people put a lot of work into the software and documentation, so I’m not going to explain it here. It’s also pretty simple to figure out and I’m not going to patronize you by holding your hand like you’re a little baby.</p>
<p><strong>However</strong>, if you’ve never used mitmproxy before, you should know a few key bindings. The first two are obvious:</p>
<ul>
<li>UP and DOWN arrow keys are for navigation</li>
<li>ENTER key enters the selected item</li>
</ul>
<p>The other keys are less obvious:</p>
<ul>
<li>TAB switches between Request, Response, and Detail</li>
<li>Q backs out of a selected item</li>
</ul>
<h2 id="Testing-Everything"><a href="#Testing-Everything" class="headerlink" title="Testing Everything"></a>Testing Everything</h2><p>Now that you have a proxychains configuration pointed at localhost, the certs are installed, and mitmproxy is running, you’re ready to test stuff and see if it works!</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">proxychains4 <span class="_">-f</span> proxychains.conf curl https://calebfenton.github.io/</div></pre></td></tr></table></figure>
<p>Now, check out mitmproxy and observe how there is <strong>no</strong> logged traffic. Hurray! It’s not working! But why is this? <strong>Because system apps silently ignore your bullshit.</strong> It has something to do with SIP not allowing proxychains to do it’s thing. You can work around this like so:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cp `<span class="built_in">which</span> curl` .</div><div class="line">proxychains4 <span class="_">-f</span> proxychains.conf ./curl https://calebfenton.github.io/</div></pre></td></tr></table></figure>
<p>Or you could just <code>brew install wget</code> and replace <code>curl</code> with <code>wget</code> and that should work because <code>wget</code> is not a system app.</p>
<p>Once you see traffic on mitmproxy, it means a lot is working: mitmproxy is correctly mitm’ing, your freshly installed backdoor root cert is respected, and proxychains is correctly hooking the right stuff. This is really good! Probably enough for most people, but I was trying to proxy some Python code. So, on to some possible problems with Python!</p>
<p>If you want to follow along, add these lines to <em>req.py</em>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">r = requests.get(<span class="string">'https://calebfenton.github.io/'</span>)</div><div class="line">print(r)</div></pre></td></tr></table></figure>
<p>You may need to <code>pip install requests</code> if you hate yourself and don’t have requests installed already. This script basically does what <code>curl</code> does, except it prints out a lot less. Let’s try it with proxychains:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$ proxychains4 python req.py <span class="comment"># automatically finds proxychains.conf</span></div><div class="line">[proxychains] config file found: /Users/caleb/secret-shit-omg/proxychains.conf</div><div class="line">[proxychains] preloading /usr/<span class="built_in">local</span>/Cellar/proxychains-ng/4.12_1/lib/libproxychains4.dylib</div><div class="line">Traceback (most recent call last):</div><div class="line">  File <span class="string">"req2.py"</span>, line 2, <span class="keyword">in</span> &lt;module&gt;</div><div class="line">    r = requests.get(<span class="string">'https://calebfenton.github.io/'</span>)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/site-packages/requests/api.py"</span>, line 71, <span class="keyword">in</span> get</div><div class="line">    <span class="built_in">return</span> request(<span class="string">'get'</span>, url, params=params, **kwargs)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/site-packages/requests/api.py"</span>, line 57, <span class="keyword">in</span> request</div><div class="line">    <span class="built_in">return</span> session.request(method=method, url=url, **kwargs)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/site-packages/requests/sessions.py"</span>, line 475, <span class="keyword">in</span> request</div><div class="line">    resp = self.send(prep, **send_kwargs)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/site-packages/requests/sessions.py"</span>, line 585, <span class="keyword">in</span> send</div><div class="line">    r = adapter.send(request, **kwargs)</div><div class="line">  File <span class="string">"/usr/local/lib/python2.7/site-packages/requests/adapters.py"</span>, line 477, <span class="keyword">in</span> send</div><div class="line">    raise SSLError(e, request=request)</div><div class="line">requests.exceptions.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:661)</div></pre></td></tr></table></figure>
<p>Python doesn’t give a shit about your certs. Hah! You can do a quick test that this is the case by changing the <code>requests.get</code> to include a <code>verify</code> parameter pointing to your cert:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> requests</div><div class="line">r = requests.get(<span class="string">'https://calebfenton.github.io/'</span>, verify=<span class="string">'/Users/caleb/.mitmproxy/mitmproxy-ca-cert.pem'</span>)</div><div class="line">print(r)</div></pre></td></tr></table></figure>
<p>This <em>works fine</em> because you’re telling the <code>requests</code> module  to trust your mitmproxy cert.</p>
<p>What if you can’t be bothered to change your target app or maybe it uses something other than requests? You have at least two options:</p>
<ul>
<li>For requests, set <code>REQUESTS_CA_BUNDLE</code> to point at your root cert, e.g.<code>REQUESTS_CA_BUNDLE=/Users/caleb/.mitmproxy/mitmproxy-ca-cert.cer</code></li>
<li>For other modules, try setting <code>SSL_CERT_FILE</code> with the path to your root cert</li>
</ul>
<p>For example, using the first version of <em>req.py</em> without <code>verify</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ REQUESTS_CA_BUNDLE=/Users/caleb/.mitmproxy/mitmproxy-ca-cert.cer proxychains4 python req.py</div><div class="line">[proxychains] config file found: /Users/caleb/secret-shit-omg/proxychains.conf</div><div class="line">[proxychains] preloading /usr/<span class="built_in">local</span>/Cellar/proxychains-ng/4.12_1/lib/libproxychains4.dylib</div><div class="line">&lt;Response [200]&gt;</div></pre></td></tr></table></figure>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>This post only covers a small number of the problems that can bite you when trying to mitm HTTPS. However, most of the time, I just need to proxy a single app and don’t want to use iptables or ipfw to redirect all traffic because 1.) that’s noisy and 2.) <a href="/images/single-app-mitm-proxy/man_iptables.png">firewall rules are confusing</a> and I don’t want to master that arcanum unless I have to, not ashamed to admit it. With this post, you should have everything you need to successfully proxy and monitor traffic of a single app on OSX (most of the time).</p>
<p>Good luck. Happy sniffing.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you reverse engineer network protocols or do any other network security stuff, you’ve probably needed to collect network traffic at least once – either to understand a protocol or look for sensitive information. Back in the &lt;a href=&quot;https://en.wikipedia.org/wiki/Rosy_retrospection&quot;&gt;good old days&lt;/a&gt;, this simply meant firing up tcpdump and watching those sweet, plaintext packets flow on by. Now, everyone has a stick up their butts about encryption – bunch of cry babies couldn’t handle getting their accounts hacked and their private info sold on the &lt;a href=&quot;www.4chan.org&quot;&gt;deep dark web&lt;/a&gt; for a few hundred &lt;a href=&quot;https://coinmarketcap.com/currencies/dogecoin/&quot;&gt;dogecoin&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In today-time, doing any network analysis absolutely requires knowledge of HTTPS / SSL / TLS interception and it turns out to be non trivial almost all of the time! Of course, this makes sense because the entire point of TLS is to secure your communication. Like any other seldom trodden path, intercepting TLS has some caveats.  First, you have to grok how &lt;a href=&quot;https://security.stackexchange.com/questions/8145/does-https-prevent-man-in-the-middle-attacks-by-proxy-server&quot;&gt;Man-in-the-Middle works&lt;/a&gt;, how certificates work and how to install them on your system, how to massage your OS and certain apps into using those certs. Finally, you’ve got to navigate a bunch of proxy documentation and configuration to actually intercept and display the traffic.&lt;/p&gt;
&lt;p&gt;In this post, I’ll be describing how to monitor the encrypted HTTPS traffic of a single app on macOS as well as solutions to some of the frustrating problems I encountered.&lt;br&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://CalebFenton.github.io/tags/python/"/>
    
      <category term="networking" scheme="https://CalebFenton.github.io/tags/networking/"/>
    
  </entry>
  
  <entry>
    <title>How Bitcoin Improves Free Speech and Government</title>
    <link href="https://CalebFenton.github.io/2017/05/21/how-bitcoin-improves-free-speech-and-government/"/>
    <id>https://CalebFenton.github.io/2017/05/21/how-bitcoin-improves-free-speech-and-government/</id>
    <published>2017-05-21T07:13:37.000Z</published>
    <updated>2017-05-21T20:44:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>Many people are introduced to Bitcoin and other cryptocurrencies merely as a way to make money investing. They see the price rising, buy in, and hope it goes “<a href="http://1.bp.blogspot.com/-9_AQgspzJCE/UtQ7wlYZeeI/AAAAAAAAAJs/4voWG2CesFk/s1600/todamoojoon.gif" target="_blank" rel="external">to the moon</a>“, without really understanding what it is or why the price is moving. I’m glad Bitcoin is getting popular. <a href="https://media.giphy.com/media/rcqxcl5DGhM9q/giphy.gif" target="_blank" rel="external">I’m a huge fan</a>, but I don’t give a single shit about how good of an investment it is. Even though you might make a lot of money investing, it pales in comparison to how Bitcoin can fundamentally change the world.</p>
<p>I can talk all day about how a big chunk of the world is unbanked and doesn’t have access to financial services, how this is a huge problem, and <em>who knows</em> what will happen when 4 billion people suddenly have access to savings accounts and loans with a simple feature phone with internet. I can write pages and pages about how Bitcoin enables truly micro transactions and how I think it’ll fit in nicely as payment models for AI powered robot services, <a href="http://www.bbc.com/news/technology-30998361" target="_blank" rel="external">self-driving cars</a>, and media streaming services. The list goes on and on, but this post covers how Bitcoin bolsters the power of speech and improves our relationship with government.</p>
<a id="more"></a>
<h2 id="Bitcoin-Transactions-are-Speech"><a href="#Bitcoin-Transactions-are-Speech" class="headerlink" title="Bitcoin Transactions are Speech"></a>Bitcoin Transactions are Speech</h2><p>Money is now speech. Bitcoin lives on the internet and inherits all the censorship resistance of the internet: encryption, proxies, traffic masking. The internet is hands down the greatest facilitator of free speech ever devised. With Bitcoin, anyone with a feature phone and internet has access to financial services and transactions.</p>
<p>Blocking Bitcoin is harder than censoring the internet, which is nearly impossible, because you also have to censor <em>all</em> forms of communication, including the contents of people’s minds! You can memorize Bitcoin wallet seeds. If someone wants to smuggle Bitcoin into a country, they just have to memorize 20-30 words. Good luck stopping that! If internet is blocked completely, people can write down or print out transactions and physically deliver them to someone with internet access. Good luck stopping that!</p>
<p>Physical money is a liability. Your government or enemies can take it from you by force. Credit and debit cards are a liability because governments can see how much money you have, where you’re spending it, what you’re buying, and so on. If you become an enemy of the government, you’re fucked. With Bitcoin, you can be as anonymous as you want, and new developments like Lightning Network and altcoins like Monero can improve anonymity. If you want to send or receive money without anyone spying on you, you’re free to do so. I’m certainly not advocating breaking the law, and of course a lot of people will use this freedom for bad. And I’ll start taking that argument seriously just as soon as people stop using cash for bad.</p>
<h2 id="Bitcoin-and-Government-Finance"><a href="#Bitcoin-and-Government-Finance" class="headerlink" title="Bitcoin and Government Finance"></a>Bitcoin and Government Finance</h2><p>How does Bitcoin affect government? Simple. Bitcoin competes with government money. If people like Bitcoin more than the government issued fiat currency, they’ll buy more Bitcoin. This creates more pressure for stores to accept Bitcoin in the same way that rising oil prices creates more pressure for renewable energy and electric cars. This isn’t just my theory. <a href="https://media.giphy.com/media/5mBE2MiMVFITS/giphy.gif" target="_blank" rel="external">It’s happening</a>. India made some of their money illegal and <a href="https://www.forbes.com/sites/krnkashyap/2016/12/22/indias-demonetization-is-causing-bitcoin-to-surge-inside-the-country/#5e3812397dfc" target="_blank" rel="external">Bitcoin prices surged in India</a>. Capital controls in China <a href="http://www.scmp.com/comment/insight-opinion/article/1984052/how-fear-inflation-driving-bitcoins-popularity-china" target="_blank" rel="external">drove people</a> to trade <a href="http://www.zerohedge.com/news/2017-01-02/bitcoin-surges-above-1000-china-unveils-new-capital-controls" target="_blank" rel="external">Yen for Bitcoin</a>. Venezuela has so fucked up their currency they’ve had to outlaw foreign currencies, <a href="http://www.aljazeera.com/indepth/features/2017/04/venezuelans-turned-bitcoin-mining-170415124105593.html" target="_blank" rel="external">including Bitcoin</a>.</p>
<p>Government currencies aren’t a monopoly anymore. They gotta compete with Bitcoin. If the Chinese government inflates their Yen, people trade Yen for Bitcoin because it’s a better store of value. People also trade into gold to hedge against inflation, but Bitcoin is easier to buy and use. As people swap out Yen for Bitcoin, Yen supply goes up as demand goes down leading to a further decline in purchasing power. If a currency’s value is too low and government can’t afford it’s military or administration, it’s fucked. Inversely, Bitcoin, like gold, is inherently deflationary. There’s a fixed amount of Bitcoin to be mined and this puts a pressure on Bitcoin’s purchasing power to increase.</p>
<p>I don’t care if you’re politically left, right, liberal, republican, hardcore anarcho-capitalist, we can all agree that government should be more beholden to its people. Unless you’re a fascist, in which case go fuck yourself. Consider the government that inflates its currency to bail out a bunch of banks and other companies as well as finance a huge military. The companies should have gone out of business because they did a bunch of stupid shit and were wasteful and inefficient compared to the competition and the military wages many wars and kills people. If people don’t like this, they don’t have to wait years and organize voting campaigns to hopefully get someone else into office. They can simply trade their government money for Bitcoin.</p>
<p>You might be a fan of <a href="http://www.npr.org/sections/money/2009/01/what_is_seigniorage_1.html" target="_blank" rel="external">inflation</a> or you might think it’s terrible. Regardless of your political opinions, you have to admit that there’s <em>considerable disagreement about the effects of inflation</em>. For example, some say central banks create money and inflation, and that’s <em>bad</em> because it’s theft. Others argue it creates money and inflation, but that’s <em>good</em> because it keeps people from hoarding money. Still some say it doesn’t create money <em>at all</em>–it just shuffles numbers around in a sophisticated way that’s both good and bad, but mostly good probably, and <a href="https://cdn.meme.am/instances/31631803.jpg" target="_blank" rel="external">you’re stupid and uneducated</a> for thinking it simply creates money.</p>
<p>This ambiguity and disagreement about inflation sucks because the truth is <strong>super important</strong>. Why can’t we be sure about something like this? We need to know if the billions (or trillions) of dollars the United States is creating is actually good or if it’s fucking us and making everyone poorer and lowering the standard of living. If you ask economists about inflation, you get opinions ranging from “this is really good and keeps our economy from collapsing” all the way to “this is really bad and is destroying our economy like a cancer”. Economics isn’t a science like math or physics. It’s almost as bad as nutrition science. There’s a lot of incentive for people to push certain interpretations and ideas. How else can you explain this divergence of opinion? When opinions vary this wildly and there’s incentive to be dishonest, the <em>only way</em> to find the truth is to make people put their money where their mouth is. You do this by combining wisdom of the crowds and competition and create a market where everyone can participate. <em>Bitcoin does this for money.</em></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I’m not saying Bitcoin is the end of government. Not at all. It can make government better by making it more beholden to its people. These effects will take time to sink in, especially in wealthier countries which aren’t threatened by Bitcoin. Government money has to compete and it’s citizens have more freedom and control over their wealth. This is good. Freedom and competition are good!</p>
<p>Governments used to be afraid of printing presses because it allowed people to share ideas. Then the internet happened and made sharing ideas even easier. Bitcoin is far more than a hot investment. It’s the next step in personal liberty. It combines the power of money with the power of internet and our lives will all be improved by it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Many people are introduced to Bitcoin and other cryptocurrencies merely as a way to make money investing. They see the price rising, buy in, and hope it goes “&lt;a href=&quot;http://1.bp.blogspot.com/-9_AQgspzJCE/UtQ7wlYZeeI/AAAAAAAAAJs/4voWG2CesFk/s1600/todamoojoon.gif&quot;&gt;to the moon&lt;/a&gt;“, without really understanding what it is or why the price is moving. I’m glad Bitcoin is getting popular. &lt;a href=&quot;https://media.giphy.com/media/rcqxcl5DGhM9q/giphy.gif&quot;&gt;I’m a huge fan&lt;/a&gt;, but I don’t give a single shit about how good of an investment it is. Even though you might make a lot of money investing, it pales in comparison to how Bitcoin can fundamentally change the world.&lt;/p&gt;
&lt;p&gt;I can talk all day about how a big chunk of the world is unbanked and doesn’t have access to financial services, how this is a huge problem, and &lt;em&gt;who knows&lt;/em&gt; what will happen when 4 billion people suddenly have access to savings accounts and loans with a simple feature phone with internet. I can write pages and pages about how Bitcoin enables truly micro transactions and how I think it’ll fit in nicely as payment models for AI powered robot services, &lt;a href=&quot;http://www.bbc.com/news/technology-30998361&quot;&gt;self-driving cars&lt;/a&gt;, and media streaming services. The list goes on and on, but this post covers how Bitcoin bolsters the power of speech and improves our relationship with government.&lt;/p&gt;
    
    </summary>
    
    
      <category term="bitcoin" scheme="https://CalebFenton.github.io/tags/bitcoin/"/>
    
      <category term="realtalk" scheme="https://CalebFenton.github.io/tags/realtalk/"/>
    
  </entry>
  
  <entry>
    <title>Calling JNI Functions with Java Object Arguments from the Command Line</title>
    <link href="https://CalebFenton.github.io/2017/04/14/calling_jni_functions_with_java_object_arguments_from_the_command_line/"/>
    <id>https://CalebFenton.github.io/2017/04/14/calling_jni_functions_with_java_object_arguments_from_the_command_line/</id>
    <published>2017-04-14T18:11:11.000Z</published>
    <updated>2017-04-14T19:36:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>When analyzing malware or <a href="http://i.imgur.com/hV9YDNn.gif" target="_blank" rel="external">penetration testing</a> an app which uses a native library, it’s helpful to isolate and execute the library’s functions. This opens the door for debugging and using the malware’s own code against it. For example, if the malware has encrypted strings and the decryption is done by a native function, you could either spend a bunch of time <a href="http://imgur.com/gallery/9Q1fmSI" target="_blank" rel="external">reversing</a> the algorithm to write your own decryption routine or you could just <a href="http://68.media.tumblr.com/f986bf831261e6935a59c18dccf73f17/tumblr_mltn4vLW8j1rn15aho1_500.gif" target="_blank" rel="external">harness</a> the function such that you can execute it with arbitrary inputs. If the malware author completely changes their decryption, you might not have to change anything. In this post, I’ll explain how to harness a native library and execute its functions even if they require arguments from a live JVM instance.</p>
<p>In a previous post, I explained how to <a href="/2017/04/05/creating_java_vm_from_android_native_code/">create a Java VM from Android native code</a> but I didn’t give any real examples of how to use it. In this post, I’ll give a concrete example.<br><a id="more"></a></p>
<p>There are at least two approaches to harness a native function. The first is to modify the app to accept some input from you and pass that to the native function. For example, you can write an intent filter, <a href="https://calebfenton.github.io/2016/07/31/understanding_dalvik_static_fields_1_of_2/">convert it to Smali</a>, add the code to the target app, modify the manifest, run the app, and send it intents via <code>adb</code> with your arguments. Even better, you could add a small socket or web server instead of an intent filter and send <code>curl</code> requests, which doesn’t require modifying the manifest.</p>
<p>The second approach is to create a small native executable which loads the library, calls the target function, can be executed from the command line, and passes whatever arguments you give it. This makes it easier to debug since you’re just running an executable rather than an entire app.</p>
<h2 id="Target-App"><a href="#Target-App" class="headerlink" title="Target App"></a>Target App</h2><p>I created an example app so you can follow along at home. It’s called <a href="https://github.com/CalebFenton/native-harness-target" target="_blank" rel="external">native-harness-target</a>. To clone and build (of course replace <code>$ANDROID_*</code> vars for yourself):</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/CalebFenton/native-harness-target.git</div><div class="line"><span class="built_in">cd</span> native-harness-target</div><div class="line"><span class="built_in">echo</span> <span class="string">'ndk.dir=$ANDROID_NDK'</span> &gt; local.properties</div><div class="line"><span class="built_in">echo</span> <span class="string">'sdk.dir=$ANDROID_SDK'</span> &gt;&gt; local.properties</div><div class="line">./gradlew build</div></pre></td></tr></table></figure>
<p>The APKs will be in <em>app/build/outputs/apk/</em>. For this post, I’ll be using an x86 emulator image and <em>app-universal-debug.apk</em>.</p>
<p>The app has an encrypted string and uses a native library to decrypt the string at run time. Here’s how the string decryption looks in Smali:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">const/16 v3, 0x57<span class="built_in"></span></div><div class="line">new-array v1, v3, [B<span class="built_in"></span></div><div class="line">fill-array-data v1,<span class="keyword"> :array_2a</span></div><div class="line"></div><div class="line"><span class="keyword">.local</span> v1, <span class="string">"encryptedStringBytes"</span>:[B<span class="built_in"></span></div><div class="line">invoke-static &#123;&#125;, <span class="class">Lorg/cf/nativeharness/Cryptor;</span>-&gt;getInstance()<span class="class">Lorg/cf/nativeharness/Cryptor;</span><span class="built_in"></span></div><div class="line">move-result-object v0</div><div class="line"></div><div class="line"><span class="keyword">.line</span> 21</div><div class="line"><span class="keyword">.local</span> v0, <span class="string">"c"</span>:<span class="class">Lorg/cf/nativeharness/Cryptor;</span></div><div class="line"></div><div class="line"><span class="comment"># v3 contains a String made from encrypted bytes</span><span class="built_in"></span></div><div class="line">new-instance v3, <span class="class">Ljava/lang/String;</span><span class="built_in"></span></div><div class="line">invoke-direct &#123;v3, v1&#125;, <span class="class">Ljava/lang/String;</span>-&gt;&lt;init&gt;([B)V</div><div class="line"></div><div class="line"><span class="comment"># Call the decryption method, move result back to v3</span><span class="built_in"></span></div><div class="line">invoke-virtual &#123;v0, v3&#125;, <span class="class">Lorg/cf/nativeharness/Cryptor;</span>-&gt;decryptString(<span class="class">Ljava/lang/String;</span>)<span class="class">Ljava/lang/String;</span><span class="built_in"></span></div><div class="line">move-result-object v3</div></pre></td></tr></table></figure>
<h2 id="Building-the-Harness"><a href="#Building-the-Harness" class="headerlink" title="Building the Harness"></a>Building the Harness</h2><p>I started with a tool called <a href="https://github.com/rednaga/native-shim" target="_blank" rel="external">native-shim</a> by Tim “diff” Strazzere (a fellow <a href="https://rednaga.io/" target="_blank" rel="external">RedNaga</a> member!) as a foundation for the harness. What <a href="http://vibralign.com/wp-content/uploads/footshim.jpg" target="_blank" rel="external">shim</a> does is load a library and call its <code>JNI_OnLoad</code>. This makes debugging easy because you can just tell your debugger to start <code>shim</code> and pass the path to the target library as an argument. Set your debugger to break on library load and you can step through the <code>JNI_OnLoad</code>. Also, native-shim is great because it shows how to do almost everything you need to make harness work: load libraries (<em>.so</em> files), get references to functions, and call them.</p>
<p>First, I added code to <a href="/2017/04/05/creating_java_vm_from_android_native_code/">initialize a Java VM instance</a> and passed that instance to <code>JNI_OnLoad</code>. This makes for a more realistic JNI initialization. Without a real VM instance, the <a href="https://cdn.meme.am/cache/instances/folder625/500x/50419625.jpg" target="_blank" rel="external">internal state of the JNI library may be a little weird</a>. It really depends on how <code>JNI_OnLoad</code> is implemented by the particular library. It may not matter at all, but it’s common to <a href="https://developer.android.com/training/articles/perf-jni.html#native_libraries" target="_blank" rel="external">check the JNI version</a> from the little code I’ve seen, and to do that you need an instance of the VM.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">printf</span>(<span class="string">" [+] Initializing JavaVM Instance\n"</span>);</div><div class="line">JavaVM *vm = <span class="literal">NULL</span>;</div><div class="line">JNIEnv *env = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">int</span> status = init_jvm(&amp;vm, &amp;env);</div><div class="line"><span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">" [+] Initialization success (vm=%p, env=%p)\n"</span>, vm, env);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">" [!] Initialization failure (%i)\n"</span>, status);</div><div class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">printf</span>(<span class="string">" [+] Calling JNI_OnLoad\n"</span>);</div><div class="line">onLoadFunc(vm, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure>
<p>Tim, just let me know if you want this in native-shim and I’ll send <a href="https://cdn.meme.am/instances/500x/62024625/please-guy-please-merge-my-pull-request.jpg" target="_blank" rel="external">a pull request</a>.</p>
<p>Eventually, the goal was to make the harness open a socket server, read arguments over the socket, and call the function with those arguments. This way, the decryption function just becomes a service, and a Python script could easily interface with it.</p>
<h3 id="Understand-the-Target-Function"><a href="#Understand-the-Target-Function" class="headerlink" title="Understand the Target Function"></a>Understand the Target Function</h3><p>To call a function you need the function signature and the return type. To get this, let’s look at a decompilation of  <code>org.cf.nativeharness.Cryptor</code> which declares the <code>decryptString</code> native method.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cryptor</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Cryptor instance = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Cryptor <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</div><div class="line">            instance = <span class="keyword">new</span> Cryptor();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">native</span> String <span class="title">decryptString</span><span class="params">(String encryptedString)</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>From this code, you can see the method takes a <code>String</code> and returns a <code>String</code>. Seems simple. Let’s convert that to a native function method signature.</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Java_org_cf_nativeharness_Cryptor_decryptString(JNIEnv *env, jstring encryptedString)</div></pre></td></tr></table></figure>
<p>Every JNI native method needs <code>JNIEnv</code> as the first argument. This means the typedef for our function should be:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">jstring</span><span class="params">(*decryptString_t)</span><span class="params">(JNIEnv *, jstring)</span></span>;</div></pre></td></tr></table></figure>
<p>Unfortunately, if you try executing this function using the above typedef, you’ll get a cryptic error message:</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E/dalvikvm: JNI ERROR (app bug): attempt to <span class="keyword">use</span> stale <span class="keyword">local</span> <span class="keyword">reference</span> <span class="number">0x1</span></div><div class="line">E/dalvikvm: VM aborting</div><div class="line">A/libc: Fatal signal <span class="number">6</span> (SIGABRT) <span class="keyword">at</span> <span class="number">0x00000a9a</span> (code=<span class="number">-6</span>), <span class="keyword">thread</span> <span class="number">2714</span> (harness)</div></pre></td></tr></table></figure>
<p>This confused me for a while. I thought maybe I was getting a null reference somewhere so I added lots of <code>printf</code>s to show the memory locations of all the relevant pointers. The error really sounds like there’s something wrong with one of the arguments, but all of the pointers looked good, none were null.</p>
<p>I had the idea to be extra super double sure I got the method signature right. Maybe there’s some JNI boiler plate I was forgetting? To do this, I used <a href="http://docs.oracle.com/javase/7/docs/technotes/tools/windows/javah.html" target="_blank" rel="external"><code>javah</code></a> which generates C header and source files that are needed to implement native methods.</p>
<p>To do this, you’ll need <a href="https://github.com/pxb1988/dex2jar" target="_blank" rel="external">dex2jar</a> installed and on your class path and you need to change <code>platforms/android-19</code> to point to whichever platform you have installed.</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ d2j-dex2jar<span class="selector-class">.sh</span> app-universal-debug<span class="selector-class">.apk</span></div><div class="line">dex2jar app-universal-debug<span class="selector-class">.apk</span> -&gt; ./app-universal-debug-dex2jar<span class="selector-class">.jar</span></div><div class="line">$ javah -cp app-universal-debug-dex2jar<span class="selector-class">.jar</span>:<span class="variable">$ANDROID_SDK</span>/platforms/android-<span class="number">19</span>/android<span class="selector-class">.jar</span> org<span class="selector-class">.cf</span><span class="selector-class">.nativeharness</span><span class="selector-class">.Cryptor</span></div></pre></td></tr></table></figure>
<p>This creates _org_cf_nativeharness_Cryptor.h_ which contains:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function">JNIEXPORT jstring JNICALL <span class="title">Java_org_cf_nativeharness_Cryptor_decryptString</span></span></div><div class="line">  <span class="params">(JNIEnv *, jobject, jstring)</span>;</div></pre></td></tr></table></figure>
<p>This has <code>jobject</code> as the second argument. <strong>WHY?</strong> What gives? If already know the answer to this, I bet you’ve spent a lot of time looking at <a href="https://github.com/github/linguist/pull/2422" target="_blank" rel="external">Smali</a>, specifically <code>invoke-virtual</code>. Whenever you call a virtual method (i.e. usually anything non-static), the first argument is <em>an instance of the object which implements the method</em>. In this case, the first argument should be an instance of <code>org.cf.nativeharness.Cryptor</code>.</p>
<p>Of course, you could cheat and just look at <a href="https://github.com/CalebFenton/native-harness-target/blob/master/app/src/main/cpp/str-crypt.c" target="_blank" rel="external"><em>str-crypt.c</em></a> to find the signature but if you’re really reverse engineering or pen-testing, you won’t have the source.</p>
<p>The <em>real</em> function typedef should have a <code>jobject</code> for the <code>Cryptor</code> instance as the first argument:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">jstring</span><span class="params">(*decryptString_t)</span><span class="params">(JNIEnv *, jobject, jstring)</span></span>;</div></pre></td></tr></table></figure>
<p>You may be wondering why the method is not static to begin with. There isn’t a good reason for it to be static, true. But in the original app which made me write this blog, the target method wasn’t static and I ran into this problem.</p>
<p>The lesson here is if you’re not sure what the signature is, try <code>javah</code> and keep in mind virtual methods take an instance for the first argument, similar to Java’s <a href="https://docs.oracle.com/javase/7/docs/api/java/lang/reflect/Method.html#invoke(java.lang.Object,%20java.lang.Object..." target="_blank" rel="external"><code>Method#invoke()</code></a>).</p>
<h2 id="Building-the-Socket-Server"><a href="#Building-the-Socket-Server" class="headerlink" title="Building the Socket Server"></a>Building the Socket Server</h2><p>This is the least interesting part of harness. If you don’t mind, I’m just going to skip this. You can see <a href="https://github.com/CalebFenton/native-harness-target/blob/master/harness/server.c" target="_blank" rel="external">the code</a> for yourself. Also, I’m just a C tourist. If you think the code is shit, I believe you. But if you want to tell me it’s shit, it must come with <a href="https://cdn.meme.am/cache/instances/folder117/500x/22899117.jpg" target="_blank" rel="external">a pull request</a>.</p>
<h2 id="Using-the-Harness"><a href="#Using-the-Harness" class="headerlink" title="Using the Harness"></a>Using the Harness</h2><p>Here’s an overview of the steps required to test the harness:</p>
<ol>
<li>start an emulator</li>
</ol>
<ul>
<li>push the harness to the device</li>
<li>push target native library and any dependencies to the device (in this case, there are no dependencies)</li>
<li>push the native harness target app to the device</li>
<li>start the harness</li>
<li>forward ports from the emulator to the host</li>
<li>run <a href="https://github.com/CalebFenton/native-harness-target/blob/master/harness/decrypt_string.py" target="_blank" rel="external">_decrypt_string.py_</a> and cross your fingers</li>
</ul>
<p>To push the app and native library to the device:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ adb push app/build/output/apk/app-universal-debug.apk /data/<span class="built_in">local</span>/tmp/target-app.apk</div><div class="line">$ unzip app/build/outputs/apk/app-universal-debug.apk lib/x86/libstr-crypt.so</div><div class="line">Archive:  app/build/outputs/apk/app-universal-debug.apk</div><div class="line">  inflating: lib/x86/libstr-crypt.so</div><div class="line">$ adb push lib/x86/libstr-crypt.so /data/<span class="built_in">local</span>/tmp</div><div class="line">lib/x86/libstr-crypt.so: 1 file pushed. 1.5 MB/s (5476 bytes <span class="keyword">in</span> 0.004s)</div></pre></td></tr></table></figure>
<p>To push harness to the device,</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> harness</div><div class="line">make &amp;&amp; make install</div></pre></td></tr></table></figure>
<p><strong>Note:</strong> this pushes the x86 library to the device. If you really want to use another emulator image, replace <code>make install</code> with <code>adb push libs/&lt;your emulator flavor&gt;/harness /data/local/tmp</code>.</p>
<p>Now, run <code>harness</code> with the path to the target library as the first argument:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$ adb shell /data/<span class="built_in">local</span>/tmp/harness /data/<span class="built_in">local</span>/tmp/libstr-crypt.so</div><div class="line">[*] Native Harness</div><div class="line"> [+] Loading target: [ /data/<span class="built_in">local</span>/tmp/libstr-crypt.so ]</div><div class="line"> [+] Library Loaded!</div><div class="line"> [+] Found JNI_OnLoad, good</div><div class="line"> [+] Initializing JavaVM Instance</div><div class="line">WARNING: linker: libdvm.so has text relocations. This is wasting memory and is a security risk. Please fix.</div><div class="line"> [+] Initialization success (vm=0xb8e420a0, env=0xb8e420e0)</div><div class="line"> [+] Calling JNI_OnLoad</div><div class="line"> [+] Found decryptString <span class="keyword">function</span>, good (0xb761f4f0)</div><div class="line"> [+] Finding Cryptor class</div><div class="line"> [+] Found Cryptor class: 0x1d2001d9</div><div class="line"> [+] Found Cryptor.getInstance(): 0xb27bc270</div><div class="line"> [+] Instantiated Cryptor class: 0x1d2001dd</div><div class="line"> [+] Starting socket server on port 5001</div></pre></td></tr></table></figure>
<p>To test that it’s all working, in another terminal run:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ ./decrypt_string.py</div><div class="line">Sending encrypted string</div><div class="line">Decrypted string: <span class="string">"Seek freedom and become captive of your desires. Seek discipline and find your liberty."</span></div></pre></td></tr></table></figure>
<p>Finally, bask in your own greatness if you catch the reference, nerd.</p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>You should be able to take the harness code and modify the target function to run whatever function you want. This won’t always work 100% reliably because programs are arbitrarily complicated and can do all kinds of weird shit.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When analyzing malware or &lt;a href=&quot;http://i.imgur.com/hV9YDNn.gif&quot;&gt;penetration testing&lt;/a&gt; an app which uses a native library, it’s helpful to isolate and execute the library’s functions. This opens the door for debugging and using the malware’s own code against it. For example, if the malware has encrypted strings and the decryption is done by a native function, you could either spend a bunch of time &lt;a href=&quot;http://imgur.com/gallery/9Q1fmSI&quot;&gt;reversing&lt;/a&gt; the algorithm to write your own decryption routine or you could just &lt;a href=&quot;http://68.media.tumblr.com/f986bf831261e6935a59c18dccf73f17/tumblr_mltn4vLW8j1rn15aho1_500.gif&quot;&gt;harness&lt;/a&gt; the function such that you can execute it with arbitrary inputs. If the malware author completely changes their decryption, you might not have to change anything. In this post, I’ll explain how to harness a native library and execute its functions even if they require arguments from a live JVM instance.&lt;/p&gt;
&lt;p&gt;In a previous post, I explained how to &lt;a href=&quot;/2017/04/05/creating_java_vm_from_android_native_code/&quot;&gt;create a Java VM from Android native code&lt;/a&gt; but I didn’t give any real examples of how to use it. In this post, I’ll give a concrete example.&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
      <category term="jni" scheme="https://CalebFenton.github.io/tags/jni/"/>
    
  </entry>
  
  <entry>
    <title>Creating a Java VM from Android Native Code</title>
    <link href="https://CalebFenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/"/>
    <id>https://CalebFenton.github.io/2017/04/05/creating_java_vm_from_android_native_code/</id>
    <published>2017-04-05T18:11:11.000Z</published>
    <updated>2017-04-14T19:32:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you’re writing native / JNI code for Android, it’s probably as native method of an Android app. These methods are always passed the Dalvik VM instance of the app as the first parameter. You need this to create <code>jstring</code>s and other Java objects, lookup classes and fields, etc. It’s not normal for you to have to instantiate a VM from native code because most of the time, if you’re using the Java Native Interface (JNI), you started in Java land and are only dipping into native code land for them sweet, sweet <a href="http://www.androidauthority.com/java-vs-c-app-performance-689081/" target="_blank" rel="external">performance benefits</a>. However, if you’re reverse engineering or writing an exploit, you’re likely always delving int all kinds of unusual trouble which the developers reasonably believed would never happen or at least would only be a theoretical edge case.</p>
<p>I recently needed to create a VM from native code to pass Java object arguments to a JNI function. In this post, I want to share what I came up with and why I finally settled on this particular method.<br><a id="more"></a></p>
<h2 id="Standard-Method"><a href="#Standard-Method" class="headerlink" title="Standard Method"></a>Standard Method</h2><p>The official, standard method is documented here: <a href="http://www.developer.com/java/data/how-to-create-a-jvm-instance-in-jni.html" target="_blank" rel="external">How to Create a JVM Instance in JNI</a>. Unfortunately, this <em>won’t</em> work in Android because <code>jint JNI_CreateJavaVM(JavaVM**, JNIEnv**, void*)</code> isn’t exported. Even if you’re not familiar with this function, it’s name should be a <a href="https://media.giphy.com/media/l2Sq2AG0wrEXQgLGU/giphy.gif" target="_blank" rel="external">clue</a> that it’s important. If you want to check if it’s not exported yourself, look at <code>jni.h</code> from your Android NDK directory. In my case, it’s in <code>android-sdk/android-ndk-r13b/platforms/android-9/arch-x86/usr/include/jni.h</code>. The relevant code is:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">if</span> 0  <span class="comment">/* In practice, these are not exported by the NDK so don't declare them */</span></span></div><div class="line"><span class="function">jint <span class="title">JNI_GetDefaultJavaVMInitArgs</span><span class="params">(<span class="keyword">void</span>*)</span></span>;</div><div class="line"><span class="function">jint <span class="title">JNI_CreateJavaVM</span><span class="params">(JavaVM**, JNIEnv**, <span class="keyword">void</span>*)</span></span>;</div><div class="line"><span class="function">jint <span class="title">JNI_GetCreatedJavaVMs</span><span class="params">(JavaVM**, jsize, jsize*)</span></span>;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div></pre></td></tr></table></figure>
<p>If you try to compile the code, you’ll probably get an error like this:</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">warning: <span class="keyword">implicit</span> declaration of <span class="function"><span class="keyword">function</span></span> <span class="string">'JNI_CreateJavaVM'</span> is invalid <span class="keyword">in</span> C99</div><div class="line">      [-Wimplicit-<span class="function"><span class="keyword">function</span></span>-declaration]</div></pre></td></tr></table></figure>
<p>The official documentation is still useful for understanding the API and what all those options and arguments do. But if we want to use this on Android, we’re going to have to explicitly load the necessary methods from some library.</p>
<p>One useful detail this code shows is how to set the VM’s class path. Here’s how it’s done:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">JavaVMOption jvmopt[<span class="number">1</span>];</div><div class="line">jvmopt[<span class="number">0</span>].optionString = <span class="string">"-Djava.class.path="</span> + <span class="string">"."</span>;</div></pre></td></tr></table></figure>
<p>This sets the class path to the current directory (<code>.</code>). This is needed if you want your VM to access system or app classes. Some early experiments show that setting to a directory doesn’t seem to work. I tried setting to <code>/data/local/tmp</code> and pushing naked <em>DEX</em> files, as well as a <em>JAR</em> containing <em>DEX</em> files and the app’s <em>APK</em>. The <em>only</em> option that worked was setting the <strong>full path</strong> to either the <em>JAR</em>, <em>DEX</em>, or the <em>APK</em>. What was odd is that system classes (i.e. <code>java.lang.String</code>) were not accessible without having at least one valid file in the class path. In other words, <code>(*env)-&gt;FindClass(env, &quot;java.lang.String&quot;)</code> returns <code>0</code> unless there’s at least one file on the class path, even though <code>java.lant.String</code> is defined in the framework.</p>
<p>To test yourself, push an APK to the emulator or device:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push shim_app.apk /data/<span class="built_in">local</span>/tmp</div></pre></td></tr></table></figure>
<p>Use this for your <code>JavaVMOption</code>:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">JavaVMOption opt[<span class="number">2</span>];</div><div class="line">opt[<span class="number">0</span>].optionString = <span class="string">"-Djava.class.path=/data/local/tmp/shim_app.apk"</span>;</div><div class="line">opt[<span class="number">1</span>].optionString = <span class="string">"-agentlib:jdwp=transport=dt_android_adb,suspend=n,server=y"</span>;</div><div class="line"><span class="comment">// ...</span></div><div class="line">args.nOptions = <span class="number">2</span>;</div></pre></td></tr></table></figure>
<p>You should now be able to use <code>FindClass</code> to load system and app classes.</p>
<p>And if you need to load native libraries in your VM, such as if you load a class which loads a library in it’s static initilzer, you can see that path as well with <code>optionString = &quot;-Djava.library.path=/data/local/tmp&quot;</code>. There’s an example <a href="http://docs.oracle.com/javase/7/docs/technotes/guides/jni/jni-12.html#invo" target="_blank" rel="external">here</a>.</p>
<h2 id="UiccUnlock-Method"><a href="#UiccUnlock-Method" class="headerlink" title="UiccUnlock Method"></a>UiccUnlock Method</h2><p>My <a href="https://www.google.com/search?q=android+jni_createjavavm" target="_blank" rel="external">genius cyber-sleuth skills</a> revealed another possible technique. It’s from <a href="https://gist.github.com/tewilove/b65b0b15557c770739d6" target="_blank" rel="external">UiccUnlock.cpp</a> which looks like a quasi-exploit to do a SIM unlock.</p>
<p>I won’t claim to fully understand what it’s doing, but the interesting part to me is in <code>get_transation_code</code>. Here’s what it does:</p>
<ul>
<li>creates a Java VM</li>
<li>use the VM to get reference to <code>com.android.internal.telephony.ITelephony$Stub</code> class</li>
<li>get the <code>TRANSACTION_sendOemRilRequestRaw</code> field value</li>
<li>destroy the VM</li>
<li>return field value</li>
</ul>
<p>It looks like the field value is used to check if the device is already unlocked or perhaps to check if the unlock method will work. I’m not sure. I just wanted to rip out the code to create the VM.</p>
<p>The approach seemed sound: load the relevant VM creation functions by through <code>libnativehelper.so</code> or <code>libdvm.so</code> as a backup. However, there were a few lines in there that looked weird:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">JniInvocation_ctor = (JniInvocation_ctor_t) dlsym(libnativehelper, <span class="string">"_ZN13JniInvocationC1Ev"</span>);</div><div class="line">JniInvocation_dtor = (JniInvocation_dtor_t) dlsym(libnativehelper, <span class="string">"_ZN13JniInvocationD1Ev"</span>);</div><div class="line">JniInvocation_Init = (JniInvocation_Init_t) dlsym(libnativehelper, <span class="string">"_ZN13JniInvocation4InitEPKc"</span>);</div></pre></td></tr></table></figure>
<p>I couldn’t find these functions documented anywhere. Someone really clever figured these out (kudos!). Without calling these functions, you get some weird errors:</p>
<figure class="highlight delphi"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">W/dalvikvm(<span class="number">5395</span>): No <span class="keyword">implementation</span> found <span class="keyword">for</span> native Landroid/os/SystemProperties;.native_get:(Ljava/lang/<span class="keyword">String</span>;Ljava/lang/<span class="keyword">String</span>;)Ljava/lang/<span class="keyword">String</span>;</div><div class="line">W/dalvikvm(<span class="number">5395</span>): No <span class="keyword">implementation</span> found <span class="keyword">for</span> native Landroid/os/SystemProperties;.native_get:(Ljava/lang/<span class="keyword">String</span>;Ljava/lang/<span class="keyword">String</span>;)Ljava/lang/<span class="keyword">String</span>;</div><div class="line">W/dalvikvm(<span class="number">5395</span>): Exception Ljava/lang/UnsatisfiedLinkError; thrown <span class="keyword">while</span> initializing Landroid/os/Build;</div><div class="line">A/libc(<span class="number">5395</span>): Fatal signal <span class="number">11</span> (SIGSEGV) at <span class="number">0</span>x0000000c (code=<span class="number">1</span>), thread <span class="number">5395</span> (create_vm)</div></pre></td></tr></table></figure>
<p>Despite these weird functions, this approach totally worked for me. But I wanted to understand what the <code>_ZN13JniInvocationC1Ev</code> functions did and if they were portable between Android versions. My gut told me that hardcoding that many function names which also included numbers could lead to incompatibilities in some devices or in later Android versions.</p>
<h2 id="Surfaceflinger-Method"><a href="#Surfaceflinger-Method" class="headerlink" title="Surfaceflinger Method"></a>Surfaceflinger Method</h2><p>I eventually found code from Google’s Surfaceflinger service: <a href="https://android.googlesource.com/platform/frameworks/native/+/ce3a0a5/services/surfaceflinger/DdmConnection.cpp" target="_blank" rel="external">DdmConnection.cpp</a>.</p>
<p>This defaults to looking for <code>JNI_CreateJavaVM</code> in <code>libdvm.so</code>. Instead of calling <code>_ZN13JniInvocation*</code> methods, it looks like it calls <code>Java_com_android_internal_util_WithFramework_registerNatives</code> from <code>libandroid_runtime.so</code>. The behavior of <code>registerNatives</code> is described well <a href="http://stackoverflow.com/questions/1010645/what-does-the-registernatives-method-do" target="_blank" rel="external">here</a>.</p>
<p>Also interesting are the options used to create the VM:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">opt.optionString = <span class="string">"-agentlib:jdwp=transport=dt_android_adb,suspend=n,server=y"</span>;</div></pre></td></tr></table></figure>
<p>These options are well documented <a href="http://www.netmite.com/android/mydroid/2.0/dalvik/docs/debugger.html" target="_blank" rel="external">here</a> and according to the documentation, this just allows for debugging of the JVM. Seems pretty standard.</p>
<p>I noticed the JNI version was 1_4, but I bumped it up to 1_6 because that’s what’s used in the example code <a href="https://developer.android.com/training/articles/perf-jni.html#native_libraries" target="_blank" rel="external">here</a>. Here are the supported versions from  <code>jni.h</code>:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_VERSION_1_1 0x00010001</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_VERSION_1_2 0x00010002</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_VERSION_1_4 0x00010004</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> JNI_VERSION_1_6 0x00010006</span></div></pre></td></tr></table></figure>
<p>I ended up using this approach since I figured it’s the most robust and future-proof because it comes from Google.</p>
<h2 id="Final-Code"><a href="#Final-Code" class="headerlink" title="Final Code"></a>Final Code</h2><p>Here’s the final code to create the VM:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;dlfcn.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*JNI_CreateJavaVM_t)</span><span class="params">(<span class="keyword">void</span> *, <span class="keyword">void</span> *, <span class="keyword">void</span> *)</span></span>;</div><div class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">jint</span> <span class="params">(*registerNatives_t)</span><span class="params">(JNIEnv* env, jclass clazz)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">init_jvm</span><span class="params">(JavaVM **p_vm, JNIEnv **p_env)</span> </span>&#123;</div><div class="line">  <span class="comment">// https://android.googlesource.com/platform/frameworks/native/+/ce3a0a5/services/surfaceflinger/DdmConnection.cpp</span></div><div class="line">  JavaVMOption opt[<span class="number">4</span>];</div><div class="line">  opt[<span class="number">0</span>].optionString = <span class="string">"-Djava.class.path=/data/local/tmp/shim_app.apk"</span>;</div><div class="line">  opt[<span class="number">1</span>].optionString = <span class="string">"-agentlib:jdwp=transport=dt_android_adb,suspend=n,server=y"</span>;</div><div class="line">  opt[<span class="number">2</span>].optionString = <span class="string">"-Djava.library.path=/data/local/tmp"</span>;</div><div class="line">  opt[<span class="number">3</span>].optionString = <span class="string">"-verbose:jni"</span>; <span class="comment">// may want to remove this, it's noisy</span></div><div class="line"></div><div class="line">  JavaVMInitArgs args;</div><div class="line">  args.version = JNI_VERSION_1_6;</div><div class="line">  args.options = opt;</div><div class="line">  args.nOptions = <span class="number">4</span>;</div><div class="line">  args.ignoreUnrecognized = JNI_FALSE;</div><div class="line"></div><div class="line">  <span class="keyword">void</span> *libdvm_dso = dlopen(<span class="string">"libdvm.so"</span>, RTLD_NOW);</div><div class="line">  <span class="keyword">void</span> *libandroid_runtime_dso = dlopen(<span class="string">"libandroid_runtime.so"</span>, RTLD_NOW);</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (!libdvm_dso || !libandroid_runtime_dso) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  JNI_CreateJavaVM_t JNI_CreateJavaVM;</div><div class="line">  JNI_CreateJavaVM = (JNI_CreateJavaVM_t) dlsym(libdvm_dso, <span class="string">"JNI_CreateJavaVM"</span>);</div><div class="line">  <span class="keyword">if</span> (!JNI_CreateJavaVM) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-2</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  registerNatives_t registerNatives;</div><div class="line">  registerNatives = (registerNatives_t) dlsym(libandroid_runtime_dso, <span class="string">"Java_com_android_internal_util_WithFramework_registerNatives"</span>);</div><div class="line">  <span class="keyword">if</span> (!registerNatives) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-3</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (JNI_CreateJavaVM(&amp;(*p_vm), &amp;(*p_env), &amp;args)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-4</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span> (registerNatives(*p_env, <span class="number">0</span>)) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">-5</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Here’s how it’s used:</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line">JavaVM * vm = <span class="literal">NULL</span>;</div><div class="line">JNIEnv * env = <span class="literal">NULL</span>;</div><div class="line"><span class="keyword">int</span> status = init_jvm( &amp; vm, &amp; env);</div><div class="line"><span class="keyword">if</span> (status == <span class="number">0</span>) &#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Initialization success (vm=%p, env=%p)\n"</span>, vm, env);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Initialization failure (%i)\n"</span>, status);</div><div class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">jstring testy = (*env)-&gt;NewStringUTF(env, <span class="string">"this should work now!"</span>);</div><div class="line"><span class="keyword">const</span> <span class="keyword">char</span> *str = (*env)-&gt;GetStringUTFChars(env, testy, <span class="literal">NULL</span>);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"testy: %s\n"</span>, str);</div></pre></td></tr></table></figure>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Now you have everything you need to instantiate a Java VM from native code. You should also have a decent understanding (or at least links to documentation) about some of the options available to you. To see a practical application of this technique, check out <a href="/2017/04/14/calling_jni_functions_with_java_object_arguments_from_the_command_line/">Calling JNI Functions with Java Object Arguments from the Command Line</a>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you’re writing native / JNI code for Android, it’s probably as native method of an Android app. These methods are always passed the Dalvik VM instance of the app as the first parameter. You need this to create &lt;code&gt;jstring&lt;/code&gt;s and other Java objects, lookup classes and fields, etc. It’s not normal for you to have to instantiate a VM from native code because most of the time, if you’re using the Java Native Interface (JNI), you started in Java land and are only dipping into native code land for them sweet, sweet &lt;a href=&quot;http://www.androidauthority.com/java-vs-c-app-performance-689081/&quot;&gt;performance benefits&lt;/a&gt;. However, if you’re reverse engineering or writing an exploit, you’re likely always delving int all kinds of unusual trouble which the developers reasonably believed would never happen or at least would only be a theoretical edge case.&lt;/p&gt;
&lt;p&gt;I recently needed to create a VM from native code to pass Java object arguments to a JNI function. In this post, I want to share what I came up with and why I finally settled on this particular method.&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
      <category term="jni" scheme="https://CalebFenton.github.io/tags/jni/"/>
    
  </entry>
  
  <entry>
    <title>Building with and Detecting Android&#39;s Jack Compiler</title>
    <link href="https://CalebFenton.github.io/2016/12/01/building-with-and-detecting-jack/"/>
    <id>https://CalebFenton.github.io/2016/12/01/building-with-and-detecting-jack/</id>
    <published>2016-12-01T08:13:37.000Z</published>
    <updated>2017-05-27T19:47:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>Recently, I needed to write a bunch of Smali code to use in tests for <a href="https://github.com/CalebFenton/simplify" target="_blank" rel="external">Simplify</a>. While, Smali syntax is simple and fairly easy to write, it’s also tedious and I needed to do some tricky, uncommon stuff. I wasn’t even sure how to do it in Smali. Luckily, it’s pretty easy to write Java and convert it to Smali. I’ve talked about how to make a small alias to do this and go over some other use cases in a <a href="https://calebfenton.github.io/2016/07/31/understanding_dalvik_static_fields_1_of_2/">previous post</a>. Writing Java and converting to Smali makes it easy to quickly prototype lots of Smali code without worrying about Smali syntax or conventions. In this post, I want to show how to use a new Android compiler called <a href="https://source.android.com/source/jack.html" target="_blank" rel="external"><code>jack</code></a> which takes the place of <code>dx</code> and you’ll need to know how to use if you want to continue converting Java to Smali.<br><a id="more"></a></p>
<h2 id="Building-with-Jack"><a href="#Building-with-Jack" class="headerlink" title="Building with Jack"></a>Building with Jack</h2><p>The original Android compiler is <code>dx</code> and it works by translating Java <em>.class</em> files to Dalvik executables (<em>.dex</em>). Jack, however, compiles Java source code, so you don’t need to invoke <code>javac</code> at all.</p>
<p>I originally had to learn about Jack because it looks like <code>dx</code> doesn’t support newer Java <em>.class</em> versions. I tried converting a Java 8 compiled class and <code>dx</code> gave me the following error:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ dx --dex AndroidException.class</div><div class="line"></div><div class="line">PARSE ERROR:</div><div class="line">unsupported class file version 52.0</div><div class="line">...while parsing AndroidException.class</div><div class="line">1 error; aborting</div></pre></td></tr></table></figure>
<p>This was a problem. I was trying to fix a bug which exposed another bug which exposed 4 or 5 things I could be doing much cleaner which in turn led to even more stuff I wanted to fix <em>first</em> before fixing the original bugs. It’s a bit like this:</p>
<p><img src="http://i.imgur.com/t0XHtgJ.gif" alt=""></p>
<p>By the time I saw the <code>dx</code> error, I had about blown my stack. After a few milliseconds panic, I calmed down and started looking through the <code>build-tools</code> directory of the most recent Android platform I had installed. I knew that Android must be able to convert Java 8 classes to <em>.dex</em> because people are making Android apps using it.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">echo</span> <span class="variable">$ANDROID_BUILD_TOOLS</span></div><div class="line">/Users/caleb/android-sdk/build-tools/25.0.0</div></pre></td></tr></table></figure>
<p>Lo and behold, there’s this <code>jack.jar</code>. I ran it just to see what it did and it gave this nice, long, helpful help message:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">$ java -jar <span class="variable">$ANDROID_BUILD_TOOLS</span>/jack.jar --help</div><div class="line">Usage: &lt;options&gt; &lt;<span class="built_in">source</span> files&gt;</div><div class="line"></div><div class="line">Options:</div><div class="line"> @&lt;FILE&gt;                                          : <span class="built_in">read</span> <span class="built_in">command</span> line from file</div><div class="line"> --config-jarjar &lt;FILE&gt;                           : use jarjar rules files (default: none)</div><div class="line"> --config-proguard &lt;FILE&gt;                         : use a proguard flags file (default: none)</div><div class="line">                                                    (repeatable)</div><div class="line"> --help                                           : display <span class="built_in">help</span></div><div class="line"> --help-properties                                : display properties list</div><div class="line"> --import &lt;FILE&gt;                                  : import the given file into the output</div><div class="line">                                                    (repeatable)</div><div class="line"> --import-meta &lt;DIRECTORY&gt;                        : import the given directory into the output as</div><div class="line">                                                    meta-files (repeatable)</div><div class="line"> --import-resource &lt;DIRECTORY&gt;                    : import the given directory into the output as</div><div class="line">                                                    resource files (repeatable)</div><div class="line"> --incremental-folder &lt;DIRECTORY&gt;                 : directory used <span class="keyword">for</span> incremental data</div><div class="line"> --list-plugins                                   : display all available plugins</div><div class="line"> --multi-dex [NONE | NATIVE | LEGACY]             : whether to split code into multiple dex files</div><div class="line">                                                    (default: none)</div><div class="line"> --output-dex &lt;DIRECTORY&gt;                         : output dex files and resources to the directory</div><div class="line"> --output-jack &lt;FILE&gt;                             : output jack library file</div><div class="line"> --plugin &lt;NAME&gt;[,&lt;NAME&gt;...]                      : jack plugin names</div><div class="line"> --pluginpath &lt;PATH&gt;                              : jack plugin classpath</div><div class="line"> --processor &lt;NAME&gt;[,&lt;NAME&gt;...]                   : annotation processor class names</div><div class="line"> --processorpath &lt;PATH&gt;                           : annotation processor classpath</div><div class="line"> --verbose [ERROR | WARNING | INFO | DEBUG |      : <span class="built_in">set</span> verbosity (default: warning)</div><div class="line"> TRACE]</div><div class="line"> --version                                        : display version</div><div class="line"> -A &lt;option&gt;=&lt;value&gt;                              : <span class="built_in">set</span> option <span class="keyword">for</span> annotation processors</div><div class="line">                                                    (repeatable)</div><div class="line"> -D &lt;property&gt;=&lt;value&gt;                            : <span class="built_in">set</span> value <span class="keyword">for</span> the given property (repeatable)</div><div class="line"> -cp (--classpath) &lt;PATH&gt;                         : <span class="built_in">set</span> classpath</div><div class="line"> -g                                               : emit debug infos</div></pre></td></tr></table></figure>
<p>The main difference between <code>jack.jar</code> and <code>dx</code> is that, since Jack operates on Java source, it needs access to some Java runtime files. I assumed <code>rt.jar</code> would be enough. Here’s an example of how to use it with a file called <code>Hello.java</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mkdir temp_dex</div><div class="line">java -jar <span class="variable">$ANDROID_BUILD_TOOLS</span>/jack.jar -cp `/usr/libexec/java_home`/jre/lib/rt.jar --output-dex temp_dex AndroidException.java</div><div class="line">baksmali d -o temp_smali temp_dex/classes.dex</div></pre></td></tr></table></figure>
<p>This is tweaked to work on a Mac, but it should be easy to translate to Linux or Windows.</p>
<h2 id="Detecting-Jack-Created-Files"><a href="#Detecting-Jack-Created-Files" class="headerlink" title="Detecting Jack Created Files"></a>Detecting Jack Created Files</h2><p>I was curious if it was possible to fingerprint Jack-built <em>.dex</em> files. There’s a lot of useful stuff you can do with <a href="http://rednaga.io/2016/07/30/apkid_and_android_compiler_fingerprinting/" target="_blank" rel="external">compiler fingerprinting</a> such as detecting malware. I wanted to add the fingerprints to the database in <a href="https://github.com/rednaga/APKiD" target="_blank" rel="external">APKiD</a>. To find how the files are different, I built two <em>.dex</em> files from the same Java but using different tools. In this case, <code>dx</code> and <code>jack.jar</code>.</p>
<p>Here’s a small <em>.dex</em> file created with <code>dx</code>:</p>
<p><img src="/images/building-with-and-detecting-jack/dx-dex.png" alt="dx generated dex"></p>
<p>Here’s the same Java converted with <code>jack.jar</code>:</p>
<p><img src="/images/building-with-and-detecting-jack/jack-dex.png" alt="jack generated dex"></p>
<p>See that cute little <code>emitter: jack-4.12</code>? Looks like Jack intentionally watermarks files it creates. It might be able to turn it off with a command line parameter, but I haven’t looked. Here are the rules I added to APKiD to detect Jack: <a href="https://github.com/rednaga/APKiD/commit/ccca5ed519b7b2551a3205686be364c26020f1cd#diff-1731ed362177d8429d827a2b6ef3786bR131" target="_blank" rel="external">https://github.com/rednaga/APKiD/commit/ccca5ed519b7b2551a3205686be364c26020f1cd#diff-1731ed362177d8429d827a2b6ef3786bR131</a>.</p>
<h3 id="Update-12-06-2016-Improved-Jack-Detection"><a href="#Update-12-06-2016-Improved-Jack-Detection" class="headerlink" title="Update 12-06-2016 - Improved Jack Detection"></a>Update 12-06-2016 - Improved Jack Detection</h3><p>Shortly after announcing this blog on Twitter, <a href="https://twitter.com/iBotPeaches" target="_blank" rel="external">@iBotPeaches</a> (Apktool developer) was kind enough to <a href="https://twitter.com/iBotPeaches/status/804772366266015744" target="_blank" rel="external">point out</a> another distinguishing characteristic of Jack-generated DEX files which is described here: <a href="https://github.com/iBotPeaches/Apktool/issues/1354" target="_blank" rel="external">https://github.com/iBotPeaches/Apktool/issues/1354</a>.</p>
<p>The new Jack compiler changes the names of <a href="http://vanillajava.blogspot.com/2011/07/java-secret-generated-methods.html" target="_blank" rel="external">compiler generated <code>access$000</code> methods</a> to names like <code>-set0()</code>, <code>-get0()</code>, and <code>-wrap0()</code>. To build some <em>.dex</em> files for testing, here’s some Java code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OuterClass</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> myInt;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">baz</span><span class="params">()</span> </span>&#123;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">foo</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// -set0()</span></div><div class="line">      myInt = <span class="number">5</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">bar</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// -get0()</span></div><div class="line">      System.out.println(myInt);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">qux</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// -wrap0()</span></div><div class="line">      baz();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I saved this as <code>OuterClass.java</code> and compiled it explicitly with Java 1.7 because 1.8 isn’t supported by <code>dx</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">`/usr/libexec/java_home -v 1.7`/bin/javac OuterClass.java</div><div class="line">dx --dex --output=dx.dex *.class</div></pre></td></tr></table></figure>
<p>Then, I used <code>javap</code> to get the names of the <code>javac</code> generated method names:</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ javap OuterClass.class</div><div class="line">Compiled <span class="keyword">from</span> <span class="string">"OuterClass.java"</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OuterClass</span> &#123;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="title">OuterClass</span>(<span class="params"></span>)</span>;</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> access$<span class="number">002</span>(<span class="keyword">int</span>);</div><div class="line">  <span class="keyword">static</span> <span class="keyword">int</span> access$<span class="number">000</span>();</div><div class="line">  <span class="keyword">static</span> <span class="keyword">void</span> access$<span class="number">100</span>();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Yup, it’s all <code>access$00\d</code> stuff, so Jack must be the one changing these. No idea why it does this apart from making it a bit more clear what their function is, i.e. it’s easier to guess the behavior of <code>-set0(int)</code> than <code>access$002(int)</code>.</p>
<p>To get a Jack compiled version of <code>OuterClass</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir jack</div><div class="line">java -jar <span class="variable">$ANDROID_BUILD_TOOLS</span>/jack.jar -cp `/usr/libexec/java_home -v 1.7`/jre/lib/rt.jar OuterClass.java --output-dex jack</div></pre></td></tr></table></figure>
<p>Now, to examine the differences in method names by looking at the strings:</p>
<p><img src="/images/building-with-and-detecting-jack/dx_and_jack_juxtaposed.png" alt="dx and jack strings"></p>
<p>Ok, seems obvious enough. I could look for these two sets of strings to figure out the compiler. But what happens if you use <code>dexmerge</code> to combine the <code>dx</code> and <code>jack.jar</code> produced <em>.dex</em> files?</p>
<p>Here’s the alias I use for <code>dexmerge</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">alias</span> dexmerge</div><div class="line">dexmerge=<span class="string">'java -cp $ANDROID_BUILD_TOOLS/lib/dx.jar com.android.dx.merge.DexMerger'</span></div><div class="line"></div><div class="line">$ <span class="built_in">echo</span> <span class="variable">$ANDROID_BUILD_TOOLS</span></div><div class="line">/Users/caleb/android-sdk/build-tools/25.0.0</div></pre></td></tr></table></figure>
<p>In case you’re curious, here’s the usage:</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ dexmerge</div><div class="line">Usage: DexMerger &lt;out.dex&gt; &lt;<span class="selector-tag">a</span>.dex&gt; &lt;<span class="selector-tag">b</span>.dex&gt; ...</div><div class="line"></div><div class="line">If <span class="selector-tag">a</span> class is defined <span class="keyword">in</span> several dex, the class found <span class="keyword">in</span> the first dex will be used.</div></pre></td></tr></table></figure>
<p>My guess was that this would merge all the strings but the only the code in the first <em>.dex</em> would be kept, leaving several strings unreferenced. Unreferenced strings might actually be an interesting heuristic for finding <a href="http://i.imgur.com/V7Htnoe.gif" target="_blank" rel="external">weird</a> <em>.dex</em> files, but it’s not something you could do without some disassembly.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ dexmerge merge.dex dx.dex jack/classes.dex</div><div class="line">Merged dex <span class="comment">#1 (2 defs/1.3KiB)</span></div><div class="line">Merged dex <span class="comment">#2 (2 defs/1.3KiB)</span></div><div class="line">Result is 2 defs/2.5KiB. Took 0.0s</div></pre></td></tr></table></figure>
<p>Lo, and behold, the strings from each are retained:</p>
<p><img src="/images/building-with-and-detecting-jack/dexmerge.png" alt="dexmerge strings"></p>
<p>This <em>.dex</em> has an interesting history. If you know what to look for, you could tell quite a bit about how it was made which may help you infer how technically sophisticated the creator was and what tools and environment they were using. You’d know straight away that it’s the result of <code>dexmerge</code> because of the <a href="https://hitcon.org/2016/CMT/slide/day1-r0-e-1.pdf" target="_blank" rel="external">map type ordering</a> (search <code>ABNORMAL_TYPE_ORDER</code> (note to self: number slides in the future)). You would also know parts of the file were created with <code>dx</code> or dexlib 2.x and parts were created with <code>jack.jar</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Recently, I needed to write a bunch of Smali code to use in tests for &lt;a href=&quot;https://github.com/CalebFenton/simplify&quot;&gt;Simplify&lt;/a&gt;. While, Smali syntax is simple and fairly easy to write, it’s also tedious and I needed to do some tricky, uncommon stuff. I wasn’t even sure how to do it in Smali. Luckily, it’s pretty easy to write Java and convert it to Smali. I’ve talked about how to make a small alias to do this and go over some other use cases in a &lt;a href=&quot;https://calebfenton.github.io/2016/07/31/understanding_dalvik_static_fields_1_of_2/&quot;&gt;previous post&lt;/a&gt;. Writing Java and converting to Smali makes it easy to quickly prototype lots of Smali code without worrying about Smali syntax or conventions. In this post, I want to show how to use a new Android compiler called &lt;a href=&quot;https://source.android.com/source/jack.html&quot;&gt;&lt;code&gt;jack&lt;/code&gt;&lt;/a&gt; which takes the place of &lt;code&gt;dx&lt;/code&gt; and you’ll need to know how to use if you want to continue converting Java to Smali.&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Dalvik Static Fields part 2 of 2</title>
    <link href="https://CalebFenton.github.io/2016/08/21/understanding_dalvik_static_fields_2_of_2/"/>
    <id>https://CalebFenton.github.io/2016/08/21/understanding_dalvik_static_fields_2_of_2/</id>
    <published>2016-08-21T07:00:00.000Z</published>
    <updated>2016-08-21T23:56:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>In the <a href="2016/07/31/understanding_dalvik_static_fields_1_of_2/">first part</a> of this series on Dalvik class fields, I wrote about how Dalvik handles static field literals. This article is focused on how field inheritance works and exploring all the different but equally valid ways of referencing fields at the bytecode level.</p>
<p>If you are familiar with Java, you probably already understand how Java field inheritance looks and behaves at the source code level, but btyecode is less strict and potentially more ambiguous (at least to humans) than source. JVM languages like Scala and Groovy compile to the same bytecode as Java, but both have very different source code restrictions.<br><a id="more"></a></p>
<p>Since I’m doing this for <a href="https://github.com/CalebFenton/simplify" target="_blank" rel="external">Simplify</a>, the first question is what are <em>all</em> the different ways static field references can look so I can test they’re handled correctly. Here’s an example field reference:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class">Lorg/cf/ChildClass;</span>-&gt;myIntField:I</div></pre></td></tr></table></figure>
<p>The above code is in the Smali language, which isn’t technically bytecode, but it’s a much higher fidelity representation of it than, say, a decompilation or Java. The above code looks like a reference to a field of <code>ChildClass</code>, but what if <code>myIntField</code> is not defined in <code>ChildClass</code> but rather in a parent class? Can you still reference it like this or does it have to be explicit like:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class">Lorg/cf/ParentClass;</span>-&gt;myIntField:I</div></pre></td></tr></table></figure>
<p>My intuition is that it makes perfect sense to reference parent fields by the child class which inherits the fields or by the parent class directly. But there could be tons of technical reasons why only reference to the parent class is permitted. Maybe it’s ever so slightly faster?</p>
<h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><p>The way I tested everything was to create three classes: <code>ChildClass</code>, <code>ParentClass</code>, and <code>GrandparentClass</code>. Create a directory and give it a clever name like <code>inheri-tests</code> and place all of these files there.</p>
<h3 id="ChildClass-smali"><a href="#ChildClass-smali" class="headerlink" title="ChildClass.smali"></a>ChildClass.smali</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">Lchild_class;</span></div><div class="line"><span class="keyword">.super</span> <span class="class">Lparent_class;</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</div><div class="line"><span class="keyword">    .locals</span> 0</div><div class="line"><span class="keyword">    .prologue</span></div><div class="line"><span class="keyword">    .line</span> 3</div><div class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Lparent_class;</span>-&gt;&lt;init&gt;()V</div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> getsGrandparentFieldLiteral()I</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line"></div><div class="line">   <span class="built_in"> sget </span>v0, <span class="class">Lgrandparent_class;</span>-&gt;grandparentFieldLiteral:I</div><div class="line">   <span class="built_in"> const/4 </span>v0, 0x0</div><div class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></div><div class="line">.end method</div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> getsGrandparentField()I</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line"></div><div class="line">   <span class="built_in"> sget </span>v0, <span class="class">Lparent_class;</span>-&gt;grandparentField:I</div><div class="line">   <span class="built_in"> const/4 </span>v0, 0x0</div><div class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></div><div class="line">.end method</div></pre></td></tr></table></figure>
<h3 id="ParentClass-smali"><a href="#ParentClass-smali" class="headerlink" title="ParentClass.smali"></a>ParentClass.smali</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.class</span> <span class="class">Lparent_class;</span></div><div class="line"><span class="keyword">.super</span> <span class="class">Lgrandparent_class;</span></div><div class="line"></div><div class="line"><span class="keyword">.field</span><span class="keyword"> public</span><span class="keyword"> static</span> parentField:I</div><div class="line"><span class="keyword">.field</span><span class="keyword"> public</span><span class="keyword"> static</span> fieldLiteral:I = 0x2</div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</div><div class="line"><span class="keyword">    .locals</span> 0</div><div class="line"><span class="keyword">    .prologue</span></div><div class="line"><span class="keyword">    .line</span> 3</div><div class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Ljava/lang/grandparent_class;</span>-&gt;&lt;init&gt;()V</div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> getsGrandparentFieldLiteral()I</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line">   <span class="built_in"> sget </span>v0, <span class="class">Lparent_class;</span>-&gt;grandparentFieldLiteral:I</div><div class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></div><div class="line">.end method</div></pre></td></tr></table></figure>
<h3 id="GrandparentClass-smali"><a href="#GrandparentClass-smali" class="headerlink" title="GrandparentClass.smali"></a>GrandparentClass.smali</h3><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.class</span> <span class="class">Lgrandparent_class;</span></div><div class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></div><div class="line"></div><div class="line"><span class="keyword">.field</span><span class="keyword"> public</span><span class="keyword"> static</span> grandparentField:I</div><div class="line"><span class="keyword">.field</span><span class="keyword"> public</span><span class="keyword"> static</span> grandparentFieldLiteral:I = 0x5</div><div class="line"><span class="keyword">.field</span><span class="keyword"> public</span><span class="keyword"> static</span> fieldLiteral:I = 0x3</div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;clinit&gt;()V</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line"></div><div class="line">   <span class="built_in"> const/4 </span>v0, 0x4</div><div class="line">   <span class="built_in"> sput </span>v0, <span class="class">Lgrandparent_class;</span>-&gt;grandparentField:I</div><div class="line"></div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</div><div class="line"><span class="keyword">    .locals</span> 0</div><div class="line"><span class="keyword">    .prologue</span></div><div class="line"><span class="keyword">    .line</span> 3</div><div class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V</div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div></pre></td></tr></table></figure>
<h3 id="Driver-java"><a href="#Driver-java" class="headerlink" title="Driver.java"></a>Driver.java</h3><p>With all three simple Smali classes setup, I needed a Driver class with a <code>main(String[])</code> method which could be executed from the command line. For that, I created this:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Driver</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">child_class</span> </span>&#123;</div><div class="line">    <span class="comment">// Dummy class so it'll compile</span></div><div class="line">    <span class="keyword">static</span> <span class="keyword">int</span> fieldLiteral = <span class="number">0</span>;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getsGrandparentField</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getsGrandparentFieldLiteral</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] argv)</span> </span>&#123;</div><div class="line">    child_class.getsGrandparentFieldLiteral();</div><div class="line">    System.out.println(<span class="string">"field literal: "</span> + child_class.fieldLiteral);</div><div class="line">    System.out.println(<span class="string">"grandparent field: "</span> + child_class.getsGrandparentField());</div><div class="line">    System.out.println(<span class="string">"grandparent field literal: "</span> + child_class.getsGrandparentFieldLiteral());</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<div align="center"><br><img src="/images/understanding-dalvik-static-fields/read-the-code.gif" alt="READ IT"><br><strong>READ THE CODE</strong><br></div>

<h3 id="Running-the-Test"><a href="#Running-the-Test" class="headerlink" title="Running the Test"></a>Running the Test</h3><p>Compile <code>Driver</code>, remove the dummy child class, and change references to the dummy class to point at our <code>ChildClass</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">java2smali Driver.java</div><div class="line">rm Driver\<span class="variable">$child_class</span>.class</div><div class="line">sed -i <span class="_">-e</span> <span class="string">'s/Driver\$//g'</span> Driver.smali</div></pre></td></tr></table></figure>
<p>For the source for <code>runsmali</code> and <code>java2smali</code>, check out <a href="2016/07/31/understanding_dalvik_static_fields_1_of_2/">Understanding Dalvik Static Fields part 1 of 2</a>.</p>
<p>Next, compile all of the Smali files into a classes.dex and run the Driver class:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ runsmali inheri-tests Driver</div><div class="line">  adding: classes.dex (deflated 53%)</div><div class="line">[100%] /data/<span class="built_in">local</span>/runsmali.zip</div><div class="line">EXECUTING: Driver</div><div class="line">field literal: 2</div><div class="line">grandparent field: 4</div><div class="line">grandparent field literal: 5</div></pre></td></tr></table></figure>
<h3 id="The-Results"><a href="#The-Results" class="headerlink" title="The Results"></a>The Results</h3><ul>
<li><code>ChildClass</code> inherited <code>fieldLiteral</code> from <code>ParentClass</code> even though it was also in <code>GrandparentClass</code>. Fields are inherited from the nearest ancestor.</li>
<li>You can reference fields however you want as long as the object is an instance of whatever is being referenced and has the field defined at runtime. This means maximum ambiguity when parsing, which sucks.</li>
</ul>
<h2 id="Fixing-Simplify"><a href="#Fixing-Simplify" class="headerlink" title="Fixing Simplify"></a>Fixing Simplify</h2><p>The way smalivm (the virtual machine powering Simplify) dealt with field inheritance was stupid. It would simply add all fields from all ancestors regardless of public / private to any child class. This was really wasteful of space, but the real kicker is that smalivm wasn’t statically initializing (<code>&lt;clinit&gt;</code>) super classes when inherited fields were accessed since it wasn’t obvious in any data structure where the fields for a class came from.</p>
<p>The naive fix was to keep fields in their defined classes and just be sure to <code>&lt;clinit&gt;</code> ancestor classes appropriately. In this case, that means whenever <code>ChildClass</code> is instantiated, all of its ancestor classes are statically initialized. But this fix created a lot of complexity. Since child classes no longer had any reference at all to inherited fields, any time a field was accessed, it was often necessary to check ancestor classes, which was expensive.</p>
<p>I sipped my tea and thought about how much I just wanted this damned feature to work and be done with it. I’d been obsessing over fixing this bug since it was originally reported. The solution wasn’t in my head. Keep sipping my tea. Still no solution. Maybe it was the two slices of cold pizza I ate while stuck in traffic this morning? Don’t judge me. Traffic was horrible. That pizza really took the edge off. Try it. But I think it made my brain slow.</p>
<p><img src="/images/understanding-dalvik-static-fields/tea-and-pizza.png" alt="t and zah"></p>
<p>Then I got an idea from <a href="https://sable.github.io/soot/" target="_blank" rel="external">Soot</a> and <a href="http://www.cs.umd.edu/~jfoster/papers/cs-tr-5022.pdf" target="_blank" rel="external">SymDroid</a>. Soot can convert Java bytecode to a simpler form they call <a href="http://www.sable.mcgill.ca/publications/techreports/sable-tr-1998-4.ps" target="_blank" rel="external">jimple</a> and SymDroid uses something similar called <em>µ-Dalvik</em>. The idea is that you can simplify bytecode up front so that later analysis is less complex and easier. Smalivm does something like this already in that every binary math operation such as add, subtract, multiply, etc. are handled by one op internally: <a href="https://github.com/CalebFenton/simplify/blob/master/smalivm/src/main/java/org/cf/smalivm/opcode/BinaryMathOp.java" target="_blank" rel="external">BinaryMathOp</a>. In this case, for field references, I could simply resolve all references such that they refer to the defining class when building the initial graph of the method. This way, the execution can assume any field reference is pointing at the defining class, and extra lookups to ancestors won’t be necessary.</p>
<p>I hope you’ve enjoyed this two part series which I wrote by painstakingly reassembling scattered notes and code fragments taken while suffering what appears to have been a severe fever dream hallucination. Hope it was educational!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;In the &lt;a href=&quot;2016/07/31/understanding_dalvik_static_fields_1_of_2/&quot;&gt;first part&lt;/a&gt; of this series on Dalvik class fields, I wrote about how Dalvik handles static field literals. This article is focused on how field inheritance works and exploring all the different but equally valid ways of referencing fields at the bytecode level.&lt;/p&gt;
&lt;p&gt;If you are familiar with Java, you probably already understand how Java field inheritance looks and behaves at the source code level, but btyecode is less strict and potentially more ambiguous (at least to humans) than source. JVM languages like Scala and Groovy compile to the same bytecode as Java, but both have very different source code restrictions.&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
  </entry>
  
  <entry>
    <title>Understanding Dalvik Static Fields part 1 of 2</title>
    <link href="https://CalebFenton.github.io/2016/07/31/understanding_dalvik_static_fields_1_of_2/"/>
    <id>https://CalebFenton.github.io/2016/07/31/understanding_dalvik_static_fields_1_of_2/</id>
    <published>2016-07-31T07:00:00.000Z</published>
    <updated>2017-04-13T22:25:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>This story starts with <a href="https://github.com/teDDyGH" target="_blank" rel="external">someone</a> reporting a very well written and concise <a href="https://github.com/CalebFenton/simplify/issues/50" target="_blank" rel="external">issue</a> for Simplify. After digging into it, I found a problem with how smalivm was handling static field initialization. In case you didn’t know, you can initialize a static field in smali like this:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.field</span><span class="keyword"> private</span><span class="keyword"> static</span> someInt:I = 5</div></pre></td></tr></table></figure>
<p>I’d seen that smali supported this format years ago, and included it in my <a href="https://github.com/ShaneWilton/sublime-smali" target="_blank" rel="external">Smali syntax definitions for Sublime</a>, but I couldn’t ever produce a DEX which used this. Whenever I had a simple, primitive static field, <code>dx</code> would generate bytecode which initialized the field in the class initializer <code>&lt;clinit&gt;</code>.</p>
<p>Ok, so now I needed to support this in smalivm which means I had to figure out <em>exactly</em> how everything worked, what was valid, what was invalid, and how each type (float, long, int, …) looks. Yay!</p>
<a id="more"></a>
<p>Long ago, when I tried to create a DEX which had these “inline static field literals”, the reason I failed may have been because I was either using an older version of <code>dx</code> or I was invoking it weirdly (looking at you <code>--no-optimize</code>). If some versions just didn’t use inline literals, it could be an interesting signature for compiler fingerprinting for <a href="https://github.com/rednaga/APKiD" target="_blank" rel="external">APKiD</a>.</p>
<p>When thinking about this problem, I realized I didn’t think very carefully about the values of uninitialized fields. Originally, I was assuming an <code>UnknownValue</code> for all fields until they were initialized. However, I know Java treats Objects as <code>null</code> and primitives as something sensible like <code>0</code> for numerics and <code>false</code> for boolean. I felt absolutely confident that Dalvik worked the same way, so of course I setup a way of testing it to be absolutely super confident + 1. So, I wrote some Java:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">InitTests</span> </span>&#123;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> someInt;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">char</span> someChar;</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">    System.out.println(<span class="string">"someInt = "</span> + someInt);</div><div class="line">    System.out.println(<span class="string">"someChar = "</span> + someChar);</div><div class="line">    System.out.println(<span class="string">"is it eql? "</span> + (someChar == <span class="string">'\0'</span>));</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This will test the default value of <code>int</code> and <code>char</code>. I bet you didn’t think about <code>char</code> when I mentioned default values of primitives earlier! Oh no, you were probably smugly thinking “of course an <code>int</code> is 0, that just makes sense, duh!” but what about <code>char</code>, huh? I figured it’d probably be a null character, but I so infrequently use those in Javaland that I wasn’t even sure <code>&#39;\0&#39;</code> would work. Turns out, it does.</p>
<p>So I have all this Java. How am I going to run this on a Dalivk VM? You might be thinking, “Oh! I know this one! I’ll make an Android project, add this code as a class, wire it up to get executed when the main activity loads, and throw it on an emulator!” If that’s what you thought, give yourself an “<strong>F</strong>“ because <strong>F</strong>uck that. Way too slow. Enter <code>java2smali</code>.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Need javac, baksmali and dx on your path, bro</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">func_java2smali</span></span>() &#123;</div><div class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;1&#125;</span>"</span> ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"usage: java2smali &lt;java file&gt;"</span></div><div class="line">    <span class="built_in">return</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line"></div><div class="line">  filename=$(basename <span class="variable">$1</span> .java)</div><div class="line">  outDir=$(shasum <span class="variable">$1</span> | awk <span class="string">'&#123;print $1&#125;'</span>)</div><div class="line"></div><div class="line">  <span class="comment"># Generate debug info in case we keep the dex</span></div><div class="line">  javac -g -cp <span class="variable">$ANDROID_PLATFORM</span>/android.jar <span class="variable">$1</span></div><div class="line">  dx --dex --no-strict --no-optimize --output=<span class="variable">$filename</span>.dex <span class="variable">$filename</span>.class</div><div class="line">  baksmali --sequential-labels --use-locals <span class="variable">$filename</span>.dex -o <span class="variable">$outDir</span></div><div class="line"></div><div class="line">  cp -R <span class="variable">$outDir</span>/**/*.smali .</div><div class="line"></div><div class="line">  rm -r <span class="variable">$outDir</span></div><div class="line">  rm <span class="variable">$filename</span>.class</div><div class="line">  rm <span class="variable">$filename</span>.dex</div><div class="line">&#125;</div><div class="line"><span class="built_in">alias</span> java2smali=func_java2smali</div></pre></td></tr></table></figure>
<p>This bad bitch will convert your easy to read and write Java code into Smali. It has some limitations. Namely, it’s written in Bash, so a small percentage of you may go mad if you look at it too long. It also doesn’t work super good with multiple files or inner classes.</p>
<p>Now you can generate Smali from the Java, but you still need to execute it, right? Enter <code>runsmali</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">func_runsmali</span></span>() &#123;</div><div class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;1&#125;</span>"</span> ] || [ -z <span class="string">"<span class="variable">$&#123;2&#125;</span>"</span> ]; <span class="keyword">then</span></div><div class="line">    <span class="built_in">echo</span> <span class="string">"usage: runsmali &lt;smali file or dir&gt; &lt;class&gt; [adb device]"</span></div><div class="line">    <span class="built_in">return</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line"></div><div class="line">  smali <span class="variable">$1</span> -o classes.dex</div><div class="line">  zip runsmali.zip classes.dex</div><div class="line">  rm classes.dex</div><div class="line"></div><div class="line">  <span class="comment"># SUCH ROBUST. MUCH RELIABLE.</span></div><div class="line">  TEMP_ADB_PATH=<span class="string">"/data/local"</span></div><div class="line">  OUTPUT=`adb shell ls <span class="variable">$TEMP_ADB_PATH</span>`</div><div class="line">  <span class="keyword">if</span> [[ <span class="variable">$OUTPUT</span> == *<span class="string">"Permission denied"</span>* ]]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    TEMP_ADB_PATH=<span class="string">"/data/local/tmp"</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line"></div><div class="line">  <span class="keyword">if</span> [ -z <span class="string">"<span class="variable">$&#123;3&#125;</span>"</span> ]; <span class="keyword">then</span></div><div class="line">    adb push runsmali.zip <span class="variable">$TEMP_ADB_PATH</span></div><div class="line">  <span class="keyword">else</span></div><div class="line">    adb push <span class="_">-s</span> <span class="variable">$3</span> runsmali.zip <span class="variable">$TEMP_ADB_PATH</span></div><div class="line">  <span class="keyword">fi</span></div><div class="line">  rm runsmali.zip</div><div class="line"></div><div class="line">  <span class="built_in">echo</span> <span class="string">"EXECUTING: <span class="variable">$2</span>"</span></div><div class="line">  adb shell dalvikvm -cp <span class="variable">$TEMP_ADB_PATH</span>/runsmali.zip <span class="variable">$2</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">alias</span> runsmali=func_runsmali</div></pre></td></tr></table></figure>
<p>Ideally, this should be in Python and installable using <code>pip</code>. It’s a rainy day project, and since it doesn’t rain in California, it might be a while before I get to it. Also, about Python packages, friends, let me tell you that Python packaging is a <em>DARK ART</em>. You want to know the best practices? Fuck you. That’s what they are. It’s a mess. Ruby Gems are <em>much</em> easier, but Ruby isn’t installed on everyone’s machine like Python is.</p>
<p><img src="/images/understanding-dalvik-static-fields/black_magic.png" alt=""></p>
<blockquote>
<p>Disclaimer: Coding in Python is a joy, and I don’t dislike the language at all. There’s just some confusing shit if you’re new and trying to learn, like Python 2 vs Python 3 and all the different package distribution tools.</p>
</blockquote>
<p>Anyway, just fire up an emulator and use <code>runsmali</code> to take care of invoking the dalvikvm and get the output:</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ runsmali InitTests.smali InitTests</div><div class="line">  adding: classes.dex (deflated <span class="number">44</span>%)</div><div class="line">[<span class="number">100</span>%] /data/<span class="keyword">local</span>/runsmali.zip</div><div class="line">EXECUTING: InitTests</div><div class="line">someInt = <span class="number">0</span></div><div class="line">someChar =</div><div class="line"><span class="keyword">is</span> <span class="keyword">it</span> eql? <span class="literal">true</span></div></pre></td></tr></table></figure>
<p>I wanted to know how to initialize all of the different types, so I had to go digging through the syntax to know everything that was valid. I started <a href="https://github.com/JesusFreke/smali/blob/master/smali/src/main/antlr/smaliParser.g#L481" target="_blank" rel="external">here</a> where <code>FIELD_DIRECTIVE</code> is defined. This led me to some literal parsing code <a href="https://github.com/JesusFreke/smali/blob/master/smali/src/main/antlr/smaliTreeWalker.g#L267" target="_blank" rel="external">here</a>. Ultimately, I found <a href="https://github.com/JesusFreke/smali/blob/master/smali/src/main/jflex/smaliLexer.jflex#L288" target="_blank" rel="external">this</a> which told me how type signifiers are defined. I also stumbled across <a href="https://github.com/JesusFreke/smali/blob/master/smali/src/main/jflex/smaliLexer.jflex#L203" target="_blank" rel="external">this</a> which showed me <code>float</code>s and <code>double</code>s can be <code>NaN</code> in addition to numeric literals. That leaves us with these all as valid static field literals:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myInt:I = -4</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myShort:S = 0xDEADS</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myBoolean:Z = false</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myChar:C = '\n'</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myLong:J = 1000000000l</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myOtherLong:J = 0x42424242L</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myFloat:F = NaN</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myFloat2:F = NaNf</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myOtherFloat:F = 3.14159265357</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myOtherFloat2:F = 3.14159265357f</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myDouble:D = 10000000.9d</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myObject:<span class="class">Ljava/lang/Object;</span> = null</div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myString:<span class="class">Ljava/lang/String;</span> = <span class="string">"Neuro from the nerves, the \"</span>silver\<span class="string">" paths."</span></div><div class="line"><span class="keyword">.field</span><span class="keyword"> static</span> myByte:B = 0x5t</div></pre></td></tr></table></figure>
<p>In the next post on this topic, I’ll talk about inheritance and valid ways of referencing fields.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;This story starts with &lt;a href=&quot;https://github.com/teDDyGH&quot;&gt;someone&lt;/a&gt; reporting a very well written and concise &lt;a href=&quot;https://github.com/CalebFenton/simplify/issues/50&quot;&gt;issue&lt;/a&gt; for Simplify. After digging into it, I found a problem with how smalivm was handling static field initialization. In case you didn’t know, you can initialize a static field in smali like this:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.field&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; private&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; someInt:I = 5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I’d seen that smali supported this format years ago, and included it in my &lt;a href=&quot;https://github.com/ShaneWilton/sublime-smali&quot;&gt;Smali syntax definitions for Sublime&lt;/a&gt;, but I couldn’t ever produce a DEX which used this. Whenever I had a simple, primitive static field, &lt;code&gt;dx&lt;/code&gt; would generate bytecode which initialized the field in the class initializer &lt;code&gt;&amp;lt;clinit&amp;gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Ok, so now I needed to support this in smalivm which means I had to figure out &lt;em&gt;exactly&lt;/em&gt; how everything worked, what was valid, what was invalid, and how each type (float, long, int, …) looks. Yay!&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
  </entry>
  
  <entry>
    <title>Death and the Java Class Loader</title>
    <link href="https://CalebFenton.github.io/2016/07/08/death-and-the-java-class-loader/"/>
    <id>https://CalebFenton.github.io/2016/07/08/death-and-the-java-class-loader/</id>
    <published>2016-07-08T07:00:00.000Z</published>
    <updated>2017-04-05T23:36:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>When <a href="https://calebfenton.github.io/2016/04/30/dalvik-virtual-execution-with-smalivm/">smalivm</a> is virtually executing code, sometimes it needs to pass around Java Class objects. If it’s a Java API class like <code>String</code> or <code>LinkedList</code>, that’s no problem because smalivm is running in a JVM and has access to those classes already. But what if the class is of a type that’s from the app it’s trying to run? That class only exists in virtual execution imagination land, and if I don’t want to rewrite everything and implement core JVM stuff myself, I need to dynamically create classes.</p>
<p>What this means is, when you pass smalivm an input DEX, it’ll create a real life Java class which talks and walks just like the DEX class you give it, except it’ll be inert and soulless, without any code. This way it can pass around the dry husk of a Java class, and if input DEX code wants to check the number of names of methods or do tricky reflection stuff, all those properties are there.<br><a id="more"></a></p>
<p>To accomplish this, I needed to create my own <code>ClassLoader</code>. I heartily recommend anyone to do this because I ended up learning a lot about Java in the process. Fear not comrades, I’m not actually going to write a Java tutorial (LOL), because I have to look at myself in the mirror in the morning and there’s already CodeRanch. If you want to poke around the code though, <a href="https://github.com/CalebFenton/simplify/blob/master/smalivm/src/main/java/org/cf/smalivm/smali/SmaliClassLoader.java" target="_blank" rel="external">be my guest</a>. Most of the ASM code I could find was written by overly clever academics and took my brain a while to parse. I wrote everything like an idiot, so it’s probably easier to understand. A lot of the ASM heavy lifting happens in <a href="https://github.com/CalebFenton/simplify/blob/master/smalivm/src/main/java/org/cf/smalivm/smali/ClassBuilder.java" target="_blank" rel="external">org/cf/smalivm/smali/ClassBuilder</a>.</p>
<p>I banged out most of the code during a 20 hour international flight. First, I wrestled with <a href="http://bytebuddy.net/#/" target="_blank" rel="external">ByteBuddy</a> for dynamic class generation. It’s a great library, and the maintainer has a lot of documentation and even replied to my questions on Twitter, so he’s cool, but it’s ~<code>1_000</code> more complicated than I needed. It’s the sort of library where stupid simple things are hard and confusing, but impossible stuff is possible and pretty clean. Eventually, I rewrote several hours of <a href="https://github.com/CalebFenton/simplify/blob/69944abc81bd3c3acee96381221eab95be5fb224/smalivm/src/main/java/org/cf/smalivm/smali/ClassBuilder.java" target="_blank" rel="external">complex, frustrated code</a> in 30 minutes just using <a href="http://asm.ow2.org/" target="_blank" rel="external">ASM</a>.</p>
<p>However, during that time I was stuck on a plane. I had 4+ airline meals and whatever my wife wouldn’t eat and constant access to beer. Also, I was coming back from visiting 2 of the 3 places in Vietnam with Dengue outbreaks (I’ll spare you details, but pretty sure I got it) Combine that remaining more or less completely still in a cramped seat for 20 hours and you get this wicked awesome feeling of <em>actually dying</em> IRL blended with … constipation. My body acted like it was poisoned. Like with alcohol poisoning, it associated what I was doing (programming on Eclipse) with a horrible feeling of death and loneliness.  It was about a week before I could even look at <a href="https://github.com/CalebFenton/simplify" target="_blank" rel="external">simplify</a> code without feeling queasy, tired, and hopeless. I’ve since switched to IntelliJ. Lesson learned: fuck international travel.</p>
<p><img src="/images/death-and-the-java-class-loader/finn-death.gif" alt=""></p>
<p>Everything was working great, then I ran into a snag. See, Android has a few classes that Java doesn’t, because it’s <a href="https://en.wikipedia.org/wiki/Oracle_America,_Inc._v._Google,_Inc." target="_blank" rel="external">totally and obviously a different thing guys</a>. Whenever an app used a <code>Class</code> defined in the Android framework but not in Java, I had to dynamically generate it. This was fine 99% of the time. <strong>BUT.</strong> Some class paths start with <code>java.</code> (e.g. <code>java.lang.DexCache</code>), and <em>thou shall not define classes which start with <code>java.</code></em>. Here’s the exception you get:</p>
<blockquote>
<p>Prohibited package name: java.net.DexCache also lol, eat dongs</p>
</blockquote>
<p>It’s a <a href="http://stackoverflow.com/questions/3804442/why-java-lang-securityexception-prohibited-package-name-java-is-required" target="_blank" rel="external">security thing</a>.</p>
<p>I understand it’s a security thing, but like any good security person, I figured I knew better and nothing bad would happen to me, so in my hubris I went to look if I could use any clever reflection tricks to <em>bypass the error</em>. To trace how this happens, start with your custom class loader. It’ll call Java’s <code>ClassLoader#defineClass()</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Class&lt;?&gt; defineClass(String name, <span class="keyword">byte</span>[] b, <span class="keyword">int</span> off, <span class="keyword">int</span> len,</div><div class="line">                                     ProtectionDomain protectionDomain)</div><div class="line">    <span class="keyword">throws</span> ClassFormatError</div><div class="line">&#123;</div><div class="line">    protectionDomain = preDefineClass(name, protectionDomain);</div><div class="line">    String source = defineClassSourceLocation(protectionDomain);</div><div class="line">    Class&lt;?&gt; c = defineClass1(name, b, off, len, protectionDomain, source);</div><div class="line">    postDefineClass(c, protectionDomain);</div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I know from the exception stack trace that there’s a check in <code>preDefineClass</code>, so let’s look there:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> ProtectionDomain <span class="title">preDefineClass</span><span class="params">(String name,</span></span></div><div class="line">                                        ProtectionDomain pd)</div><div class="line">&#123;</div><div class="line">    <span class="keyword">if</span> (!checkName(name))</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NoClassDefFoundError(<span class="string">"IllegalName: "</span> + name);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((name != <span class="keyword">null</span>) &amp;&amp; name.startsWith(<span class="string">"java."</span>)) &#123;</div><div class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SecurityException</div><div class="line">            (<span class="string">"Prohibited package name: "</span> +</div><div class="line">             name.substring(<span class="number">0</span>, name.lastIndexOf(<span class="string">'.'</span>)));</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (pd == <span class="keyword">null</span>) &#123;</div><div class="line">        pd = defaultDomain;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (name != <span class="keyword">null</span>) checkCerts(name, pd.getCodeSource());</div><div class="line"></div><div class="line">    <span class="keyword">return</span> pd;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Pff, this is easy. I’ll just barf out some Java method to do all this myself, sans the inconvenient “java.” check:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> Class&lt;?&gt; dauntlessDefineClass(String name, <span class="keyword">byte</span>[] b) <span class="keyword">throws</span> Exception &#123;</div><div class="line">    <span class="comment">// return defineClass(name, b, 0, b.length, null);</span></div><div class="line"></div><div class="line">    Field f = ClassLoader.class.getDeclaredField(<span class="string">"defaultDomain"</span>);</div><div class="line">    f.setAccessible(<span class="keyword">true</span>);</div><div class="line">    ProtectionDomain protectionDomain = (ProtectionDomain) f.get(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">    Method dcs = ClassLoader.class.getDeclaredMethod(<span class="string">"defineClassSourceLocation"</span>,</div><div class="line">                    <span class="keyword">new</span> Class&lt;?&gt;[] &#123; ProtectionDomain.class &#125;);</div><div class="line">    dcs.setAccessible(<span class="keyword">true</span>);</div><div class="line">    String source = (String) dcs.invoke(<span class="keyword">this</span>, protectionDomain);</div><div class="line"></div><div class="line">    Method dc1 = ClassLoader.class.getDeclaredMethod(<span class="string">"defineClass1"</span>, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;</div><div class="line">                    String.class, <span class="keyword">byte</span>[].class, <span class="keyword">int</span>.class, <span class="keyword">int</span>.class, ProtectionDomain.class, String.class &#125;);</div><div class="line">    dc1.setAccessible(<span class="keyword">true</span>);</div><div class="line">    Class&lt;?&gt; c = (Class&lt;?&gt;) dc1.invoke(<span class="keyword">this</span>, name, b, <span class="number">0</span>, b.length, protectionDomain, source);</div><div class="line"></div><div class="line">    Method pdc = ClassLoader.class.getDeclaredMethod(<span class="string">"postDefineClass"</span>, <span class="keyword">new</span> Class&lt;?&gt;[] &#123;</div><div class="line">                    Class.class, ProtectionDomain.class &#125;);</div><div class="line">    pdc.setAccessible(<span class="keyword">true</span>);</div><div class="line">    pdc.invoke(<span class="keyword">this</span>, c, protectionDomain);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I’m most proud of the method name. Just <a href="https://github.com/CalebFenton/simplify/blob/3dbfc719c88a7965e806f65efbd35d4cc495f173/smalivm/src/main/java/org/cf/smalivm/VirtualMachine.java#L192" target="_blank" rel="external">sounds cool</a>. But it didn’t work. Turns out, the <em>real</em> magic actually happens in <em><code>defineClass1()</code></em>. Good news! It’s a native method! /s AFAIK, I can’t do clever reflection to get around that. Since I need to call it to actually define the class and get my JVM <code>Class</code> object, the only solution seems to be drastically increase the complexity of running Simplify / smalivm such that I can hotswap in protected classes. I’ll sit on that for now.</p>
<p><img src="/images/death-and-the-java-class-loader/manly-tears.gif" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When &lt;a href=&quot;https://calebfenton.github.io/2016/04/30/dalvik-virtual-execution-with-smalivm/&quot;&gt;smalivm&lt;/a&gt; is virtually executing code, sometimes it needs to pass around Java Class objects. If it’s a Java API class like &lt;code&gt;String&lt;/code&gt; or &lt;code&gt;LinkedList&lt;/code&gt;, that’s no problem because smalivm is running in a JVM and has access to those classes already. But what if the class is of a type that’s from the app it’s trying to run? That class only exists in virtual execution imagination land, and if I don’t want to rewrite everything and implement core JVM stuff myself, I need to dynamically create classes.&lt;/p&gt;
&lt;p&gt;What this means is, when you pass smalivm an input DEX, it’ll create a real life Java class which talks and walks just like the DEX class you give it, except it’ll be inert and soulless, without any code. This way it can pass around the dry husk of a Java class, and if input DEX code wants to check the number of names of methods or do tricky reflection stuff, all those properties are there.&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
      <category term="smalivm" scheme="https://CalebFenton.github.io/tags/smalivm/"/>
    
      <category term="simplify" scheme="https://CalebFenton.github.io/tags/simplify/"/>
    
  </entry>
  
  <entry>
    <title>What is a company?</title>
    <link href="https://CalebFenton.github.io/2016/06/18/what-is-a-company/"/>
    <id>https://CalebFenton.github.io/2016/06/18/what-is-a-company/</id>
    <published>2016-06-18T07:00:00.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>People throw around the phrase “company culture” a lot. There are tons of articles on LinkedIn and Medium about “How to 10x Your Company Culture”, “The 7 Mistakes Managers Make Which Harm Culture”, “12 Steps to Improving Culture”, and so on. Some articles are really good and many are at least interesting, but I always felt like they all make assumptions that limit creativity in their approaches to understand and improve culture. Companies are just people. </p>
<p>I’d always been a bit of a loner, and maybe that’s why when I started working it was endlessly fascinating for me to watch the company with the camera pulled way back as if I was an alien trying to understand the fundamental forces which made the organization work. I observed and mused about how to understand companies from first principals for about a decade until one day I made some unexpected conceptual connections that really pulled back the curtain and helped me understand culture differently. And it’s all thanks to <em>online video games</em>.<br><a id="more"></a></p>
<h1 id="Pulling-the-Camera-Back"><a href="#Pulling-the-Camera-Back" class="headerlink" title="Pulling the Camera Back"></a>Pulling the Camera Back</h1><p>We’re on a planet with a bunch of people on it. We have these social organs which are hardware for programs like language, religion, society, and so on. We call these organs “brains”. As hardware goes, they’re a bit wonky–optimized to quickly make sense of the world rather than make <em>accurate</em> sense of it. They evolved to keep us alive not necessarily think rationally and carefully and be happy. Put enough of us together in one area and we start organizing into groups. There’s all kinds of groups: government, hobby groups, social clubs, and working groups. We call a particular subset of working groups “companies”.</p>
<p>In my youth, I had this ridiculous notion that when you get a job, it becomes your identity. In this fantasy world of mine, everyone took their job <em>super serious</em>. For example, I assumed all programmers spent most of their time on the clock whole-heartedly working and earnestly mastering their craft. They went home programmers. Ate as programmers. Slept as programmers. I also thought teachers slept behind their desks, so I obviously wasn’t thinking very carefully. In my imagination, confident professionals strode purposefully down gleaming hallways and interacted with co-workers like so many parts of a well lubricated machine. My naive understanding caused a bunch of stuff to not make sense to me. Why did software have so many bugs? Are the programmers stupid?</p>
<p>As I got older, I learned a bit about how the world actually worked. First, teachers are actually people and they go home at night, usually. Second, employees are also actually people and what motivates them and their relationship with the company is more complex than I originally thought. Maybe the programmers didn’t do a good job because they <em>didn’t give a shit</em>. But why wouldn’t they give a shit? And didn’t I mention something about video games? Yes, I did, but hold on, I’m building up to it.</p>
<h1 id="The-Unbelievable-Company"><a href="#The-Unbelievable-Company" class="headerlink" title="The Unbelievable Company"></a>The Unbelievable Company</h1><p>Why is it that some people are motivated and other’s aren’t? At the surface level, you could say it has something to do with mental fortitude, resilience, good parenting, discipline, and so on. These are all excellent subjects for study to be sure and I’d be inclined to blame a lack of motivation on one or a combination of these, but I’ve been a part of some very different companies and have seen what a radical difference the culture can make. Let me tell you about the company that most challenged the assumptions I made about culture. </p>
<p>First, I applied online by getting in contract with one of their recruiters. I was leaving another company that had a much more elaborate recruiting process that included spending about an hour or two filling out forms online; some of the forms had essay questions. When the recruiter got back with me, we talked for a while about what the company was looking for, what they offered, what they expected from me, and plans for the future. The somewhat informal interview lasted about 30 minutes during which the recruiter collected some information from me so they could do a sort of background check. You see, this company had to deal with the very real threat of sabotage. It was not unheard of for a rival company in this industry to send spies to infiltrate and disrupt the company, so everyone was always a little paranoid. I still don’t know exactly what they were looking for, but I know it included Googling me and checking out my online activity to make sure I’d been around for a while and didn’t suddenly appear out of no where.</p>
<p>Success! After a few days, I was told I made it and got the job. I was directed to a company Wikipedia with detailed information which included a detailed list of equipment I might need, lots of pages on how to perform various duties, how to register for forums and teleconferencing systems, and even how to make use of the companies internal logistics division which would help me relocate all of my stuff to the company headquarters. I was impressed with how quickly I was on-boarded and made to feel welcome.</p>
<p>My first few days were uneventful and I spent most of my time reading the Wiki, talking with the team, and occasionally asking questions. I was impressed that despite our relatively small size (about 50 people), we handled several projects in different areas that all had 24 hour uptime requirements and on-call schedules in very hostile environments. The team communicated constantly and you could tell there was a lot of friendship and respect between everyone. While I was busy learning the ropes, others tended to the Wiki by adding and updating training materials, they probably did lots of other stuff too, but I was only on the Wiki and saw it constantly getting updated.</p>
<p>Our team conducted complex operations almost every week which required an almost militaristic discipline despite the fact that there was no strict company hierarchy. There were some people who were more in charge than others, but it was pretty flat and it seemed to be a meritocracy. Whoever was capable of leading an operation would volunteer and people would follow their instructions. It was a lot of work, but it was also fun, and we accomplished some impressive stuff. The most unbelievable aspect to all this was that <strong>no one was paid</strong>. Yup, no one was paid yet most people most of the time were highly motivated. People felt rewarded. They felt good at their jobs and felt like they contributed. No, I’m not talking about a non-profit, I’m talking about an Eve Online corporation <a href="https://www.youtube.com/watch?v=e2X1MIR1KMs" target="_blank" rel="external">Eve Online</a>.</p>
<p><a href="https://www.youtube.com/watch?v=e2X1MIR1KMs" target="_blank" rel="external"><img src="/images/what-is-a-company/this_is_eve-1243x652.jpg" alt=""></a></p>
<p>Watch that video. It’s not always that exciting, but it’s the only game I’ve played that <em>does</em> get that exciting. Those ships they’re flying may take years to train for and months to build, with many different people and corporations coming together to make them. You see, Eve Online is almost entirely player-run, from the economy to the actual direction of the game’s development. Almost all of the items in the game are created by players and some people specialize in <em>just</em> trading them or moving them around from one place to another.</p>
<h1 id="Why-does-this-count-as-a-company"><a href="#Why-does-this-count-as-a-company" class="headerlink" title="Why does this count as a company?"></a>Why does this count as a company?</h1><p>People take <a href="https://www.engadget.com/2009/06/10/eve-onlines-largest-player-run-bank-rocked-by-embezzlement/" target="_blank" rel="external">this</a> <a href="https://www.engadget.com/2010/09/11/eve-online-player-steals-45-000-worth-of-isk-in-massive-investm/" target="_blank" rel="external">game</a> <a href="https://www.engadget.com/2011/08/12/biggest-eve-online-scam-ever-recorded-nets-over-a-trillion-isk/" target="_blank" rel="external">super</a> <a href="https://www.engadget.com/2010/10/30/the-largest-battle-ever-held-in-eve-online-is-going-on-right-now/" target="_blank" rel="external">fucking</a> <a href="http://www.mmogames.com/gamearticles/6-amazing-moments-eve-online/" target="_blank" rel="external">serious</a>.</p>
<p><img src="/images/what-is-a-company/2010-10-04-trade1.jpg" alt=""></p>
<p>What is it that makes a company a company? Surely it’s not just making money, thought real money does intrude into Eve. While I said no one was paid, that isn’t exactly true. Eve allows players to buy subscription time (aka Pilot License Extensions, aka PLEX) with in-game currency and PLEX can be sold for real currency. Some players were sponsored by the corp and didn’t have to pay. Very few players make any serious money, but the stuff you make and accomplish in the game is just as difficult to make as money. You are competing with other human beings for territory either actual star systems or commodity trading. This competition is pretty serious work and takes a lot of time and skill to do right, and I’d argue that the organized and collaborative application of time and skill is what makes a company.</p>
<h1 id="Why-does-it-work"><a href="#Why-does-it-work" class="headerlink" title="Why does it work?"></a>Why does it work?</h1><p>For me, being employed in an Eve corp felt like a job. It’s a really fun job, to be sure. You’re an immortal super-human and you get to fly around in spaceships and shoot lasers, but there’s a lot of non-glamorous work in there too. Remember that 24 hour on-call schedule I mentioned? Players have to defend their territory at <em>all times</em>. A rival corp could gang up and start blasting you away in 3 AM. </p>
<p>If it’s so much work though, how is it that people put in so many hours and so much effort even though they weren’t getting paid? What motivates people to volunteer their labor to this? If you can figure this out, you might be able to make a real life company more like an Eve corp.</p>
<h2 id="People-can-see-the-impact-of-their-work"><a href="#People-can-see-the-impact-of-their-work" class="headerlink" title="People can see the impact of their work"></a>People can see the impact of their work</h2><p>If you work hard at something, you want to see the effects. Even people really good at delayed gratification eventually want that gratification. But the problem with many corporations is the feedback loops are broken. If you work super hard, you might not get any indication of how much your work affects the bottom line. This might be because it’s just really hard to figure out how to measure how good of a job you’re doing and how that actually impacts the company.</p>
<p>In games, feedback mechanisms can be programmed into the fabric of reality. Once you figure out how to press that win button, you can keep pressing it. In the real world, things are all in shades of gray. No one really knows the extent of what’s possible.</p>
<h2 id="People-feel-they’re-good-at-what-they-do"><a href="#People-feel-they’re-good-at-what-they-do" class="headerlink" title="People feel they’re good at what they do"></a>People feel they’re good at what they do</h2><p>Games are easier to figure out because the feedback is clearer and they’re more narrowly focused than real life. This means people learn what works and what doesn’t fairly quickly and achieve of a level of mastery that they can feel proud of. Real life is much more complicated.</p>
<h2 id="People-are-more-mobile"><a href="#People-are-more-mobile" class="headerlink" title="People are more mobile"></a>People are more mobile</h2><p>The labor market in an online game is much more mobile. Even though it’s a huge hassle to move in Eve, and it’s usually necessary when changing corps, it’s still way easier than moving in real life. Most people are secretly scared shitless about risking everything and hauling their house full of shit off to some new location with new neighbors, shops, commute, work routines, etc.</p>
<p>This one is major a force multiplier. Since the cost of moving is so much lower online, people do it more often. This creates a pressure on corps to compete for labor. If you feel like you can get a better deal somewhere else, if another corp is bigger and better organized or offers better opportunity for advancement, it’s not too hard to hook up with the new corp.</p>
<p>There’s a similar situation for engineers and tech talent in the Bay Area and Silicon Valley. Many people I know only stay 6 months to 2 years at a place before jumping ship somewhere better. What’s crazy is that it’s not uncommon for their new employer to sweeten the transition by offering a nice little pay bump and maybe a promotion. This comes with a lot of negatives, i.e. a bunch of entitled shits that complain like it’s the end of the world just because we’re out of brown chocolates in the kitchen, but the benefits are that employers are throwing around a lot of money and fighting really hard to have all kinds of nice perks and smart management to keep everyone engaged and happy.</p>
<h2 id="People-can-control-their-apperances"><a href="#People-can-control-their-apperances" class="headerlink" title="People can control their apperances"></a>People can control their apperances</h2><p>There are lots of conscious and unconscious biases when it comes to meatspace interactions. Games side step that by letting people talk with voice or only text if they want. Your avatar can look however you want it. I think it’s possible this creates an environment where your actions and your skills are much more important than how you look, that fucking annoying pedantic, nasal-voiced way you have of talking to people, or your stupid laugh. And that’s got to be a good thing, right?</p>
<h1 id="What-can-you-do"><a href="#What-can-you-do" class="headerlink" title="What can you do?"></a>What can you do?</h1><p>I don’t pretend to be an expert on how to run a business. I’m sure smarter and more experienced people than me have put more time and effort into this problem. My goal was to think outside the box, challenge assumptions, and maybe re-prioritize what’s most important, which I hope this article does.</p>
<p>If I had to put my finger on what’s most important for creating an atmosphere in a company where everyone is motivated, I’d say it’s designing the right incentive and feedback structures. I’d spent a <em>lot</em> of time thinking very carefully about what I’m incentivizing and how to keep the feedback loops tight for each of the different roles.</p>
<p>If you’re reading this, you’re probably not the VP of Company Culture, so what can you do to make a difference? Well, the main thing you can do is respect everyone else and treat them right. If you see someone doing something well, complement them. Let them know they’re good at what they’re doing. If someone helps you out, praise them so they can see the impact of their work. Pretty much everyone you work with <em>has</em> to work to survive, so if you all have to be there, you can try and get along, at least at work.</p>
<p>Hot jets. Clear skies. Fly safe. o7</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;People throw around the phrase “company culture” a lot. There are tons of articles on LinkedIn and Medium about “How to 10x Your Company Culture”, “The 7 Mistakes Managers Make Which Harm Culture”, “12 Steps to Improving Culture”, and so on. Some articles are really good and many are at least interesting, but I always felt like they all make assumptions that limit creativity in their approaches to understand and improve culture. Companies are just people. &lt;/p&gt;
&lt;p&gt;I’d always been a bit of a loner, and maybe that’s why when I started working it was endlessly fascinating for me to watch the company with the camera pulled way back as if I was an alien trying to understand the fundamental forces which made the organization work. I observed and mused about how to understand companies from first principals for about a decade until one day I made some unexpected conceptual connections that really pulled back the curtain and helped me understand culture differently. And it’s all thanks to &lt;em&gt;online video games&lt;/em&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="business" scheme="https://CalebFenton.github.io/tags/business/"/>
    
      <category term="culture" scheme="https://CalebFenton.github.io/tags/culture/"/>
    
  </entry>
  
  <entry>
    <title>Dalvik Virtual Execution with SmaliVM</title>
    <link href="https://CalebFenton.github.io/2016/04/30/dalvik-virtual-execution-with-smalivm/"/>
    <id>https://CalebFenton.github.io/2016/04/30/dalvik-virtual-execution-with-smalivm/</id>
    <published>2016-04-30T07:00:00.000Z</published>
    <updated>2016-12-02T03:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>Sometimes it’s useful to know what code does without executing it. You could read the code with your eyeballs and run it with your brain but that takes too long and it’s really hard, and executing code on a real machine can get messy, especially if it’s malicious. But what can you do if you want to understand a lot of malicious code? What if it’s obfuscated and even harder for your brain? Maybe you want to do some fancy analysis so you can accurately know when certain methods are called? Well, for this there’s executing on a <em>virtual</em> machine, i.e. virtual execution. There are many different ways of implementing a virtual machine. You could simulate an entire computer like  VirtualBox and QEMU or you could simulate a smaller subset. The general idea is the same between all types: build a program which simulates executing other programs in all the important ways and gracefully fails for everything else.<br><a id="more"></a></p>
<h1 id="What-is-SmaliVM"><a href="#What-is-SmaliVM" class="headerlink" title="What is SmaliVM?"></a>What is SmaliVM?</h1><p>SmaliVM is a virtual machine which emulates the Dalvik instruction set. It allows you to run Android apps in a limited and controlled way. Unlike the actual Dalvik virtual machine on an Android device, smalivm can execute methods <em>even if it doesn’t know the arguments</em>. You can tell it to execute <code>foo(String s)</code> without giving it <code>s</code>. You might be wondering, “What happens if you have something like <code>if (s == null)</code> Does smalivm explode into little bits?” Ahh, that’s where the fun begins. If a conditional is unknown, smalivm assumes it could be either true or false and takes both execution paths (multiverse!). After smalivm runs a method, it returns an execution graph which has a node for each instruction of every possible execution path. Nodes have parents and children and ancestry is defined by execution order. If a node has multiple children, it’s execution path is not entirely certain. Each node can be inspected to learn the method, class, and virtual machine state at that point of the program.</p>
<h1 id="What’s-the-point"><a href="#What’s-the-point" class="headerlink" title="What’s the point?"></a>What’s the point?</h1><p>I wanted to make a generic deobfuscator. I spent a lot of time squinting at obfuscated malware code. It sucked. So, I made a few specialized deobfuscators; one for each new variant of malware. Any time I solve some problem, I try to generalize the solution. Past experience has taught me this is a badass way fully understand a problem. My first attempt at a general purpose deobfuscator was <a href="https://github.com/CalebFenton/dex-oracle" target="_blank" rel="external">Oracle</a> which I used to analyze a DexGuard protected Obad malware. It looks for patterns in code using regex and tries to simplify them. It gets some extra help by executing certain methods in the analyzed code using reflection on an emulator or device. It works decently and it’s simplicity means it’s easier to add new deobfuscation plugins, but since it uses regex, it’s brittle; one small change in the obfuscator would require modifying a big, mean, ugly regex that would make part of you die if you stared at it for too long.</p>
<p>Without knowing anything about formal program analysis (or Java, #yolo), I started building what I hoped would be the ultimate generic Android deobfuscator: <a href="https://github.com/CalebFenton/simplify" target="_blank" rel="external">Simplify</a>. The goal was to implement some instructions so it could execute code, understand what it does, and replace complex patterns with simplified versions. I figured it would take a few weeks of solid work to start using it to kick malware ass. Turns out, virtual execution isn’t the sort of thing that partially works; it either works perfectly or fails spectacularly. All in all, it took ~21k lines of code from 550 commits over 2.5 years to get to a 1.0 release. Had some help from <a href="https://twitter.com/timstrazz" target="_blank" rel="external">@timstrazz</a> (unit tests!), <a href="https://twitter.com/_jsoo_" target="_blank" rel="external">@_jsoo_</a> (bugs!), <a href="https://twitter.com/OngEmil" target="_blank" rel="external">@OngEmil</a> and <a href="https://twitter.com/crufia" target="_blank" rel="external">@crufia</a> (how to java good). Thanks!</p>
<p>To see some slides for a talk I’ve done on this already, check out: <a href="/2016/04/23/tetcon-2016-android-deobfuscation/">Android Deobfuscation: Tools and Techniques</a></p>
<h1 id="Example-SmaliVM-Usage"><a href="#Example-SmaliVM-Usage" class="headerlink" title="Example SmaliVM Usage"></a>Example SmaliVM Usage</h1><p>I was advised by my <a href="/images/dalvik-virtual-execution-with-smalivm/Salesman-1.png">marketing team</a> that I should include a simple yet impressive example of smalivm usage. This gives you the impression that I’ve neatly boiled down a complex problem into a simple, easy to use interface which will solve all your problems in just a few lines. Here:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String smaliOrDexPath = <span class="string">"classes.dex"</span>;</div><div class="line">VirtualMachineFactory vmFactory = <span class="keyword">new</span> VirtualMachineFactory(); <span class="comment">// this is Java, so factory</span></div><div class="line">VirtualMachine vm = vmFactory.build(smaliOrDexPath);</div><div class="line"></div><div class="line">String methodSignature = <span class="string">"Lorg/cf/example/Main;-&gt;foo(Ljava/lang/String;)V"</span>;</div><div class="line">ExecutionGraph graph = vm.execute(methodSignature);</div></pre></td></tr></table></figure>
<p>The above code will parse the <code>classes.dex</code> file and execute <code>org.cf.example.Main.foo(String s)</code> without defining what the value of <code>s</code> is. This means that the <code>graph</code> may contain multiple execution paths and if any instructions use <code>s</code> the values won’t be known.</p>
<p>To execute with an actual argument, you just spawn a context and setup the method state:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">VirtualMachineFactory vmFactory = <span class="keyword">new</span> VirtualMachineFactory();</div><div class="line">VirtualMachine vm = vmFactory.build(<span class="string">"classes.dex"</span>);</div><div class="line"></div><div class="line">String methodSignature = <span class="string">"Lorg/cf/example/Main;-&gt;foo(Ljava/lang/String;)V"</span>;</div><div class="line">ExecutionContext ectx = vm.spawnRootContext(methodSignature);</div><div class="line">MethodState mState = ectx.getMethodState();</div><div class="line">mState.assignParameter(<span class="number">0</span>, <span class="string">"wubalubadubdub"</span>, <span class="string">"Ljava/lang/String;"</span>);</div><div class="line"></div><div class="line">ExecutionGraph graph = vm.execute(methodSignature, ectx);</div></pre></td></tr></table></figure>
<p>The <code>graph</code> object will contain a whole bunch of stuff you could dig into to figure out exactly what happens at every instruction.</p>
<h1 id="The-Execution-Graph"><a href="#The-Execution-Graph" class="headerlink" title="The Execution Graph"></a>The Execution Graph</h1><p>Executing a method with smalivm returns an execution graph which contains everything that Simplify needs to optimize the code, which is just about everything. Consider the following Smali code:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> dumbMath()I</div><div class="line"><span class="keyword">    .locals</span> 2</div><div class="line"></div><div class="line">   <span class="built_in"> const/4 </span>v0, 0x3</div><div class="line">   <span class="built_in"> const/4 </span>v1, 0x5</div><div class="line">   <span class="built_in"> add-int/2addr </span>v0, v1</div><div class="line"></div><div class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>If you’re unfamiliar with Smali, <em>how did you find this blog and why are you still here?</em>, otherwise you should know <code>dumbMath()I</code> returns 8. Here’s a simplified version of what the execution graph would look like.</p>
<p><img src="/images/dalvik-virtual-execution-with-smalivm/ExecutionGraph-dumbMath.png" alt=""></p>
<p>It’s simple. Each node is an instruction and contains the values for all registers (after the instruction executes). Looking up register values enables most of the optimizations in Simplify.</p>
<p>Nodes are indexed by address, but it’s not part of these graph images to keep them simple.</p>
<p>Now I want to show you what a conditional looks like:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> sometimesReturnTwo(I)I</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line"></div><div class="line">   <span class="built_in"> const/4 </span>v0, 0x1</div><div class="line">   <span class="built_in"> if-eq </span>p0, v0,<span class="keyword"> :end</span></div><div class="line"></div><div class="line">   <span class="built_in"> add-int/2addr </span>v0, v0</div><div class="line"></div><div class="line">   <span class="keyword"> :end</span></div><div class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>If <code>p0</code> equals <code>0x1</code> then it returns <code>v0</code> which is 1. Otherwise, it returns 2. If you execute this method with a set value for <code>p0</code> of <code>0x1</code>, the execution graph will look like:</p>
<p><img src="/images/dalvik-virtual-execution-with-smalivm/ExecutionGraph-loopy.png" alt=""></p>
<p>If you don’t provide any value for <code>p0</code>, it’s unknown and the execution graph is:</p>
<p><img src="/images/dalvik-virtual-execution-with-smalivm/ExecutionGraph-loopy2.png" alt=""></p>
<p>Now you can start to see how graph analysis gets complicated. The <code>if-eq p0, v0, :end</code> node has two children. This means that there is a multiverse; there are multiple execution paths; there’s ambiguity in the behavior of the method. SmaliVM executes both paths. Either the return value is 1 or it’s 2. If a particular address in a graph has multiple nodes in the “node pile” then you can be sure there was either a loop or there was some conditional uncertainty.</p>
<p>You can get the return value of the method with Java code similar to:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">HeapItem item = graph.getTerminatingRegisterConsensus(MethodState.ReturnRegister);</div><div class="line">item.getValue() <span class="comment">// UnknownValue - means there was no consensus</span></div><div class="line">item.getType() <span class="comment">// I - type inferred from method return value</span></div></pre></td></tr></table></figure>
<p>The <code>ExecutionGraph#getTerminatingRegisterConsensus(int register)</code> method will conveniently determine all of the terminating addresses for a method since there may be multiple return statements or exceptions. But you could also use the more generic <code>ExecutionGraph#getRegisterConsensus(int address, int register)</code>.</p>
<h1 id="Unknown-Values"><a href="#Unknown-Values" class="headerlink" title="Unknown Values"></a>Unknown Values</h1><p>Values which aren’t known are represented by an <code>UnknownValue</code> object. For example, if you execute a method without providing arguments, then <code>UnknownValue</code> objects are used as place holders. Other ways you might run into <code>UnknownValue</code>s:</p>
<ul>
<li>return value of blacklisted method, e.g. file and network I/O</li>
<li>return value of method which fails to execute</li>
<li><code>iget</code> instructions - Non-static member value lookups are tricky because smalivm prefers to be correct even if that means having more unknown values. It’s very hard to know if an object’s members are modified in a separate thread.</li>
<li>mutable arguments to a method which can’t be executed - Since smalivm gave up on the method, it can’t be sure they weren’t mutated.</li>
</ul>
<p>All operations are <em>aware</em> of <code>UnknownValue</code>s and most operations that involve them result in a new <code>UnknownValue</code>. Check it:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">x = UnknownValue;</div><div class="line">y = <span class="number">10</span>;</div><div class="line">z = x + y; <span class="comment">// z is unknown!</span></div></pre></td></tr></table></figure>
<h1 id="Loops"><a href="#Loops" class="headerlink" title="Loops"></a>Loops</h1><p>When simulating a language which has loops and where you might not know the value of every variable, you run into the problem of not being able to determine when a loop finishes. Here’s a simple example:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">loopy</span><span class="params">(<span class="keyword">int</span> iterations)</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iterations; i++) &#123;</div><div class="line">        x += x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>If you simulate the above code without knowing what <code>iterations</code> is, you can’t be sure when the <code>for</code> loop condition of <code>i &lt; iterations</code> will be true.</p>
<p>Story time: When I first encountered this problem, I’d already solved several seemingly impossible problems so I figured there was probably some clever way to solve this in general. Maybe I could carefully analyze the conditionals? Maybe I could look for loop invariants, or take into account maximum values, or maybe somehow extrapolate constraints on the range of values a method was likely to receive. I’d been working on it for about two days when a friend walked by, saw me starting at my notebook and asked what I was doing. After I gave a quick explanation of the project and problem he said, without any sarcasm, “Oh, cool! Yeah, that’s the halting problem. Turing proved it was unsolvable, but good luck!” and he walked away.</p>
<p>So I deal with loops the same way everyone else does – with configurable limits! For example, you can set the maximum:</p>
<ol>
<li>number of times to execute a particular instruction</li>
<li>number of times a method can be called</li>
<li>call depth</li>
<li>execution time</li>
</ol>
<p>With these limits in place, if the above code was executed, smalivm would “give up” after several tens of thousands of iterations, correctly assuming it’s impossible to know when it would finish. If <code>loopy</code> was the entry point method, the <code>graph</code> return value would end up as <code>null</code>, since it failed. But if <code>loopy</code> was called as part of the flow of some other method, it would return an unknown value to the calling method and any operations that interacted with that value would then also be marked unknown.</p>
<h1 id="Side-Effects"><a href="#Side-Effects" class="headerlink" title="Side Effects"></a>Side Effects</h1><p>A method is said to have side effects if it affects the state of something outside the method. This could be anything from network or file IO, calling an unsafe method (i.e. probably does some I/O), changes class or object state, etc. and smalivm keeps track of the side effects of each instruction.</p>
<p>SmaliVM has three categories of side effects:</p>
<ol>
<li>none - reflected, emulated, or whitelisted methods and safe ops, e.g. const/4</li>
<li>weak - not white listed, used when there <em>may</em> be a side effect</li>
<li>strong - changes something like a class or object member</li>
</ol>
<p>Simplify uses side effect strength to know if it’s OK to remove code. If method A calls method B, and B just does some math and returns the result, then it may be possible to simply inline the return value of B inside of A and avoid calling B all together. To understand inlining, consider this code:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">A() &#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</div><div class="line">    <span class="keyword">int</span> y = B(x);</div><div class="line">&#125;</div><div class="line"></div><div class="line">B(<span class="keyword">int</span> x) &#123;</div><div class="line">    <span class="keyword">return</span> x ** x;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Since <code>B()</code> does jack all except some math and has no side effects, it can be inlined:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">A() &#123;</div><div class="line">    <span class="keyword">int</span> x = <span class="number">5</span>;</div><div class="line">    <span class="keyword">int</span> y = <span class="number">25</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>On the smali level, the <code>invoke</code> instruction is replaced with a <code>const*</code> instruction. However, if a method calls another method which writes to the file system, well then it can’t be removed because Simplify can’t be sure removing that method won’t alter the behavior of the program. This’ll be explained a lot more in future posts about how Simplify works.</p>
<h1 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h1><p>Exception is handling adds all kinds of complexity. If someone ever tells you they wrote a program which emulates Java or Dalvik code and you want to be a dick, smugly ask them how they handle exceptions. Also, ask them how the handle multi-threadding, but that’s for another post.</p>
<p>You have to build each instruction so it knows when to throw an exception and how to make it look real. Then, as you’re walking along the instructions executing stuff, you have to be aware of where to jump if you hit an exception, e.g. <code>try / catch</code> blocks. The real kicker is that exceptions have to bubble up the call stack. If you call method A which calls method B which calls method C which throws an exception, the ultimate handler for that exception might be method A.</p>
<p>As of now, exception handling is mostly working and if there’s some major bugs it should be possible to fix without major re-designs. Fingers crossed, yo.</p>
<p>Also, if an instruction is executed with unknown values, it’s assumed the instruction throws an exception. This can cause a lot of ambiguity in the execution paths, but it’s the only way to really ensure correctness.</p>
<h1 id="Deobfuscation"><a href="#Deobfuscation" class="headerlink" title="Deobfuscation"></a>Deobfuscation</h1><p>This post is already really long, but I wanted to show you an example of the obfuscation that originally motivated smalivm:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBadStuff</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">int</span> x;</div><div class="line">    <span class="keyword">int</span> y;</div><div class="line">    x = Integer.valueOf(<span class="string">"5"</span>)</div><div class="line">    y = Integer.valueOf(<span class="string">"10"</span>)</div><div class="line">    x = x * y;</div><div class="line">    x += <span class="number">5</span>;</div><div class="line">    x /= <span class="number">3</span>;</div><div class="line">    hackYourPhoneLOL(<span class="string">"backdoor"</span>);</div><div class="line">    x = y;</div><div class="line">    y = x + <span class="number">10</span>;</div><div class="line">    y /= <span class="number">2</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>This is a semi-realistic example of a type of obfuscation called “arithmetic white noise” because it’s just a bunch of bullshit math operations that don’t actually affect the state of the app outside the method. In other words, it has no side effects. The math stuff doesn’t affect the return value of the method since there isn’t one, and it doesn’t affect the <code>hackYourPhoneLOL()</code> method. Just looking at the code, you can figure out you could just rewrite much simpler and not affect the semantics (behavior, what it does):</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doBadStuff</span><span class="params">()</span> </span>&#123;</div><div class="line">    hackYourPhoneLOL(<span class="string">"backdoor"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>I’ll be diving deeper into this in later posts.</p>
<h1 id="Hooking-Methods"><a href="#Hooking-Methods" class="headerlink" title="Hooking Methods"></a>Hooking Methods</h1><p>Hooking methods is pretty easy. You just need to make a class which implements <code>MethodStateMethod</code> if it only needs access to local method state or <code>ExecutionContextMethod</code> if it needs access to the entire virtual machine state. Here is hook for <code>System.out.println()</code> :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">java_io_PrintStream_println</span> <span class="keyword">implements</span> <span class="title">MethodStateMethod</span>, <span class="title">UnknownValuesMethod</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(VirtualMachine vm, MethodState mState)</span> </span>&#123;</div><div class="line">        <span class="comment">// Virtual method, register 0 is System.out (or something else)</span></div><div class="line">        HeapItem item = mState.peekParameter(<span class="number">1</span>);</div><div class="line">        Object value = item.getValue();</div><div class="line">        String valueStr = (String) value;</div><div class="line"></div><div class="line">        <span class="comment">// Actually print out any println's executed.</span></div><div class="line">        System.out.println(valueStr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> SideEffect.<span class="function">Level <span class="title">getSideEffectLevel</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">// Do not optimize this away.</span></div><div class="line">        <span class="keyword">return</span> SideEffect.Level.STRONG;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Set&lt;VirtualException&gt; <span class="title">getExceptions</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HashSet&lt;VirtualException&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>And here’s how to configure the hook:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">String hookSignature = <span class="string">"Ljava/io/PrintStream;-&gt;println(Ljava/lang/String;)V"</span>;</div><div class="line">MethodEmulator.addMethod(hookSignature, java_io_PrintStream_println.class);</div><div class="line"></div><div class="line"><span class="comment">// Build and execute VM</span></div></pre></td></tr></table></figure>
<h1 id="Optimizations"><a href="#Optimizations" class="headerlink" title="Optimizations"></a>Optimizations</h1><p>The code isn’t really optimized right now because I’ve favored working on correctness. But there are a few optimizations that are important for understanding how smalivm works.</p>
<h2 id="Sparse-Contexts"><a href="#Sparse-Contexts" class="headerlink" title="Sparse Contexts"></a>Sparse Contexts</h2><p>As you’ve seen in the execution graph section, nodes have parent / child relationships. Rather than store all of the values for every register in every node, only changes are stored. This saves a ton of space, but if you want to know the value of a particular register at some node, you may have to dig through its parents, grandparents (ancestors) until you find a node which has it. This is a memory / time trade off. It accounts for a lot of processing time, but without it, graphs would blow out the heap constantly.</p>
<h2 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h2><p>Any time smalivm needs to execute a method which is part of the Java API and is safe to execute, it’ll use Java reflection to execute it. For a method to be safe, it can’t have any side effects and basically can’t be used to a clever malicious person to own your system. For example, smalivm will reflect <code>Integer.valueOf()</code>, all <code>String</code> and <code>StringBuilder</code> methods, and some others. This is useful for two reasons:</p>
<ol>
<li>it’s way faster</li>
<li>Java API code has fewer bugs than mine</li>
</ol>
<h2 id="Dynamic-Class-Generation"><a href="#Dynamic-Class-Generation" class="headerlink" title="Dynamic Class Generation"></a>Dynamic Class Generation</h2><p>For all input classes, smalivm will try to build a realistic looking Java <code>Class</code> object for that class. It should have all the same methods, fields, access flags, etc. Whenever smalivm executes code that gets a <code>Class</code> object for an input class, it provides the dynamically generated <code>Class</code> object. This allows smalivm to reflect Java API methods which take classes defined <em>by the input Smali or DEX</em>.</p>
<h1 id="Other-Emulators"><a href="#Other-Emulators" class="headerlink" title="Other Emulators"></a>Other Emulators</h1><p>The main related emulator I’m aware of is <a href="http://www.unicorn-engine.org/" target="_blank" rel="external">Unicorn</a> which is super cool and you should check it out. It does a lot more than smalivm, but it’s based on QEMU so it supports lots of different architectures but not the DalvikVM or JavaVM.</p>
<h1 id="Future-Ideas"><a href="#Future-Ideas" class="headerlink" title="Future Ideas"></a>Future Ideas</h1><p>I have some ideas that I think would be cool but I haven’t had much time to implement them.</p>
<h2 id="Interactive-Debugger"><a href="#Interactive-Debugger" class="headerlink" title="Interactive Debugger"></a>Interactive Debugger</h2><p>I’ve used smalivm to debug Android apps, but it required me knowing a lot about how the code works and setting lots of break points in my IDE. It should be possible to generalize some of smalivm’s functionality and wrap it up in a nice little debugging UI. One would be able to inspect or modify values, step through the code instruction by instruction, or set break points, watch registers, dynamically hook methods, set return values for methods, and so much more. Since smalivm only has one project that uses it right now, adding another would really help smooth the edges and clean up the cobwebs around the code base, and would really make the library more generalized and easier to use.</p>
<h2 id="Android-Component-Lifecycle-Awareness"><a href="#Android-Component-Lifecycle-Awareness" class="headerlink" title="Android Component Lifecycle Awareness"></a>Android Component Lifecycle Awareness</h2><p>Right now smalivm executes methods in a somewhat random order which is easy but it has a lot of downsides. The main drawback is that instance variables are difficult to know. Consider an Android activity that sets up some instance variables in the <code>onCreate()</code> method. Later, they’re accessed in <code>someHelperMethod()</code>. Since smalivm may execute <code>someHelperMethod()</code> first, it never gets the instance variables setup properly. For this and a few other reasons, smalivm doesn’t track instance variables at all.</p>
<p>If smalivm was smart enough to know that any time it executes a method for an activity, it should first execute other methods which would ordinarily be executed firsts, e.g. <code>onCreate()</code>, <code>attachBaseContext()</code>, etc., then it would be possible to much more reliably determine instance variable values.</p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>Thanks for getting this far, even if you skipped to the end without reading anything. I hope you found it interesting and you give smalivm and Simplify a look. Maybe you can make use of it. If you do, holla.</p>
<p>Stay tuned for future posts which will explain how Simplify uses smalivm to deobfuscate.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Sometimes it’s useful to know what code does without executing it. You could read the code with your eyeballs and run it with your brain but that takes too long and it’s really hard, and executing code on a real machine can get messy, especially if it’s malicious. But what can you do if you want to understand a lot of malicious code? What if it’s obfuscated and even harder for your brain? Maybe you want to do some fancy analysis so you can accurately know when certain methods are called? Well, for this there’s executing on a &lt;em&gt;virtual&lt;/em&gt; machine, i.e. virtual execution. There are many different ways of implementing a virtual machine. You could simulate an entire computer like  VirtualBox and QEMU or you could simulate a smaller subset. The general idea is the same between all types: build a program which simulates executing other programs in all the important ways and gracefully fails for everything else.&lt;br&gt;
    
    </summary>
    
    
      <category term="deobfuscation" scheme="https://CalebFenton.github.io/tags/deobfuscation/"/>
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="smalivm" scheme="https://CalebFenton.github.io/tags/smalivm/"/>
    
      <category term="smali" scheme="https://CalebFenton.github.io/tags/smali/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
      <category term="simplify" scheme="https://CalebFenton.github.io/tags/simplify/"/>
    
  </entry>
  
  <entry>
    <title>Why Most Vulnerabilities Are Never Disclosed</title>
    <link href="https://CalebFenton.github.io/2016/04/29/why-most-vulnerabilities-are-never-disclosed/"/>
    <id>https://CalebFenton.github.io/2016/04/29/why-most-vulnerabilities-are-never-disclosed/</id>
    <published>2016-04-29T07:00:00.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>When it comes to writing software, humans are the best game in town. Unfortunately, we’re absolutely <em>terrible</em> at it. Of course, we’re good at other stuff – recognizing faces, tool use, gossiping, and bi-pedal locomotion, but it turns out our brains are not so good at giving a computer the thousands of tiny, precise instructions necessary to <a href="http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html" target="_blank" rel="external">validate an email address</a> or <a href="http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/" target="_blank" rel="external">properly deal with names</a>. That fact we get anything to work at all is amazing</p>
<p>The bottom line is that if developers are writing code, they’re writing bugs and some bugs are vulnerabilities. Some are found and responsibly disclosed while others are kept secret or <a href="http://0day.today/" target="_blank" rel="external">sold</a>. For reasons which I shall explain, I believe that <em>most</em> security vulnerabilities are fixed but <em>never disclosed</em>.</p>
<a id="more"></a>
<h2 id="Why-does-disclosure-matter"><a href="#Why-does-disclosure-matter" class="headerlink" title="Why does disclosure matter?"></a>Why does disclosure matter?</h2><p>It all has to do with getting people and businesses to update. The cost of updating a library can be <a href="/2016/04/22/reversing-an-open-source-vulnerability">quite high</a>, especially at larger organizations. It’s not a good value to update if only to get a few more features and a few less bugs but getting <em>owned</em> <a href="https://www.privacyandsecuritymatters.com/2015/02/target-data-breach-price-tag-252-million-and-counting/" target="_blank" rel="external">is</a> <a href="http://www.networkworld.com/article/2879814/data-center/sony-hack-cost-15-million-but-earnings-unaffected.html" target="_blank" rel="external">expensive</a> and it makes perfect sense to update if it means not getting owned.</p>
<p>If most vulnerabilities are never disclosed, businesses may neglect to update vulnerable code. Attackers could exploit this by searching for fixed but undisclosed vulnerabilities.</p>
<h2 id="Why-aren’t-vulnerabilities-disclosed"><a href="#Why-aren’t-vulnerabilities-disclosed" class="headerlink" title="Why aren’t vulnerabilities disclosed?"></a>Why aren’t vulnerabilities disclosed?</h2><p>There are several forces at play which might cause a vulnerability to slip through the cracks.</p>
<h3 id="Overlooked-Bug"><a href="#Overlooked-Bug" class="headerlink" title="Overlooked Bug"></a>Overlooked Bug</h3><p>The most obvious possibility is that the security implications of a bug weren’t obvious when the developer fixed it. I have no idea of knowing how common this is relative to the other reasons but it has to happen. Developers can’t be expected to do a full security audit for every bug they fix. Even if there was some review system in place, figuring out how to exploit a bug is <em>highly non-trivial</em>, especially for a large or complex app.</p>
<h3 id="Lack-of-Awareness"><a href="#Lack-of-Awareness" class="headerlink" title="Lack of Awareness"></a>Lack of Awareness</h3><p>A developer may not be aware of how important it is to disclose every vulnerability. It’s not immediately obvious why it’s important, especially if you’re an inexperienced developer. I believe this is the most common reason for undisclosed vulnerability fixes. In my experience, this is most common in trendy, new projects, i.e.  NPM modules and Ruby gems. Mature projects run by established, organized development communities are more likely to already be familiar with the importance of disclosure. For example, Apache has a pretty good track record of disclosing any vulnerabilities with public advisories any time there’s a release which includes a security fix.</p>
<h3 id="Lack-of-Resources"><a href="#Lack-of-Resources" class="headerlink" title="Lack of Resources"></a>Lack of Resources</h3><p>Even if a developer understands the importance of disclosure, they may not have time or desire to jump through all the hoops to do a proper disclosure. Instead, maybe they just mention that they fixed some security issues in their change logs.</p>
<p>A proper disclosure would include requesting a Common Vulnerability and Exposure ID (CVE-ID) or by announcing the issue to a language or framework specific advisory such as <a href="https://github.com/rubysec/ruby-advisory-db" target="_blank" rel="external">Ruby Advisories</a> or <a href="https://nodesecurity.io/advisories" target="_blank" rel="external">Node Security Advisories</a>. Announcing to any of these channels would help to quickly spread the word about a vulnerability, but it requires doing a lot more than writing and committing code and if a developer is maintaining a project in their spare time, they might not be keen to do all this extra work.</p>
<p>There has been some frustration recently with the CVE system due to researchers being denied CVE-IDs for certain types of issues or because CVE-ID requests were never responded to. More info: <a href="https://cve.mitre.org/data/board/archives/2016-03/msg00002.html" target="_blank" rel="external">Concerns about CVE coverage shrinking</a> and <a href="https://www.nowsecure.com/blog/2015/09/16/ruminations-on-app-cves/" target="_blank" rel="external">Ruminations on App CVEs</a>.</p>
<h3 id="Lack-of-Humility"><a href="#Lack-of-Humility" class="headerlink" title="Lack of Humility"></a>Lack of Humility</h3><p>Imagine that you spend a lot of time on a side project and enjoy the admiration and respect of your peers. Then one day you find you’ve made a mistake and didn’t notice a vulnerability in your code. Maybe it was a big, dumb mistake, too, and now everyone might be getting owned because of your stupid mistake. It takes a special kind of someone to get over that and admit it openly; it takes humility and bravery. If it’s a group of developers, the community needs to be healthy and understanding.</p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>I believe this is an important issue for developers and businesses to understand, but I don’t think the sky is falling. Companies are increasingly using open source code and this is a security issue people should be thinking about.</p>
<p>We’re working on tools that help us collect and identify commits to open source projects which fix undisclosed vulnerabilities. We’ll be able to use this information to better protect our users. Initial tests turned up a few dozen vulnerabilities before I had to work on something else. The idea seems sound. I can’t mention any specific details right now, but we’ll be publishing the results and specific details soon.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;When it comes to writing software, humans are the best game in town. Unfortunately, we’re absolutely &lt;em&gt;terrible&lt;/em&gt; at it. Of course, we’re good at other stuff – recognizing faces, tool use, gossiping, and bi-pedal locomotion, but it turns out our brains are not so good at giving a computer the thousands of tiny, precise instructions necessary to &lt;a href=&quot;http://www.ex-parrot.com/~pdw/Mail-RFC822-Address.html&quot;&gt;validate an email address&lt;/a&gt; or &lt;a href=&quot;http://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/&quot;&gt;properly deal with names&lt;/a&gt;. That fact we get anything to work at all is amazing&lt;/p&gt;
&lt;p&gt;The bottom line is that if developers are writing code, they’re writing bugs and some bugs are vulnerabilities. Some are found and responsibly disclosed while others are kept secret or &lt;a href=&quot;http://0day.today/&quot;&gt;sold&lt;/a&gt;. For reasons which I shall explain, I believe that &lt;em&gt;most&lt;/em&gt; security vulnerabilities are fixed but &lt;em&gt;never disclosed&lt;/em&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="security" scheme="https://CalebFenton.github.io/tags/security/"/>
    
      <category term="open source" scheme="https://CalebFenton.github.io/tags/open-source/"/>
    
  </entry>
  
  <entry>
    <title>Code Kata: Bloom Filter</title>
    <link href="https://CalebFenton.github.io/2016/04/26/code-kata-bloom-filter/"/>
    <id>https://CalebFenton.github.io/2016/04/26/code-kata-bloom-filter/</id>
    <published>2016-04-27T02:11:11.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>If you’re unfamiliar with what a Code Kata is, check out my previous post <a href="/2016/04/23/code-kata-tdd-and-run-length-encoding/">Code Kata: TDD and Run-length Encoding</a></p>
<p>The goal for this kata is to learn an unfamiliar data structure. It’s called a bloom filter. I’ve read the Wikipedia article and have used them, but until I’ve made it myself I don’t understand it deeply. The more fundamental my understanding, the more flexible I can be in applying a concept. It’s just like calculus. There’s a world of difference between merely memorizing a formula and having a deep, intuitive understanding.<br><a id="more"></a></p>
<h1 id="What-is-a-bloom-filter"><a href="#What-is-a-bloom-filter" class="headerlink" title="What is a bloom filter?"></a>What is a bloom filter?</h1><p>A bloom filter has two methods:</p>
<ol>
<li><code>add</code> - adds an element</li>
<li><code>check</code> / <code>include</code> - false if an element is <em>definately not</em> in the filter, true if it <em>possibly</em> is</li>
</ol>
<p>This is a <em>probabilistic</em> data structure. It can say if an element is <em>definately not</em> in the set (no false negative), but it may say an element is in the set which isn’t (false positive). The trade off for this uncertainty is that even for large sets the bloom filter is relatively much smaller and faster than storing looking up in a complete set.</p>
<p>I’m going to assume you’re familiar with the technical aspects of the bloom filter. Others have already done a great job of explaining how they work.</p>
<ul>
<li>Easy to read description: <a href="http://billlaboon.com/probabilistic-data-structures-part-i-bloom-filters/" target="_blank" rel="external">http://billlaboon.com/probabilistic-data-structures-part-i-bloom-filters/</a></li>
<li>Description plus a cool interactive visual aid: <a href="https://www.jasondavies.com/bloomfilter/" target="_blank" rel="external">https://www.jasondavies.com/bloomfilter/</a></li>
</ul>
<h1 id="When-to-use-a-bloom-filter"><a href="#When-to-use-a-bloom-filter" class="headerlink" title="When to use a bloom filter?"></a>When to use a bloom filter?</h1><p>It’s usefulness is not as obvious as an <code>Array</code> or <code>Hash</code>, but there are situations where expensive I/O operations can be skipped for elements definitely not in the filter, and only done if an element may be in the present.</p>
<p>Example time. Let’s say you’re analyzing Android applications and want to know which strings are unique to a given app. This is important for automated signature generation for malware detection. You must use strings <em>endemic</em> to a particular sample so the signature won’t false positive. Let’s also assume you already have a few million Android apps and their strings. The simple approach is to extract and store strings and their frequencies. The distribution of string frequencies has a long tail. Some strings are in almost every app, but most are only in a small number of apps. Also, most of the strings for any given app are in almost every app. When analyzing an application, each string frequency is looked up to see if it’s under some threshold. These lookups are expensive.</p>
<p>To improve on this, you create a bloom filter and add the common strings. Now, instead of checking the frequency of every string with an expensive table lookup, you check the bloom filter <em>first</em>. Most lookups are thus eliminated. The trade off is some genuinely uncommon strings are considered as common. In this situation, for this scenario, that’s fine. If there’s difficulty finding enough unique strings, you can skip the bloom filter and lookup each string. This won’t happen often so it’s an acceptable cost.</p>
<p>More example uses for bloom filters:</p>
<ul>
<li><a href="https://www.quora.com/What-are-the-best-applications-of-Bloom-filters" target="_blank" rel="external">https://www.quora.com/What-are-the-best-applications-of-Bloom-filters</a></li>
<li><a href="https://stackoverflow.com/questions/4282375/what-is-the-advantage-to-using-bloom-filters" target="_blank" rel="external">https://stackoverflow.com/questions/4282375/what-is-the-advantage-to-using-bloom-filters</a></li>
</ul>
<h1 id="Kata-Bloom-Filter"><a href="#Kata-Bloom-Filter" class="headerlink" title="Kata: Bloom Filter"></a>Kata: Bloom Filter</h1><h2 id="Day-1"><a href="#Day-1" class="headerlink" title="Day 1"></a>Day 1</h2><p>I’m only giving myself 30 minutes, so I’m going to keep it basic. First, I’ll setup a Ruby project with RSpec. I’ve covered how to do this in my last kata, here: <a href="https://blog.srcclr.com/code-kata-tdd-run-length-encoding/" target="_blank" rel="external">https://blog.srcclr.com/code-kata-tdd-run-length-encoding/</a></p>
<p>Normally, I’d start with tests, but as I found in my last kata, strict TDD of algorithms is hard. I’d rather prototype the algorithm then hit it with tests. If it were just engineering code, I’d consider testing first.</p>
<p>I start by quickly reviewing a few articles on how they work. That takes a few minutes. All I really need is an array, preferably a bitset, and some hashing methods. I don’t want to spend time worrying about efficient storage, and I don’t want to pull in any libraries until I get it to work. I’ll just use a plain array. I pick 100 elements as a starting size because it’s close to some numbers I’ve seen while reading about it.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">BloomFilter</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">initialize</span><span class="params">(size = <span class="number">100</span>)</span></span></div><div class="line">        @bitset = Array.new(size, <span class="number">0</span>)</div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Now, I need some hashing methods. The only important property of the hash functions is that they are evenly distributed. A quick review of the String reveals <code>String#hash</code> which looks idea, and <code>String#sum</code> which looks less ideal. I figure it’s good enough for now. Perfect is the enemy of good.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(s)</span></span></div><div class="line">    hash(s).each &#123; <span class="params">|h|</span> @bitset[h] = <span class="number">1</span> &#125;</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash</span><span class="params">(s)</span></span></div><div class="line">    h1 = s.hash % @bitset.size</div><div class="line">    h2 = s.sum % @bitset.size</div><div class="line">    [h1, h2]</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>To wrap it up, add a method to check if an element is possibly in the filter:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">include?</span><span class="params">(s)</span></span></div><div class="line">    hash(s).each &#123; <span class="params">|h|</span> <span class="keyword">return</span> <span class="literal">false</span> <span class="keyword">unless</span> @bitset[h] == <span class="number">1</span> &#125;</div><div class="line">    <span class="literal">true</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>With only a few minutes left, I wrote a little benchmarking code to make sure it all worked:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Add lots of random strings</span></div><div class="line">length = <span class="number">10</span></div><div class="line">strings = []</div><div class="line"><span class="number">100</span>.times &#123; strings &lt;&lt; rand(<span class="number">36</span> ** length).to_s(<span class="number">36</span>) &#125;</div><div class="line"></div><div class="line">b = BloomFilter.new</div><div class="line">strings.each &#123; <span class="params">|s|</span> b.add s &#125;</div><div class="line"></div><div class="line"><span class="comment"># Make sure they're all possibly included</span></div><div class="line">strings.each &#123; <span class="params">|s|</span> puts <span class="string">"<span class="subst">#&#123;s&#125;</span> should be included but isn't"</span> <span class="keyword">unless</span> b.<span class="keyword">include</span>? s &#125;</div><div class="line"></div><div class="line"><span class="comment"># Rough check of false positives</span></div><div class="line">other_strings = []</div><div class="line"><span class="number">100</span>.times <span class="keyword">do</span></div><div class="line">    string = rand(<span class="number">36</span> ** (<span class="number">1</span> + rand(<span class="number">100</span>))).to_s(<span class="number">36</span>)</div><div class="line">    <span class="keyword">next</span> <span class="keyword">if</span> strings.<span class="keyword">include</span>? string</div><div class="line">    other_strings &lt;&lt; string</div><div class="line"><span class="keyword">end</span></div><div class="line"></div><div class="line">fps = <span class="number">0</span>.<span class="number">0</span></div><div class="line">other_strings.each &#123; <span class="params">|s|</span> fps += <span class="number">1.0</span> <span class="keyword">if</span> b.<span class="keyword">include</span>? s &#125;</div><div class="line">puts <span class="string">"False positive %: <span class="subst">#&#123;<span class="number">100</span> * (fps / other_strings.size)&#125;</span>"</span></div></pre></td></tr></table></figure>
<h2 id="Day-2"><a href="#Day-2" class="headerlink" title="Day 2"></a>Day 2</h2><p>I read a bit more about bloom filters. I learn there are a few tunable parameters, and some advanced implementations that allow for removal of elements. The advanced stuff looks way out of the scope of a 30 minute session. I’m thinking that a 30 minute kata isn’t a good way to learn anything complicated. You’d need a few solid hours of uninterrupted study to digest anything heavy. For my goal of deepening my understanding of bloom filters, it’s enough. There are two main tunable aspects of the bloom filter:</p>
<ol>
<li>Size of the array, usually <em>m</em>. ~16 bits per element regardless of element size to give 0.1% error rate.</li>
<li>Number of hashing methods, usually <em>k</em>. Three seems common.</li>
</ol>
<p>I wanted to add some tests with randomly generated data. For example, generate 1,000 strings, add them all to a filter, and make sure they’re all possibly present. Then, generate 1,000 strings not in the original set and make sure none of them are present. I feel like that’s not a good unit test, because you’d have to <code>add</code> and <code>include?</code> in the same test. I spent a lot of time trying to learn the relevant RSpec syntax to make it work.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'bloom_filter'</span></div><div class="line"></div><div class="line">describe BloomFilter <span class="keyword">do</span></div><div class="line">    let(<span class="string">'bf'</span>) &#123; BloomFilter.new &#125;</div><div class="line"></div><div class="line">    describe <span class="string">'#include?'</span> <span class="keyword">do</span></div><div class="line">        it <span class="string">'should include strings once added'</span> <span class="keyword">do</span></div><div class="line">            strings = []</div><div class="line">            <span class="number">100</span>.times &#123; strings &lt;&lt; rand(<span class="number">36</span> ** (<span class="number">1</span> + rand(<span class="number">100</span>))).to_s(<span class="number">36</span>) &#125;</div><div class="line">            strings.each &#123; <span class="params">|s|</span> bf.add s &#125;</div><div class="line">            strings.each &#123; <span class="params">|s|</span> expect(bf.<span class="keyword">include</span>?(s)).to be <span class="literal">true</span> &#125;</div><div class="line">        <span class="keyword">end</span></div><div class="line"></div><div class="line">        it <span class="string">'should not include strings that are not added'</span> <span class="keyword">do</span></div><div class="line">            strings = []</div><div class="line">            <span class="number">100</span>.times &#123; strings &lt;&lt; rand(<span class="number">36</span> ** (<span class="number">1</span> + rand(<span class="number">100</span>))).to_s(<span class="number">36</span>) &#125;</div><div class="line">            strings.each &#123; <span class="params">|s|</span> expect(bf.<span class="keyword">include</span>?(s)).to be <span class="literal">false</span> &#125;</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>I also moved the benchmark code out of the <code>BloomFilter</code> class file and into it’s own file.</p>
<h2 id="Day-3"><a href="#Day-3" class="headerlink" title="Day 3"></a>Day 3</h2><p>Rewrote everything. Such practice. Much fast.</p>
<h2 id="Day-4"><a href="#Day-4" class="headerlink" title="Day 4"></a>Day 4</h2><p>Rewrote everything. Added an alias for <code>#&lt;&lt;</code> so addition can be like <code>Array#&lt;&lt;</code>. Renamed <code>include?</code> to <code>test</code> because it’s more honest, and shorter than <code>may_include?</code>.</p>
<h2 id="Day-5"><a href="#Day-5" class="headerlink" title="Day 5"></a>Day 5</h2><p>Optimization time. I updated the benchmarking code and saw that I wasn’t getting the false positive rate as low as I wanted. I suspected it was my hash functions. I replaced <code>String#sum</code> with two over-kill cryptographic digests <code>MD5</code> and <code>SHA1</code>. I could have gotten away with something simpler, like <code>CRC32</code> or <code>ADLER</code>, but I had no internet and this is all I could divine by grepping through the Ruby installation.</p>
<p>The effect was good though. It brought the error rate down an order of magnitude.</p>
<h1 id="Final-Thoughts"><a href="#Final-Thoughts" class="headerlink" title="Final Thoughts"></a>Final Thoughts</h1><p>I feel like I understand the bloom filter now. This includes a deeper appreciation for how much I don’t yet understand of advanced implementations of bloom filters. The simple, mindful practice of carefully writing Ruby was useful. Each time I rewrote it, it came faster and more easily and little optimizations were more apparent.</p>
<p>The full project can be viewed here:<br><a href="https://github.com/CalebFenton/code_kata/tree/master/bloom_filter" target="_blank" rel="external">https://github.com/CalebFenton/code_kata/tree/master/bloom_filter</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;If you’re unfamiliar with what a Code Kata is, check out my previous post &lt;a href=&quot;/2016/04/23/code-kata-tdd-and-run-length-encoding/&quot;&gt;Code Kata: TDD and Run-length Encoding&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The goal for this kata is to learn an unfamiliar data structure. It’s called a bloom filter. I’ve read the Wikipedia article and have used them, but until I’ve made it myself I don’t understand it deeply. The more fundamental my understanding, the more flexible I can be in applying a concept. It’s just like calculus. There’s a world of difference between merely memorizing a formula and having a deep, intuitive understanding.&lt;br&gt;
    
    </summary>
    
    
      <category term="code-kata" scheme="https://CalebFenton.github.io/tags/code-kata/"/>
    
      <category term="algorithm" scheme="https://CalebFenton.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Reversing an Open Source Vulnerability</title>
    <link href="https://CalebFenton.github.io/2016/04/24/reversing-an-open-source-vulnerability/"/>
    <id>https://CalebFenton.github.io/2016/04/24/reversing-an-open-source-vulnerability/</id>
    <published>2016-04-24T07:00:00.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Vulnerability disclosures rarely include enough technical detail to reproduce the exploit. This is a <em>good</em> thing. It wouldn’t do to arm every script kiddie with exact details of how to write an exploit with every disclosure. However, there are times when someone like an application security engineer or security researcher need to “reverse engineer” the disclosure to reconstruct the technical detail in order to fully understand the vulnerability or write an exploit to test systems for weakness.<br><a id="more"></a></p>
<h1 id="Why-is-this-useful"><a href="#Why-is-this-useful" class="headerlink" title="Why is this useful?"></a>Why is this useful?</h1><p>When a vulnerability is found in an open source project, it’s often in a library. A vulnerability in a library could potentially affect <em>many</em> applications, but it’s notoriously difficult to tell if an application is actually vulnerable just by using the vulnerable library. The application may not actually use any of the vulnerable code or be configured in such a way as to be vulnerable. Of course, this itself might not be obvious because the vulnerability disclosure may not fully explain these details, or it may even be wrong and say that a library is vulnerable when the vulnerable code is in a dependency of the library! A company may be hesitant to upgrade a vulnerable library because of the cost, especially at large companies which have a lot of procedures in place around code changes. We’ve had customers tell us:</p>
<blockquote>
<p>“You tell us we have this vulnerability, but we looked into it and aren’t using any of the vulnerable code, plus it would cost a million dollars to upgrade.” - Random J. Customer</p>
</blockquote>
<p>This really surprised me when I first heard it, but it made sense after I remembered the time I tried to upgrade a gem in a large Rails project with lots of dependencies. Let me tell you, that is a path which leads quickly to <a href="https://en.wikipedia.org/wiki/Dependency_hell" target="_blank" rel="external">Dependency hell</a>.</p>
<p>The cost of upgrading is only worth it if the system is <em>actually</em> vulnerable, and the fastest, most direct way to test if a system is vulnerable is to <em>hit it with the actual exploit</em>. This type of test exploit is usually called a <strong>PoC</strong> (proof of concept). To make a PoC, you really have to understand the nitty-gritty details of the vulnerability. And if a PoC isn’t possible, understanding the vulnerability will help you determine if an application is truly vulnerable.</p>
<p>Of course, there are also secondary advantages such as education for engineers and security researchers. Understanding the vulnerability can help a developer avoid making the same mistakes. Researchers can use the knowledge to search for and discover (and responsibly disclose) similar vulnerabilities.</p>
<h1 id="How-it’s-Done"><a href="#How-it’s-Done" class="headerlink" title="How it’s Done"></a>How it’s Done</h1><p>There are three main challenges to reversing a vulnerability:</p>
<ol>
<li>Find the fix</li>
<li>Understand the fix</li>
<li>Create a PoC</li>
</ol>
<h2 id="Finding-the-Fix"><a href="#Finding-the-Fix" class="headerlink" title="Finding the Fix"></a>Finding the Fix</h2><p>This is the most important and complex of all three steps. Sometimes it’s easy, and the public disclosure links right to the commit hash, and sometimes it’s hard because you spend hours digging through a repository’s commit messages only to find a commit with the message “update pom.xml” that does indeed update the pom file but also sneaks in the actual fix (true story). Some open source groups such as Apache are quite good at linking their vulnerability disclosures to fix commit or at least a link to an issue tracker like JIRA with more details and usually links back to commits. On the other hand, some open source communities go out of their way to hide the fix because they believe it would help the bad guys.</p>
<p>While it’s true that the fix <em>would</em> allow attackers to more easily understand the details of the exploit, I personally believe that any attacker sophisticated and motivated enough to analyze the source code to extrapolate a weaponized exploit is going to find the fix <em>with or without</em> help. Making the fix obvious makes a lot of legitimate endeavors easier, such as allowing package maintainers to back-port fixes to older, unmaintained versions and, of course, all the reasons I mentioned at the beginning of the post.</p>
<p>The first place to look for the fix is the disclosure. Read it carefully and understand it. Try and read the documentation about any features it mentions. This context will help you find and understand the fix commit, which is necessary to make the PoC. The disclosure will likely have some good keywords for searching if the exact fix commit or relevant issue tracker IDs aren’t referenced.</p>
<p>Let’s assume there is a disclosure which has very little information and you must start searching for the fix yourself. One critical piece of information should already be obvious: the fixed version. You at least know one of the commits in version has the fix. Unfortunately, there may be several hundred commits and each one is changing all kinds of stuff and you have no idea what’s going on in the code base. You need to filter down the commits to look through. First, read the disclosure, and keep this stuff in mind:</p>
<ul>
<li>Is the fix in code or configuration?</li>
<li>Are any classes specifically named?</li>
<li>Are any features specifically named?</li>
<li>Is there a mantainer’s name associated with the advisory? Maybe they did the fix also.<br>Sometimes there is only one or two committers who fix security bugs.</li>
<li>The fix happened <em>before</em> the public disclosure. Any commit after the advisory won’t contain the fix.</li>
<li>If the fixed version is a hot fix release (e.g. 1.2.3 -&gt; 1.2.3.1), there are probably only a few changes to look through.</li>
</ul>
<p>Next, try and get lucky by searching Google. Maybe someone else has already done all the hard work and there’s a blog post and a working PoC or Metasploit module just waiting for you. Fat chance, though. <a href="https://srcclr.com/security/deserialization-untrusted-data/java/s-1893" target="_blank" rel="external">Explaining</a> <a href="https://srcclr.com/security/overwritable-http-request-headers/ruby/s-1894" target="_blank" rel="external">a</a> <a href="https://srcclr.com/security/smtp-injection-attack-due-to-improper/ruby/s-1895" target="_blank" rel="external">vulnerability</a> <a href="https://srcclr.com/security/session-state-modification-when-wildcard/java/s-757" target="_blank" rel="external">is</a> <a href="https://srcclr.com/security/class-loader-manipulation-with/java/s-758" target="_blank" rel="external">hard</a> <a href="https://srcclr.com/security/class-loader-manipulation/java/s-759" target="_blank" rel="external">and</a> <a href="https://srcclr.com/security/remote-classloader-manipulation/java/s-770" target="_blank" rel="external">not</a> <a href="https://srcclr.com/security/cross-site-scripting-xss-through/javascript/s-1878" target="_blank" rel="external">many</a> <a href="https://srcclr.com/security/denial-service-dos-cpu-consumption/java/s-965" target="_blank" rel="external">just</a> <a href="https://srcclr.com/security/denial-service-dos-cpu-consumption/java/s-1442" target="_blank" rel="external">give</a> <a href="https://srcclr.com/security/cross-site-scripting-xss-through/ruby/s-1689" target="_blank" rel="external">them</a> <a href="https://srcclr.com/security/remote-code-execution-through-object/java/s-1710" target="_blank" rel="external">out</a> <a href="https://srcclr.com/security/remote-code-execution-through-directory/java/s-1761" target="_blank" rel="external">for</a> <a href="https://49.media.tumblr.com/e245b81c8c295d5596a2a883db2fc5a0/tumblr_n33tqolEEM1s0my1wo1_400.gif" target="_blank" rel="external">free</a>.</p>
<p>If the open source project has an issue tracker, try searching that. Use keywords from the advisory or search for issues created within a few weeks before the advisory was published. Depending on how strict the maintainers are about using their issue tracker, it may also be possible to filter for affected versions.</p>
<p>You can also search the git logs. My favorite ways to search are:</p>
<figure class="highlight dsconfig"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="string">git </span><span class="string">log </span><span class="built_in">--all</span> -i <span class="built_in">--grep</span> <span class="string">'exploit keyword'</span></div><div class="line"><span class="string">git </span><span class="string">log </span><span class="built_in">--since=12/1/2015</span> <span class="built_in">--before</span> 1/<span class="string">28/</span><span class="string">2016 </span>-i <span class="built_in">--grep</span> <span class="string">'keywords'</span></div></pre></td></tr></table></figure>
<p>The <code>--all</code> searches through all branches. This can be necessary when the fix only appears on a certain branch, since you probably wont know which one. And the <code>-i</code> tells grep to be case insensitive.</p>
<p>A great technique is to compare the commits between the fixed version and the version right before that. This can be accessed on GitHub by going to the Releases for a project. For example, <a href="https://github.com/apache/storm/releases" target="_blank" rel="external">Apache Storm Releases</a>.<br><img src="/images/reversing-open-source-vuln/release_list.png" alt=""></p>
<p>First, select the tag <em>before</em> the fixed version. Let’s say <a href="https://github.com/apache/storm/releases/tag/v0.10.0-beta" target="_blank" rel="external">v0.10.0-beta</a> is the tag right before the fix and v0.10.0-beta1 contains the fix. There is a link on the release page which says “1892 commits to master since this tag”.<br><img src="/images/reversing-open-source-vuln/release_before_fix.png" alt=""></p>
<p>That link will compare that release with master. In this example, it’s <a href="https://github.com/apache/storm/compare/v0.10.0-beta...master" target="_blank" rel="external">https://github.com/apache/storm/compare/v0.10.0-beta1…master</a>. Notice the <code>v0.10.0-beta...master</code>. Change this to <code>v0.10.0-beta...v0.10.0-beta1</code> to get this link: <a href="https://github.com/apache/storm/compare/v0.10.0-beta...v0.10.0-beta1" target="_blank" rel="external">https://github.com/apache/storm/compare/v0.10.0-beta…v0.10.0-beta1</a>.<br><img src="/images/reversing-open-source-vuln/comparing_changes.png" alt=""></p>
<h2 id="Understanding-the-Fix"><a href="#Understanding-the-Fix" class="headerlink" title="Understanding the Fix"></a>Understanding the Fix</h2><p>Ok, so you found the fix commit, or what you think and hope is the fix commit. Great. Now you just need to understand what the change was and how it affected the code. For this, you are going to want to setup an environment for the project. You want to be able to compile, run and debug whatever it is.</p>
<p>Apart from this, there’s not much I can say. Read the commit message carefully. Good luck!</p>
<h2 id="Creating-a-PoC"><a href="#Creating-a-PoC" class="headerlink" title="Creating a PoC"></a>Creating a PoC</h2><p>If you didn’t need a working environment to understand the fix, you will likely need one to create the PoC. It’s almost impossible to simply read the code and produce a working PoC. It will take several iterations.</p>
<p>Many PoCs are written in Ruby or Python because they’re flexible and don’t require a lot of structure and planning to get something complex up and running. You could even use the <a href="https://www.offensive-security.com/metasploit-unleashed/building-module/" target="_blank" rel="external">metasploit framework</a>.</p>
<p>Whatever you do, just remember the PoC won’t make sense to you a few days or weeks from now. Do yourself a favor and document any of the weird strangeness you encounter for future reference. Since your PoC code is exploiting an edge case that eluded developers, there is likely going to be some strangeness. Writing clear and useful comments will also help you understand what is going on.</p>
<p>Also, if you want your PoC to look legit or just for bonus points,  use the standard “[*]” and “[!]” notation for output. For example:</p>
<figure class="highlight prolog"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">[*] <span class="symbol">Connecting</span> to server ...</div><div class="line">[*] <span class="symbol">Building</span> malicious payload ...</div><div class="line">[*] <span class="symbol">Sending</span> payload over port <span class="number">1434</span> ...</div><div class="line">[!] <span class="symbol">Remote</span> target exploited successfully! <span class="symbol">Target</span> is vulnerable.</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vulnerability disclosures rarely include enough technical detail to reproduce the exploit. This is a &lt;em&gt;good&lt;/em&gt; thing. It wouldn’t do to arm every script kiddie with exact details of how to write an exploit with every disclosure. However, there are times when someone like an application security engineer or security researcher need to “reverse engineer” the disclosure to reconstruct the technical detail in order to fully understand the vulnerability or write an exploit to test systems for weakness.&lt;br&gt;
    
    </summary>
    
    
      <category term="security" scheme="https://CalebFenton.github.io/tags/security/"/>
    
      <category term="open source" scheme="https://CalebFenton.github.io/tags/open-source/"/>
    
  </entry>
  
  <entry>
    <title>Code Kata: TDD and Run-length Encoding</title>
    <link href="https://CalebFenton.github.io/2016/04/23/code-kata-tdd-and-run-length-encoding/"/>
    <id>https://CalebFenton.github.io/2016/04/23/code-kata-tdd-and-run-length-encoding/</id>
    <published>2016-04-24T02:26:04.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>A <em>kata</em> is a martial arts training method. It’s a set of detailed and choreographed movements and poses. The movements are performed repeatedly and internalized. A <em>code kata</em> is is a training method for developing skill in programming. Take something you do frequently, or wish to do better, strip away everything not essential, and practice it repeatedly.<br><a id="more"></a></p>
<p>I was introduced to code katas by <a href="https://twitter.com/OngEmil" target="_blank" rel="external">@OngEmil</a> who’s one of the best engineers I’ve ever met. The law of broscience teaches us that “Emil is good implies his advice is true”, so I took it seriously and started practicing and I feel like they’re a useful learning tool to understand.</p>
<p>Example code kata:</p>
<ul>
<li>Build a trivial Ruby project with Gemfile and specs</li>
<li>Write a program which uses an unfamiliar data structure, e.g. <a href="http://billmill.org/bloomfilter-tutorial/" target="_blank">bloom filter</a></li>
<li>Implement an unfamiliar algorithm, e.g. <a href="https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Pseudocode" target="_blank">shortest path</a></li>
<li>Create a new Android project from scratch</li>
<li>Practice keyboard shortcuts for your favorite IDE</li>
</ul>
<p>Practicing kata combines the essential elements of skill development:</p>
<ol>
<li>break down a technique into the essentials</li>
<li>learn by repetition</li>
</ol>
<p>The key elements of a code kata are:</p>
<ol>
<li>short - should take fewer than 30 minutes, once competent</li>
<li>essential - develops a desired or critical skill, or improves a weakness</li>
<li>focused - depth rather than breadth</li>
<li>challenging - if it’s not challenging, you either aren’t focused, or the problem is too easy</li>
</ol>
<h1 id="Why-use-katas"><a href="#Why-use-katas" class="headerlink" title="Why use katas?"></a>Why use katas?</h1><p>You have to practice to get good at anything. Efficient practice focuses on just a few essentials – do this kick five thousand times, play these scales for an hour, lift this weight eight times, etc. This is intuitive, yet with the skill <em>programming</em>, most never consider applying the same systematic approach. Many programmers think the key to good programming is about <em>intelligence</em>, or they think it’s to just code a lot. It’s neither. The key is <em>correct practice</em>. Intelligence helps, but programming is a craft, like carpentry. I doubt people think being intelligent is enough to be good at carpentry. Coding a lot also helps, but without guidance, effort is wasted. Code katas are an attempt to bring a systematic approach to developing programming skill.</p>
<h1 id="When-to-use-katas"><a href="#When-to-use-katas" class="headerlink" title="When to use katas?"></a>When to use katas?</h1><p>There are three main types of problem I think are amenable to kata training:</p>
<ol>
<li>common stuff - setting up a new project, keyboard shortcuts, IDE usage</li>
<li>new skills - new language, data structure, algorithm</li>
<li>weaknesses - something that slows you down</li>
</ol>
<p>For more on the philosophy and more examples of katas check out:</p>
<ul>
<li><a href="http://codekata.com/" target="_blank">codekata.com</a></li>
<li><a href="http://www.codekatas.org/" target="_blank">www.codekatas.org</a></li>
</ul>
<h1 id="Kata-Run-Length-Encoding"><a href="#Kata-Run-Length-Encoding" class="headerlink" title="Kata: Run Length Encoding"></a>Kata: Run Length Encoding</h1><p>For this kata, I’ll be implementing <a href="https://en.wikipedia.org/wiki/Run-length_encoding" target="_blank">run-length encoding</a> using test-driven development. It’s simple, but not too simple. The goal is not to practice the algorithm, but to practice writing RSpec tests, and setting up the project. Originally, I tried doing a kata on using TDD to come up with an edit distance algorithm but found it to be a little too complex. I don’t think it’s always possible to get to an algorithm using TDD. I’m also going to be pretending to not know <a href="http://rosettacode.org/wiki/Run-length_encoding#Ruby" target="_blank">regex</a>.</p>
<p>When performing a kata, be deliberate and focused. Take your time, and let these things sink in. Time box it to 30 minutes and stop if you go over. Start over again next time and you’ll be faster.</p>
<p>First, create the directory and hop in:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mkdir run_length</div><div class="line"><span class="built_in">cd</span> run_length</div></pre></td></tr></table></figure>
<p>Or, if you use <em>zsh</em>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">take run_length <span class="comment"># now you're cool</span></div></pre></td></tr></table></figure>
<p>I use <a href="https://rvm.io/" target="_blank">RVM</a> to manage having multiple Ruby and JRuby versions and multiple gemsets for each. A project can specify which Ruby version and gemset to use. When you navigate into that directory, RVM will automatically switch to that version.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> 2.2.1 &gt; .ruby-version</div><div class="line"><span class="built_in">echo</span> run_length &gt; .ruby-gemset</div><div class="line"><span class="built_in">cd</span> .</div></pre></td></tr></table></figure>
<p>Create a <code>Gemfile</code>:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">source <span class="string">'https://rubygems.org'</span></div><div class="line">gem <span class="string">'rspec'</span>, <span class="string">'~&gt; 3.0'</span></div></pre></td></tr></table></figure>
<p>Since this is an empty gemset, need to install <code>bundler</code>:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem install bundler</div><div class="line">bundle install</div></pre></td></tr></table></figure>
<p>Now, when can initialize rspec:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rspec --init</div></pre></td></tr></table></figure>
<p>Create a <em>minimal</em> <code>lib/run_length.rb</code>:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunLength</span></span></div><div class="line">    <span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get</span><span class="params">(string)</span></span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Create <code>spec/run_length_spec.rb</code> with one test. I opted for a simple test not because it’s an edge case (empty input), but because it’s simple. I’ll avoid defensive programming, so I won’t test for input of unicode, input of numbers, etc.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">require</span> <span class="string">'run_length'</span></div><div class="line"></div><div class="line">describe RunLength <span class="keyword">do</span></div><div class="line">    describe <span class="string">'#get'</span> <span class="keyword">do</span></div><div class="line">        let(<span class="string">'get'</span>) &#123; RunLength.get(string) &#125;</div><div class="line">        context <span class="string">'with an empty string'</span> <span class="keyword">do</span></div><div class="line">            let(<span class="string">'string'</span>) &#123; <span class="string">''</span> &#125;</div><div class="line">            subject&#123; get &#125;</div><div class="line">            it &#123; should eq <span class="string">''</span> &#125;</div><div class="line">        <span class="keyword">end</span></div><div class="line">    <span class="keyword">end</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>What do you know? It fails:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">╭─caleb@haxcalibur  ~/repos/code_kata/run_length ‹ruby-2.2.1@fuzzy_lcs›</div><div class="line">╰─$ rspec</div><div class="line">F</div><div class="line"></div><div class="line">Failures:</div><div class="line"></div><div class="line">  1) RunLength<span class="comment">#get with an empty string should eq ''</span></div><div class="line">     Failure/Error: it &#123; should eq <span class="string">''</span> &#125;</div><div class="line"></div><div class="line">       expected: <span class="string">''</span></div><div class="line">            got: nil</div><div class="line"></div><div class="line">       (compared using ==)</div><div class="line">     <span class="comment"># ./spec/run_length_spec.rb:11:in `block (4 levels) in &lt;top (required)&gt;'</span></div><div class="line"></div><div class="line">Finished <span class="keyword">in</span> 0.00109 seconds (files took 0.08408 seconds to load)</div><div class="line">1 example, 1 failure</div><div class="line"></div><div class="line">Failed examples:</div><div class="line"></div><div class="line">rspec ./spec/run_length_spec.rb:11 <span class="comment"># RunLength#get with an empty string should eq ''</span></div></pre></td></tr></table></figure>
<p>I’m practicing <a href="http://www.jamesshore.com/Blog/Red-Green-Refactor.html" target="_blank">Red, Green, Refactor</a>. That means, to fix a test, I’ll add just enough code to pass the tests <em>and nothing else</em>. Then, I’ll clean it up if necessary. This is not something I normally get to practice. For comparison, my normal workflow is:</p>
<ol>
<li>build a prototype</li>
<li>hack out some tests (sometimes at the same time as step 1)</li>
<li>realize the prototype is crap</li>
<li>scrap the prototype</li>
<li>rewrite the prototype (simultaneously with step 6)</li>
<li>refactor the tests, adding and removing where appropriate</li>
<li>repeat #3 - #6 until it meets requirements</li>
</ol>
<p>You might call this “test assisted development” mixed with “merciless refactoring.” I’m usually programming something weird or researchy, and it works well for me with those types of problems. I’ll use tests to break the problem down and build intuition. Writing good unit tests <em>after</em> writing a functioning unit usually leads to a lot of refactoring at first. I’ve found I can approach the design of a unit by thinking about how I would test it, and that cuts down on refactoring time. I use unwritten tests as opportunties to work when there’s limited time. It can be hard to implement a new feature in 30 minutes, but I could probably add one or two test cases in that time.</p>
<p>After writing <em>just enough</em> code to pass the test, it becomes:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get</span><span class="params">(string)</span></span></div><div class="line">    <span class="string">''</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Why return <code>&#39;&#39;</code> instead of <code>string</code>? Because empty quotes is more simple than a variable. Avoid adding any complexity. Before writing code, ask: “Can there be less and still pass the tests?”</p>
<p>Now, let’s add a slightly less trivial test case:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context <span class="string">'with "a"'</span> <span class="keyword">do</span></div><div class="line">    let(<span class="string">'string'</span>) &#123; <span class="string">'a'</span> &#125;</div><div class="line">    subject&#123; get &#125;</div><div class="line">    it &#123; should eq <span class="string">'1a'</span> &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Code change seems a little much. Spent some time thinking about it, but couldn’t think of anything.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get</span><span class="params">(string)</span></span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span> <span class="keyword">if</span> string.empty?</div><div class="line">    <span class="string">"1<span class="subst">#&#123;string&#125;</span>"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Next test adds a little more complexity:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context <span class="string">'with "aa"'</span> <span class="keyword">do</span></div><div class="line">    let(<span class="string">'string'</span>) &#123; <span class="string">'aa'</span> &#125;</div><div class="line">    subject&#123; get &#125;</div><div class="line">    it &#123; should eq <span class="string">'2a'</span> &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>There’s a pattern emerging. We can just add lots of <code>if/else</code>s for each test case, but that isn’t going to webscale. It would appear we must violate the principle of “just pass the tests.” But, lots of conditionals could be said to have a certain complexity. The challenge now is to write the code in a way that is more simple than having two conditionals and an else. Also, we can be certain there is a nearly 1 to 1 ratio of inputs to conditionals. At this point, I’m trying to avoid jumping ahead and solving the entire problem, since it’s simple enough to guess.</p>
<p>The code becomes:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get</span><span class="params">(string)</span></span></div><div class="line">    <span class="keyword">return</span> <span class="string">''</span> <span class="keyword">if</span> string.empty?</div><div class="line">    <span class="string">"<span class="subst">#&#123;string.size&#125;</span><span class="subst">#&#123;string[<span class="number">0</span>]&#125;</span>"</span></div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>It’s not much more complex. It passes the tests. I keep feeling there’s a smarter way to do it. That’s fine. I’ll practice this again for a few days and see if anything new jumps out at me.</p>
<p>Fourth test:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context <span class="string">'with "aab"'</span> <span class="keyword">do</span></div><div class="line">    let(<span class="string">'string'</span>) &#123; <span class="string">'aab'</span> &#125;</div><div class="line">    subject&#123; get &#125;</div><div class="line">    it &#123; should eq <span class="string">'2a1b'</span> &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>Originally, I started writing a state machine that iterated over the string and juggled variables like character counts, last character processed, etc. This added a lot of complexity and was ugly. I want to add the least amount of complexity and still pass the tests. I thought about it for a few minutes and rewrote it into something more clear:</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">self</span>.<span class="title">get</span><span class="params">(string)</span></span></div><div class="line">    counts = Hash.new(<span class="number">0</span>)</div><div class="line">    string.each_char &#123; <span class="params">|l|</span> counts[l] += <span class="number">1</span> &#125;</div><div class="line">    counts.map &#123; <span class="params">|l, c|</span> <span class="string">"<span class="subst">#&#123;c&#125;</span><span class="subst">#&#123;l&#125;</span>"</span> &#125;.join</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>You could point out this still makes use of a state machine, but the difference is that this is more idiomatic, there’s less state tracking, and it’s relying on code I didn’t have to write. Not writing code is the best way to not write bugs. This relies on the fact that Ruby &gt; 1.9 maintains key insertion order for hashes. If it didn’t, I could use a sorted hash, or a sorted set of just keys.</p>
<p>Some people might say we’re done, but I’d like to add just <em>one</em> complex case. This is not so much to test for correctness. It doesn’t cover any additional code because no code changes are needed to make it pass, but it does <em>document the intent</em> of the code.</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">context <span class="string">'with "aaaabcccccccccdddddz"'</span> <span class="keyword">do</span></div><div class="line">    let(<span class="string">'string'</span>) &#123; <span class="string">'aaaabcccccccccdddddz'</span> &#125;</div><div class="line">    subject&#123; get &#125;</div><div class="line">    it &#123; should eq <span class="string">'4a1b9c5d1z'</span> &#125;</div><div class="line"><span class="keyword">end</span></div></pre></td></tr></table></figure>
<p>That’s about 30 minutes for me. I’ll stop here and practice again tomorrow. I’ll do this for a week and next time I need to setup a Ruby + RVM + Rails project, I can get all the foundation laid without having to consult any documentation. If this problem is too short after a few days, I’ll add a decoding method.</p>
<p>What do you think? Do you see something I could have done better? A better test? Cleaner, simpler solutions? Let me know. Have an idea for a kata? Share it here.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A &lt;em&gt;kata&lt;/em&gt; is a martial arts training method. It’s a set of detailed and choreographed movements and poses. The movements are performed repeatedly and internalized. A &lt;em&gt;code kata&lt;/em&gt; is is a training method for developing skill in programming. Take something you do frequently, or wish to do better, strip away everything not essential, and practice it repeatedly.&lt;br&gt;
    
    </summary>
    
    
      <category term="code-kata" scheme="https://CalebFenton.github.io/tags/code-kata/"/>
    
      <category term="tdd" scheme="https://CalebFenton.github.io/tags/tdd/"/>
    
  </entry>
  
  <entry>
    <title>TetCon 2016 - Android Deobfuscation: Tools and Techniques</title>
    <link href="https://CalebFenton.github.io/2016/04/23/tetcon-2016-android-deobfuscation/"/>
    <id>https://CalebFenton.github.io/2016/04/23/tetcon-2016-android-deobfuscation/</id>
    <published>2016-04-23T07:00:00.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>I gave a talk at <a href="https://tetcon.org" target="_blank" rel="external">TetCon 2016</a> about Android obfuscation and deobfuscation.</p>
<p>The talks at TetCon were great and the people there were super nice. I got all kinds of new ideas and spent the entire flight home furiously coding. Super motivating to hear from and talk to other people working on similar problems. Thanks to the organizers and volunteers Thai for making everything happen.</p>
<p>Also, special thanks to everyone for speaking English around me!</p>
<h1 id="Slides-Video"><a href="#Slides-Video" class="headerlink" title="Slides + Video"></a>Slides + Video</h1><p><a href="http://www.slideshare.net/tekproxy/tetcon-2016" target="_blank" rel="external">http://www.slideshare.net/tekproxy/tetcon-2016</a></p>
<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><ul>
<li><a href="https://github.com/CalebFenton/dex-oracle" target="_blank" rel="external">https://github.com/CalebFenton/dex-oracle</a></li>
<li><a href="https://github.com/CalebFenton/simplify" target="_blank" rel="external">https://github.com/CalebFenton/simplify</a></li>
</ul>
<h1 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h1><p>State of android deobfuscation is weak. Commercial obfuscators are getting more common, and reversers need to understand how to deobfuscate them. This talk provides an overview of different obfuscation types. After that, it describes two code deobfuscation approaches: pattern recognition and virtual execution.</p>
<p>Pattern recognition focuses mainly on identifying obfuscation patterns, crafting into regular expressions, and then repeatedly applying pattern-based transformations on the code. Insight into code behavior is improved by limited execution of certain methods and storing the result.</p>
<p>Virtual execution involves simulating the applications code to determine semantics. A context sensitive graph is generated representing every possible execution path and all possible register + class states for each execution of each instruction. This is then analyzed and modified to make the code easier to understand but behaves identically.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;I gave a talk at &lt;a href=&quot;https://tetcon.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TetCon 2016&lt;/a&gt; about Android obfuscation and deobfuscation.
    
    </summary>
    
    
      <category term="deobfuscation" scheme="https://CalebFenton.github.io/tags/deobfuscation/"/>
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="simplify" scheme="https://CalebFenton.github.io/tags/simplify/"/>
    
      <category term="dex-oracle" scheme="https://CalebFenton.github.io/tags/dex-oracle/"/>
    
  </entry>
  
  <entry>
    <title>Decompiling XAPK Files</title>
    <link href="https://CalebFenton.github.io/2016/02/28/decompiling-xapk-files/"/>
    <id>https://CalebFenton.github.io/2016/02/28/decompiling-xapk-files/</id>
    <published>2016-02-28T15:41:03.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>While reviewing new Android reverse engineering questions on Stack Overflow, I came across this request to <a href="http://stackoverflow.com/questions/35070003/decompile-xapk-file" target="_blank" rel="external">decompile an <code>.xapk</code></a>. A brief, non-technical description of the format is described on <a href="https://apkpure.com/xapk.htm" target="_blank" rel="external">APKPure’s website</a>:</p>
<blockquote>
<p>XAPK is a brand new file format standard for Android APK package file. Contains all APK package and obb cache asset file to keep Android games or apps working, it always ends in “.xapk”. To ensure games, applications run perfectly, APK Install one click install makes it easy for Android users directly install .apk, .xapk file to the root directory.<br>obb cache data?<br><a id="more"></a></p>
</blockquote>
<p>The “OBB cache files” are usually pretty big for games and include all of the assets like maps, models, images, music, whatever.</p>
<p>Ok, so it looks like we have a new <strong>APK</strong> format specifically designed for games <em>and</em> it comes with <a href="https://apkpure.com/xapk-installer/com.apkpure.installer" target="_blank" rel="external">its own installer</a>. Since there’s an installer, that might mean the actual <code>.apk</code> is encrypted and embedded in the OBB. Maybe there’s some metadata in the <code>.xapk</code> that tells the installer how to lookup the decryption key from their servers? Maybe I’ll need to search for the <strong>ZIP</strong> magic bytes and carve out the <code>.apk</code>?</p>
<p>Nope. <em>The original <code>.apk</code> is at the root of the <code>.xapk</code> archive.</em> EASY. (read: boring) Shit, I was looking for a challenge!</p>
<p>I downloaded and examined <a href="https://apkpure.com/side-lift-king/org.ammarz.MT" target="_blank" rel="external">Side Lift King</a>.<br><img src="/images/decompiling-xapk/side-lift-king.png" alt="such lift, much king"></p>
<p>Here’s the shasum:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ shasum Side\ Lift\ King_v2.0_apkpure.com.xapk</div><div class="line">155dbed0809d49b477c6ab4c52f555cfc8f47144  Side Lift King_v2.0_apkpure.com.xapk</div></pre></td></tr></table></figure></p>
<p>The <code>.xapk</code> is just a ZIP file:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file Side\ Lift\ King_v2.0_apkpure.com.xapk</div><div class="line">Side Lift King_v2.0_apkpure.com.xapk: Zip archive data, at least v2.0 to extract</div></pre></td></tr></table></figure></p>
<p>The original <code>org.ammarz.MT.apk</code> is just floating around:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$ unzip Side\ Lift\ King_v2.0_apkpure.com.xapk</div><div class="line">Archive:  Side Lift King_v2.0_apkpure.com.xapk</div><div class="line"> extracting: org.ammarz.MT.apk</div><div class="line"> extracting: icon.png</div><div class="line"> extracting: Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb</div><div class="line"> extracting: manifest.json</div></pre></td></tr></table></figure></p>
<p>It’s not encrypted or anything.<br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file org<span class="selector-class">.ammarz</span><span class="selector-class">.MT</span><span class="selector-class">.apk</span></div><div class="line">org<span class="selector-class">.ammarz</span><span class="selector-class">.MT</span><span class="selector-class">.apk</span>: Java archive data (JAR)</div></pre></td></tr></table></figure></p>
<p>It decompiles fine with apktool:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ apktool d org.ammarz.MT.apk</div><div class="line">I: Using Apktool 2.0.1 on org.ammarz.MT.apk</div><div class="line">I: Loading resource table...</div><div class="line">I: Decoding AndroidManifest.xml with resources...</div><div class="line">I: Loading resource table from file: /Users/caleb/Library/apktool/framework/1.apk</div><div class="line">I: Regular manifest package...</div><div class="line">I: Decoding file-resources...</div><div class="line">I: Decoding values */* XMLs...</div><div class="line">I: Baksmaling classes.dex...</div><div class="line">I: Copying assets and libs...</div><div class="line">I: Copying unknown files...</div><div class="line">I: Copying original files...</div></pre></td></tr></table></figure></p>
<p>The OBB file, in case you’re curious, is just a <strong>JAR</strong> which contains lots of files in an <code>assets/</code> folder.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ file Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb                           1 ↵</div><div class="line">Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb: Java archive data (JAR)</div></pre></td></tr></table></figure></p>
<p>The <code>manifest.json</code> must be the file used by the installer. It must be the metadata used by the installer app. Here is a pretty formatted version:<br><figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">   <span class="attr">"xapk_version"</span>:<span class="number">1</span>,</div><div class="line">   <span class="attr">"package_name"</span>:<span class="string">"org.ammarz.MT"</span>,</div><div class="line">   <span class="attr">"name"</span>:<span class="string">"Side Lift King"</span>,</div><div class="line">   <span class="attr">"version_code"</span>:<span class="string">"8"</span>,</div><div class="line">   <span class="attr">"version_name"</span>:<span class="string">"2.0"</span>,</div><div class="line">   <span class="attr">"min_sdk_version"</span>:<span class="string">"9"</span>,</div><div class="line">   <span class="attr">"target_sdk_version"</span>:<span class="string">"23"</span>,</div><div class="line">   <span class="attr">"permissions"</span>:[</div><div class="line">      <span class="string">"android.permission.INTERNET"</span>,</div><div class="line">      <span class="string">"android.permission.ACCESS_NETWORK_STATE"</span>,</div><div class="line">      <span class="string">"android.permission.WAKE_LOCK"</span>,</div><div class="line">      <span class="string">"android.permission.ACCESS_WIFI_STATE"</span>,</div><div class="line">      <span class="string">"com.android.vending.CHECK_LICENSE"</span>,</div><div class="line">      <span class="string">"android.permission.WRITE_EXTERNAL_STORAGE"</span>,</div><div class="line">      <span class="string">"android.permission.READ_EXTERNAL_STORAGE"</span></div><div class="line">   ],</div><div class="line">   <span class="attr">"total_size"</span>:<span class="number">58621386</span>,</div><div class="line">   <span class="attr">"expansions"</span>:[</div><div class="line">      &#123;</div><div class="line">         <span class="attr">"file"</span>:<span class="string">"Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb"</span>,</div><div class="line">         <span class="attr">"install_location"</span>:<span class="string">"EXTERNAL_STORAGE"</span>,</div><div class="line">         <span class="attr">"install_path"</span>:<span class="string">"Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb"</span></div><div class="line">      &#125;</div><div class="line">   ]</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h1 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h1><p>If you want to decompile an <code>.xapk</code>, all you have to do is unzip it, look for the original <code>.apk</code>, and decompile it normally.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;While reviewing new Android reverse engineering questions on Stack Overflow, I came across this request to &lt;a href=&quot;http://stackoverflow.com/questions/35070003/decompile-xapk-file&quot;&gt;decompile an &lt;code&gt;.xapk&lt;/code&gt;&lt;/a&gt;. A brief, non-technical description of the format is described on &lt;a href=&quot;https://apkpure.com/xapk.htm&quot;&gt;APKPure’s website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XAPK is a brand new file format standard for Android APK package file. Contains all APK package and obb cache asset file to keep Android games or apps working, it always ends in “.xapk”. To ensure games, applications run perfectly, APK Install one click install makes it easy for Android users directly install .apk, .xapk file to the root directory.&lt;br&gt;obb cache data?&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="reversing" scheme="https://CalebFenton.github.io/tags/reversing/"/>
    
  </entry>
  
  <entry>
    <title>How does Dalvik handle &#39;this&#39; registers?</title>
    <link href="https://CalebFenton.github.io/2016/02/21/how-does-dalvik-handle-this-registers/"/>
    <id>https://CalebFenton.github.io/2016/02/21/how-does-dalvik-handle-this-registers/</id>
    <published>2016-02-21T20:44:39.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-this-Reference"><a href="#The-this-Reference" class="headerlink" title="The this Reference"></a>The <code>this</code> Reference</h2><p>For every instance (virtual, non-static) method in Dalvik, the first parameter is a reference to itself, or, in Java, the <code>this</code> reference. I wanted to know if it was legal to reassign the register value.</p>
<p>Just so I’m sure you know what I’m talking about, here’s a simple Java class with an instance method called <code>instanceMethod</code>:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Instance</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">instanceMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.number;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>The above smali gets turned into this (you can safely ignore <code>&lt;init&gt;()V</code>):</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">LInstance;</span></div><div class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></div><div class="line"></div><div class="line"><span class="keyword">.field</span><span class="keyword"> private</span> number:I</div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V</div><div class="line">   <span class="built_in"> const/4 </span>v0, 0x5</div><div class="line">   <span class="built_in"> iput </span>v0, p0, <span class="class">LInstance;</span>-&gt;number:I</div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span> instanceMethod()I</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line"></div><div class="line">    <span class="comment"># p0 is the 'this' reference</span></div><div class="line">   <span class="built_in"> iget </span>v0, p0, <span class="class">LInstance;</span>-&gt;number:I</div><div class="line"></div><div class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>Do your decompilations look different? It may be because mine was generated using <code>baksmali --use-locals</code> which separates the registers into registers used within the method body (locals) and those passed as parameters. Local registers are named <code>v0</code>, <code>v1</code>, <code>v2</code>, and so on and the parameters are named <code>p0</code>, <code>p1</code>, etc.</p>
<p>The default behavior is to name all registers based on how they’re actually laid out by Dalvik: <code>r0</code>, <code>r1</code>, <code>r2</code> and so on, regardless of if they’re local or parameters. To clarify, a method like this:<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public example(JI)V</div><div class="line"><span class="keyword">    .registers</span> 3</div></pre></td></tr></table></figure></p>
<p>Has a register layout like this:</p>
<ul>
<li><code>r0</code>, <code>r1</code>, <code>r2</code> - local registers</li>
<li><code>r3</code> - <code>this</code> register (p0 with <code>--use-locals</code>)</li>
<li><code>r4</code> &amp; <code>r5</code> - <code>J</code> parameter (wide types use two registers)</li>
<li><code>r6</code> - <code>I</code> parameter</li>
</ul>
<h2 id="The-Question"><a href="#The-Question" class="headerlink" title="The Question"></a>The Question</h2><p>I wondered if <code>p0</code> was somehow special and if it was possible to rewrite it. One of the optimizers I’m working on needs to rewrite Smali and it works best if it knows all of the available registers at a certain point in code. A register is “available” if it’s not used for the rest of the execution. If you’ve ever written a tool to automatically modify Smali, you have probably run into this problem.</p>
<p><strong>Spoiler warning:</strong> It is <em>not</em> special and it <em>is</em> possible to reassign <code>p0</code>!</p>
<p>Here’s the code I used to test:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">LHello;</span></div><div class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></div><div class="line"><span class="keyword">.source</span> <span class="string">"Hello.java"</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> constructor</span> &lt;init&gt;()V</div><div class="line"><span class="keyword">    .locals</span> 0</div><div class="line">   <span class="built_in"> invoke-direct </span>&#123;p0&#125;, <span class="class">Ljava/lang/Object;</span>-&gt;&lt;init&gt;()V</div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> main([<span class="class">Ljava/lang/String;</span>)V</div><div class="line"><span class="keyword">    .locals</span> 2</div><div class="line"><span class="keyword">    .param</span> p0, <span class="string">"argv"</span>    <span class="comment"># [Ljava/lang/String;</span></div><div class="line">   <span class="built_in"> sget-object </span>v0, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></div><div class="line">   <span class="built_in"> new-instance </span>v1, <span class="class">LHello;</span></div><div class="line">   <span class="built_in"> invoke-direct </span>&#123;v1&#125;, <span class="class">LHello;</span>-&gt;&lt;init&gt;()V</div><div class="line">   <span class="built_in"> invoke-virtual </span>&#123;v1&#125;, <span class="class">LHello;</span>-&gt;instance()I</div><div class="line">   <span class="built_in"> move-result </span>v1</div><div class="line">   <span class="built_in"> invoke-virtual </span>&#123;v0, v1&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(I)V</div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span> instance()I</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line"></div><div class="line">    <span class="comment"># rewrite p0 with 0x5, cross fingers, hope it works</span></div><div class="line">   <span class="built_in"> const/4 </span>p0, 0x5</div><div class="line">   <span class="built_in"> return </span>p0<span class="keyword"></span></div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>And then to compile and run it:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ smali hello.smali -o classes.dex &amp;&amp; zip Hello.zip classes.dex &amp;&amp; adb push Hello.zip /data/<span class="built_in">local</span> &amp;&amp; adb shell dalvikvm -cp /data/<span class="built_in">local</span>/Hello.zip Hello</div><div class="line">  adding: classes.dex (deflated 45%)</div><div class="line">115 KB/s (619 bytes <span class="keyword">in</span> 0.005s)</div><div class="line">5</div></pre></td></tr></table></figure>
<p>The test code outputs the expected <code>5</code> with no errors or warnings. It makes sense that a register should be able to hold a reference to anything, but the only way to be absolutely sure (without closely examining the source) is to test it.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-this-Reference&quot;&gt;&lt;a href=&quot;#The-this-Reference&quot; class=&quot;headerlink&quot; title=&quot;The this Reference&quot;&gt;&lt;/a&gt;The &lt;code&gt;this&lt;/code&gt; Reference&lt;/h2&gt;&lt;p&gt;For every instance (virtual, non-static) method in Dalvik, the first parameter is a reference to itself, or, in Java, the &lt;code&gt;this&lt;/code&gt; reference. I wanted to know if it was legal to reassign the register value.&lt;/p&gt;
&lt;p&gt;Just so I’m sure you know what I’m talking about, here’s a simple Java class with an instance method called &lt;code&gt;instanceMethod&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Instance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.number;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
  </entry>
  
  <entry>
    <title>How does Dalvik handle null?</title>
    <link href="https://CalebFenton.github.io/2016/02/16/how-does-dalvik-handle-null-types/"/>
    <id>https://CalebFenton.github.io/2016/02/16/how-does-dalvik-handle-null-types/</id>
    <published>2016-02-17T03:44:39.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="The-Problem"><a href="#The-Problem" class="headerlink" title="The Problem"></a>The Problem</h2><p>Dalvik doesn’t have a proper null type. A null is <a href="https://github.com/android/platform_dalvik/blob/master/dx/src/com/android/dx/rop/cst/CstKnownNull.java#L92" target="_blank" rel="external">represented by a <code>0</code></a>. Consider this example Smali code:<br><code>const/4 v0, 0x0</code></p>
<p>It could actually represent a few of different types:</p>
<ul>
<li><code>int v0 = 0;</code></li>
<li><code>boolean v0 = false;</code></li>
<li><code>byte v0 = 0x0;</code></li>
<li><code>short v0 = 0;</code></li>
<li>And even: <code>v0 = null;</code><a id="more"></a>
</li>
</ul>
<p>In case you were wondering about how <code>char</code> is handled, <code>char c = &#39;a&#39;</code> it looks like this:<br><code>const/16 v0, 0x61</code></p>
<p>I wanted to know when Dalvik coaxed <code>0</code> values into <code>null</code> references for my work on <a href="https://github.com/CalebFenton/simplify" target="_blank" rel="external">Simplify</a>. I tried searching and only found bits and pieces, and, of course, a bunch of source code. The first page I found that looked promising was <a href="http://forensics.spreitzenbarth.de/2012/08/27/comparison-of-dalvik-and-java-bytecode/" target="_blank" rel="external">http://forensics.spreitzenbarth.de/2012/08/27/comparison-of-dalvik-and-java-bytecode/
</a> but <em>all</em> it said about <code>null</code>s was:</p>
<blockquote>
<p>Dalvik bytecode does not have a specific null type. Instead, Dalvik uses a 0 value constant. So, the ambiguous implication of constant 0 should be distinguished properly.</p>
</blockquote>
<p>This wasn’t going to cut it.</p>
<h2 id="The-Experiment"><a href="#The-Experiment" class="headerlink" title="The Experiment"></a>The Experiment</h2><p>I dug through the source code a little and felt like I only partially understood when it happened. To be sure, and to understand more deeply, and mostly because I like to do things the cheap, easy, ghetto way, I decided to write some Java, convert it to Smali, and execute it to see what happens!</p>
<p>Consider this bit of code which handles <code>null</code> and <code>0</code> back to back:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addNullAnd0ToList</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Integer&gt; wtf = <span class="keyword">new</span> LinkedList&lt;Integer&gt;();</div><div class="line">    wtf.add(<span class="keyword">null</span>);</div><div class="line">    wtf.add(<span class="number">0</span>);</div><div class="line">    System.out.println(wtf); <span class="comment">// [null, 0]</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>This is the resulting Smali (with a <code>main</code> method that I added because I’m nice and want you to be able to easily execute this yourself):<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">LHelloWorld;</span></div><div class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> varargs main([<span class="class">Ljava/lang/String;</span>)V</div><div class="line"><span class="keyword">    .locals</span> 0</div><div class="line"><span class="keyword">    .prologue</span></div><div class="line">   <span class="built_in"> invoke-static </span>&#123;&#125;, <span class="class">LHelloWorld;</span>-&gt;addNullAnd0ToList()V</div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> addNullAnd0ToList()V</div><div class="line"><span class="keyword">    .locals</span> 4</div><div class="line"><span class="keyword">    .prologue</span></div><div class="line">   <span class="built_in"> new-instance </span>v0, <span class="class">Ljava/util/LinkedList;</span></div><div class="line">   <span class="built_in"> invoke-direct </span>&#123;v0&#125;, <span class="class">Ljava/util/LinkedList;</span>-&gt;&lt;init&gt;()V</div><div class="line"></div><div class="line"><span class="keyword">    .local</span> v0, <span class="string">"wtf"</span>:<span class="class">Ljava/util/List;</span>, <span class="string">"Ljava/util/List&lt;Ljava/lang/Integer;&gt;;"</span></div><div class="line">   <span class="built_in"> const/4 </span>v1, 0x0</div><div class="line">   <span class="built_in"> invoke-interface </span>&#123;v0, v1&#125;, <span class="class">Ljava/util/List;</span>-&gt;add(<span class="class">Ljava/lang/Object;</span>)Z</div><div class="line"></div><div class="line">   <span class="built_in"> const/4 </span>v1, 0x0</div><div class="line">   <span class="built_in"> invoke-static </span>&#123;v1&#125;, <span class="class">Ljava/lang/Integer;</span>-&gt;valueOf(I)<span class="class">Ljava/lang/Integer;</span></div><div class="line">   <span class="built_in"> move-result-object </span>v1</div><div class="line">   <span class="built_in"> invoke-interface </span>&#123;v0, v1&#125;, <span class="class">Ljava/util/List;</span>-&gt;add(<span class="class">Ljava/lang/Object;</span>)Z</div><div class="line"></div><div class="line">   <span class="built_in"> sget-object </span>v1, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></div><div class="line">   <span class="built_in"> invoke-virtual </span>&#123;v1, v0&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/Object;</span>)V</div><div class="line"></div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div></pre></td></tr></table></figure></p>
<p>These two lines are responsible for adding the <code>null</code> to <code>wtf:Ljava/lang/List;</code>:<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">const/4 v1, 0x0<span class="built_in"></span></div><div class="line">invoke-interface &#123;v0, v1&#125;, <span class="class">Ljava/util/List;</span>-&gt;add(<span class="class">Ljava/lang/Object;</span>)Z</div></pre></td></tr></table></figure></p>
<p>My first guess was Dalvik sees that <code>v1</code> contains an integer but is used as a <code>Ljava/lang/Object;</code> type argument. Does it have to be an integer? Does it work with other numbers? What if <code>v1</code> was a <code>short</code>? I added a <code>check-cast</code> to force <code>v1</code> into <code>short</code>:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">const/4 v1, 0x0<span class="built_in"></span></div><div class="line">check-cast v1, S<span class="built_in"></span></div><div class="line">invoke-interface &#123;v0, v1&#125;, <span class="class">Ljava/util/List;</span>-&gt;add(<span class="class">Ljava/lang/Object;</span>)Z</div></pre></td></tr></table></figure>
<p>Then compiled an ran everything:<br><code>smali hello.smali -o classes.dex &amp;&amp; zip Hello.zip classes.dex &amp;&amp; adb push Hello.zip /data/local &amp;&amp; adb shell dalvikvm -cp /data/local/Hello.zip HelloWorld</code></p>
<p>It failed:<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="string">DexOpt:</span> --- BEGIN <span class="string">'Hello.zip'</span> (bootstrap=<span class="number">0</span>) ---</div><div class="line"><span class="string">DexOpt:</span> load <span class="number">4</span>ms, verify <span class="number">4</span>ms, opt <span class="number">0</span>ms</div><div class="line"><span class="string">DexOpt:</span> --- END <span class="string">'Hello.zip'</span> (success) ---</div><div class="line">DEX prep <span class="string">'/data/local/Hello.zip'</span>: unzip <span class="keyword">in</span> <span class="number">0</span>ms, rewrite <span class="number">58</span>ms</div><div class="line"><span class="string">VFY:</span> S is not instance of Ljava<span class="regexp">/lang/</span>Object;</div><div class="line"><span class="string">VFY:</span> bad arg <span class="number">1</span> (into Ljava<span class="regexp">/lang/</span>Object;)</div><div class="line"><span class="string">VFY:</span>  rejecting call to Ljava<span class="regexp">/util/</span>List;.add (Ljava<span class="regexp">/lang/</span>Object;)Z</div><div class="line"><span class="string">VFY:</span>  rejecting opcode <span class="number">0x72</span> at <span class="number">0x0008</span></div><div class="line"><span class="string">VFY:</span>  rejected LHelloWorld;.addNullAnd0ToList ()V</div><div class="line">Verifier rejected <span class="class"><span class="keyword">class</span> <span class="title">LHelloWorld</span>;</span></div></pre></td></tr></table></figure></p>
<p>The key part of this error is the <code>S is not instance of Ljava/lang/Object;</code>. Ok, that’s fair. There must be a difference between registers with and without explicit type casting. But does it work with integers? I tried with <code>check-cast v1, I</code> and got about the same error. The code didn’t get past the verifier, so it knew at runtime it was wrong. To use a <code>short</code> without a <code>check-cast</code> I just added a <code>getShort()S</code> method. I didn’t think it would work because in both the method call and with <code>check-cast</code>, explicit type information is available.</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">invoke-static &#123;&#125;, <span class="class">LHelloWorld;</span>-&gt;getShort()S<span class="built_in"></span></div><div class="line">move-result v1</div></pre></td></tr></table></figure>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> getShort()S</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line">   <span class="built_in"> const/4 </span>v0, 0x0</div><div class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>And I was right; it fails:<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">VFY:</span> register1 v1 type <span class="number">10</span>, wanted ref</div><div class="line"><span class="symbol">VFY:</span> bad arg <span class="number">1</span> (into Ljava<span class="meta-keyword">/lang/</span>Object;)</div></pre></td></tr></table></figure></p>
<p>This is getting silly and I’m starting to think I should maybe just audit the source to fully understand. So I spend another 10 - 15 minutes poking around before giving up. I’ll just derrive the behavior experimentally <em>hashtag yolo</em>.</p>
<p>For the sake of completeness, I also try with a <code>getInt()I</code>:<br><figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">invoke-static &#123;&#125;, <span class="class">LHelloWorld;</span>-&gt;getInt()I<span class="built_in"></span></div><div class="line">move-result v1</div></pre></td></tr></table></figure></p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> getInt()I</div><div class="line"><span class="keyword">    .locals</span> 1</div><div class="line">   <span class="built_in"> const/4 </span>v0, 0x0</div><div class="line">   <span class="built_in"> return </span>v0<span class="keyword"></span></div><div class="line">.end method</div></pre></td></tr></table></figure>
<p>Another failure:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VFY: register1 v1 <span class="keyword">type</span> <span class="type">12, </span>wanted ref</div></pre></td></tr></table></figure></p>
<p>Dalvik can see through my cheap tricks. What if I try a wide value like with <code>const-wide</code>? There’s no <em>explicit</em> type… Slight change to the code because <code>long</code>s are fat and take up two registers. I had to move the register to <code>v2</code>.</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span>-wide v2, <span class="number">0x0</span>L</div></pre></td></tr></table></figure>
<p>NOPE:<br><figure class="highlight ada"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">VFY: register1 v2 <span class="keyword">type</span> <span class="type">13, </span>wanted ref</div></pre></td></tr></table></figure></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Eventually, I found that only two things work for a <code>null</code>:</p>
<ol>
<li><code>const/4 v1, 0x0</code></li>
<li><code>const/16 v1, 0x0</code></li>
</ol>
<p>And these are considered <code>null</code> <em>only</em> if there’s no explicit type information available between assignment and use. Now I can take these delicious, esoteric trivialities and apply them towards creating failing tests. And I can’t help but simultaneously get excited by the prospect of failing tests and wonder what kind of life choices led to this.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The-Problem&quot;&gt;&lt;a href=&quot;#The-Problem&quot; class=&quot;headerlink&quot; title=&quot;The Problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;Dalvik doesn’t have a proper null type. A null is &lt;a href=&quot;https://github.com/android/platform_dalvik/blob/master/dx/src/com/android/dx/rop/cst/CstKnownNull.java#L92&quot;&gt;represented by a &lt;code&gt;0&lt;/code&gt;&lt;/a&gt;. Consider this example Smali code:&lt;br&gt;&lt;code&gt;const/4 v0, 0x0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It could actually represent a few of different types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean v0 = false;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byte v0 = 0x0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And even: &lt;code&gt;v0 = null;&lt;/code&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
  </entry>
  
  <entry>
    <title>Why Anti-Virus Software Sucks</title>
    <link href="https://CalebFenton.github.io/2016/02/07/why-anti-virus-sucks/"/>
    <id>https://CalebFenton.github.io/2016/02/07/why-anti-virus-sucks/</id>
    <published>2016-02-08T04:13:40.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>Everyone knows anti-virus products suck and you can say anti-virus sucks for many different reasons and at different levels. You could start with obvious, surface level reasons: anti-virus software (AV) sucks because it’s slow, klunky, self-advertising garbage that slows your machine down. From there, you could move on to more perceptive complaints such as how it hardly ever detects new malware and almost certainly will not detect fancypants, bespoke, advanced persistent threats (APT). You could still deeper and claim that there’s something wrong with an industry that thrives on selling people fear and selling companies mere compliance so their insurance doesn’t laugh in their faces when they try to collect after getting their gibson’s backdoor hacked.</p>
<p>The obvious question is then <em>why</em> do AV products suck? Malware is a big problem that costs people money and heartache all the time. Why isn’t this solved better? Need to understand the problem at the most fundamental level. For me, this means understanding the condition in terms of economics principals–incentives, constraints, market forces at work, and so on. Once you understand something at this level, you can usually extrapolate most of the symptoms yourself and, importantly, you’ll have a much better idea of how to actually <em>fix</em> it. This brings me to my main thesis: <strong>AV software sucks because it’s impossible for the market to be informed and to meaningfully differentiate between products and objectively determine which one is better.</strong> Because of this, there isn’t much incentive for companies to make lean, clean, optimized, AV products with amazing, complex detection capabilities and behavior analysis. They can’t compete on quality, because people can’t tell the difference between great and crap, so they have to compete on sales and advertising.</p>
<p><img src="http://usercontent1.hubimg.com/3675524_f520.jpg" alt="fearmongering"><br><a id="more"></a></p>
<p>You may have a favorite AV scanner, but can you honestly tell me, objectively, why it’s better than all the others? You might have a few good, small reasons like one has a cleaner, faster user interface (UI) or <em>seems</em> to have better detections. But how can you be sure? Do you know what each one is really doing under the hood? How do you know how good it is at detecting new viruses? How do you know how fast its detection signatures are updated? What about code quality and security bugs in the AV software itself? If you’re like most people, you simply prefer one AV product because it sucks the <em>least</em>.</p>
<p><img src="https://i.imgflip.com/8bki5.jpg" alt="gear grinding"></p>
<p>It’s pretty much impossible for laypeeps to have any clue how good an AV product is. Actually, I can’t even tell, so I reckon most experts can’t either, at least in general. Because of this general inability to compare, AV testing companies have stepped up to solve this problem. They test and compare all the different AV products and claim to provide an objective, meaningful, comparative analysis. The idea is that consumers can read their reports and really know what’s going on and pick a good AV product based on <em>science</em> and not anecdotal hearsay.</p>
<p><img src="http://www.kappit.com/img/pics/201412_1752_gaaid_sm.jpg" alt="difficulty"></p>
<h2 id="Why-AV-Testing-Sucks"><a href="#Why-AV-Testing-Sucks" class="headerlink" title="Why AV Testing Sucks"></a>Why AV Testing Sucks</h2><p>First, if you’ve never seen an AV Test report and you’re some kind of masochist, here are two from 2015:</p>
<ol>
<li><a href="https://www.av-test.org/fileadmin/tests/mobile/avtest_summary_mobile_2015-11.xlsx" target="_blank" rel="external">https://www.av-test.org/fileadmin/tests/mobile/avtest_summary_mobile_2015-11.xlsx</a></li>
<li><a href="http://www.av-comparatives.org/wp-content/uploads/2015/12/avc_prot_2015b_en.pdf" target="_blank" rel="external">http://www.av-comparatives.org/wp-content/uploads/2015/12/avc_prot_2015b_en.pdf</a></li>
</ol>
<p>They evaluate products on various features and abilities such as:</p>
<ol>
<li>% of malware detected (detection rates)</li>
<li>% of good apps detected as malware (false positives)</li>
<li>ability to detect new and unknown threats (0day detections)</li>
<li>user-interface and usability</li>
<li>battery usage (for mobile devices)</li>
<li>other nice features: backup, device locate, remote wipe, remote lock, etc.</li>
</ol>
<p>Sounds good, doesn’t it? Where’s the problem here?, you may be wondering. I’ll just cut straight to the heart of it. Let’s start at #1, detection rates, the most critical metric. <em>How can an AV test determine this?</em> How can they possibly know how much malware an AV product detects and misses? First off, they would need a sample set of <em>known</em> malware to run through the AV scanner. Hmm. But that can’t be right. How can they make a malware sample set? How can they know what malware is? If they had perfect knowledge of what was malware and what wasn’t they would <em>be</em> an AV company not an AV <em>testing</em> company!</p>
<p>The truth is that AV testing companies have no clue how to detect malware. Instead, and this part is just pure gold, they rely on the <em>AV companies</em> to provide the malware samples. Sort of like if college students got to pick which questions were on the test.</p>
<p>Yeah. Just let that sink in for a minute. While you meditate on how fucked up that is, contemplate on the “appropriate” use of “ironic” quotes:</p>
<p><img src="https://i.imgur.com/K8AFzev.png" alt="ironic quotes"></p>
<h3 id="Problem-1-Black-Magic"><a href="#Problem-1-Black-Magic" class="headerlink" title="Problem 1: Black Magic"></a>Problem 1: Black Magic</h3><p>Right off the bat, the objectivity of the test is seriously compromised. Different AV companies submit their samples and somehow the AV test has to somehow figure out which ones are actually malware and which ones are false positives from the AV company. How does it achieve such a feat? I’m assuming it has something to do with many Excel spreadsheets, animal sacrifice, and <em>fucking witchery</em>.</p>
<p>There was one time I found an entirely new family of sneaky malware that no one else detected. So we submitted some as test samples. Since everyone <em>except us</em> missed it, they took it out of the sample set. Because, you know, it must not be malware, right?</p>
<p><img src="https://i.imgur.com/VAsfyWg.jpg" alt="its magic"></p>
<h3 id="Problem-2-Biased-Against-Small-Companies"><a href="#Problem-2-Biased-Against-Small-Companies" class="headerlink" title="Problem 2: Biased Against Small Companies"></a>Problem 2: Biased Against Small Companies</h3><p>Not all companies have the time or resources to curate and submit test samples, so that only leaves the big companies. And you can be absolutely 100% sure the big companies have test machines setup to run samples through the competition so they know exactly what samples the other AV products are likely to miss. Because of this, the sample set is biased against companies which don’t bother or can’t afford to do “offensive sample testing”. I’ve been at conferences and talked with people enough to learn that some companies spend millions of dollars and have entire teams just for winning these tests. That’s money and resources <em>not</em> going to improving the product and protecting the customer.</p>
<h3 id="Problem-3-Unrealistic-Samples"><a href="#Problem-3-Unrealistic-Samples" class="headerlink" title="Problem 3: Unrealistic Samples"></a>Problem 3: Unrealistic Samples</h3><p>The sample sets used in these tests are completely unrealistic. It’s usually a bunch of samples from a few families no one ever actually encounters in the wild. Where I worked, ~0.3% of our test misses were actually encountered by users. That means 99.7% of the test samples were never seen <em>once</em> by <em>any</em> of our customers.</p>
<p>Since the number of families used in the sample set is not nearly representative of the number of actual families spreading in the wild, if an AV company misses one family, they could miss a lot of samples. It’s like when one paragraph from a single chapter in a book is used to make 99.7% of the test.</p>
<p>I remember when I saw Microsoft Security Essentials massively fail a particular AV test and was amazed by their badass response:<br><a href="https://blogs.technet.microsoft.com/mmpc/2014/01/17/key-lessons-learned-from-the-latest-test-results/" target="_blank" rel="external">https://blogs.technet.microsoft.com/mmpc/2014/01/17/key-lessons-learned-from-the-latest-test-results/</a></p>
<p>In this polished, polite, and diplomatic response, homeboy drops the mic with this little gem:</p>
<blockquote>
<p>Our review showed that 0.0033 percent of our Microsoft Security Essentials and Microsoft Forefront Endpoint Protection customers were impacted by malware samples not detected during the test. In addition, 94 percent of the malware samples not detected during the test didn’t impact our customers.</p>
</blockquote>
<p>I don’t want to be accused of putting words in anyone’s mouth, but this basically says “y’alls test is bunk lol whatever”.</p>
<h3 id="Problem-4-Not-All-Detections-Are-Equal"><a href="#Problem-4-Not-All-Detections-Are-Equal" class="headerlink" title="Problem 4: Not All Detections Are Equal"></a>Problem 4: Not All Detections Are Equal</h3><p>If an app with ads is infected with the most malicious, vile, and insidious malware ever created by man is submitted to AV test as a sample, the tests have no way to distinguish between a detection of the ads and a detection of the actual malware. What you end up with is every product scurrying around to aggressively detect adware. Also, this creates an incentive to create broad, noisy signatures which detect just about anything possibly bad. These “weak detections” usually read like as “This application smells funny and might be bad, but we’re not saying it’s bad. We don’t know. Don’t break eye contact! Good luck!”.</p>
<p><img src="https://i.imgur.com/TZSHLqV.jpg" alt="unequal"></p>
<h2 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h2><p>Because good testing is so hard, people will continue to pick what AV product they use based on reading tea leaves, chicken bones, PCMagazine articles, word of mouth, etc. Until quality can be better measured, AV companies will continue focus on marketing and winning these bullshit tests, or pretty much anything except for making their stuff better.</p>
<p>Good testing is needed and that requires a good sample set of relevant, recent, modern malware. But those best equipped for creating this ideal sample set are the same being tested, so a perfect solution may not be possible. One way to improve it would be if companies open sourced their detection data and samples from some of the most prevalent families. I’m not talking a download link on their main page, but if a security researcher or academic wanted a copy, they could contact the company and there would be a system in place to verify they’re legit and send them the goods. This would open up AV testing to competition and would also make the process more transparent. Another cool side effect is academics can stop using super old malware sample sets for research.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Everyone knows anti-virus products suck and you can say anti-virus sucks for many different reasons and at different levels. You could start with obvious, surface level reasons: anti-virus software (AV) sucks because it’s slow, klunky, self-advertising garbage that slows your machine down. From there, you could move on to more perceptive complaints such as how it hardly ever detects new malware and almost certainly will not detect fancypants, bespoke, advanced persistent threats (APT). You could still deeper and claim that there’s something wrong with an industry that thrives on selling people fear and selling companies mere compliance so their insurance doesn’t laugh in their faces when they try to collect after getting their gibson’s backdoor hacked.&lt;/p&gt;
&lt;p&gt;The obvious question is then &lt;em&gt;why&lt;/em&gt; do AV products suck? Malware is a big problem that costs people money and heartache all the time. Why isn’t this solved better? Need to understand the problem at the most fundamental level. For me, this means understanding the condition in terms of economics principals–incentives, constraints, market forces at work, and so on. Once you understand something at this level, you can usually extrapolate most of the symptoms yourself and, importantly, you’ll have a much better idea of how to actually &lt;em&gt;fix&lt;/em&gt; it. This brings me to my main thesis: &lt;strong&gt;AV software sucks because it’s impossible for the market to be informed and to meaningfully differentiate between products and objectively determine which one is better.&lt;/strong&gt; Because of this, there isn’t much incentive for companies to make lean, clean, optimized, AV products with amazing, complex detection capabilities and behavior analysis. They can’t compete on quality, because people can’t tell the difference between great and crap, so they have to compete on sales and advertising.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://usercontent1.hubimg.com/3675524_f520.jpg&quot; alt=&quot;fearmongering&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="realtalk" scheme="https://CalebFenton.github.io/tags/realtalk/"/>
    
      <category term="anti-virus" scheme="https://CalebFenton.github.io/tags/anti-virus/"/>
    
  </entry>
  
  <entry>
    <title>What happens when a DEX includes a framework class?</title>
    <link href="https://CalebFenton.github.io/2015/12/21/what-happens-when-a-dex-includes-a-framework-class/"/>
    <id>https://CalebFenton.github.io/2015/12/21/what-happens-when-a-dex-includes-a-framework-class/</id>
    <published>2015-12-22T04:13:40.000Z</published>
    <updated>2016-07-15T05:26:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Why"><a href="#Why" class="headerlink" title="Why"></a>Why</h2><p>While working on a new class loading system for <a href="https://github.com/CalebFenton/simplify/tree/master/smalivm" target="_blank" rel="external">SmaliVM</a>, I needed to understand exactly how DalvikVM handles the case of a DEX file including a system / framework class such as <code>Ljava/lang/Object;</code>. I’d originally assumed, naively, in retrospect, that class files in a DEX file should take precedence. Thinking about this for a half second, I have no idea what the hell I was thinking. That would be <em>stupid</em>.<br><a id="more"></a></p>
<p>If Dalvik let apps redefine framework classes, it has huge security implications. Sure, each app runs it its own zygote-spawned sandbox, but what if somewhere, somehow, my malicious app’s DEX file was loaded by an app with system or root access? I could just backdoor <code>Ljava/lang/Object;</code>. Even if that’s not possible, I’m sure I could think of something nefarious if you gave me the ability to backdoor any class.</p>
<p>Well, derp, so now I have to rewrite part of <a href="https://github.com/CalebFenton/simplify" target="_blank" rel="external">Simplify</a> and (hopefully) fix some tests. I might as well know exactly how it fails and document it for other researchers, right?</p>
<h2 id="How"><a href="#How" class="headerlink" title="How"></a>How</h2><p>First, I created two small Smali files.</p>
<p>smali/<strong>hello.smali</strong>:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.class</span><span class="keyword"> public</span> <span class="class">LHelloWorld;</span></div><div class="line"><span class="keyword">.super</span> <span class="class">Ljava/lang/Object;</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> main([<span class="class">Ljava/lang/String;</span>)V</div><div class="line"><span class="keyword">    .locals</span> 2</div><div class="line"></div><div class="line">   <span class="built_in"> sget-object </span>v0, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></div><div class="line">   <span class="built_in"> const-string </span>v1, <span class="string">"hello,world!"</span></div><div class="line">   <span class="built_in"> invoke-virtual </span>&#123;v0, v1&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V</div><div class="line"></div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div></pre></td></tr></table></figure>
<p>The purpose of this is just to provide a <code>main(String[])</code> method and to have <code>Object</code> as a <code>super</code>.</p>
<p>smali/<strong>object.smali</strong>:</p>
<figure class="highlight smali"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">.class</span> <span class="class">Ljava/lang/Object;</span></div><div class="line"></div><div class="line"><span class="keyword">.method</span><span class="keyword"> public</span><span class="keyword"> static</span> &lt;clinit&gt;()V</div><div class="line"><span class="keyword">    .locals</span> 2</div><div class="line"></div><div class="line">   <span class="built_in"> sget-object </span>v0, <span class="class">Ljava/lang/System;</span>-&gt;out:<span class="class">Ljava/io/PrintStream;</span></div><div class="line">   <span class="built_in"> const-string </span>v1, <span class="string">"crazyballs"</span></div><div class="line">   <span class="built_in"> invoke-virtual </span>&#123;v0, v1&#125;, <span class="class">Ljava/io/PrintStream;</span>-&gt;println(<span class="class">Ljava/lang/String;</span>)V</div><div class="line"></div><div class="line">   <span class="built_in"> return-void</span></div><div class="line"><span class="keyword">.end method</span></div></pre></td></tr></table></figure>
<p>This is the real test. If I can overwrite framework classes, I should get a lot of errors, duh, but not before <code>&lt;clinit&gt;</code> prints out something witty.</p>
<p>After that, it was just packing it up and shoving it onto an emulator:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ smali smali -o classes.dex</div><div class="line">$ zip hello.zip classes.dex</div><div class="line">  adding: classes.dex (deflated 47%)</div><div class="line">$ adb push hello.zip /data/<span class="built_in">local</span></div></pre></td></tr></table></figure>
<p>I’ll also wanted to see the error explosions in the logs. You’d be surprised how many people have an app crash or something and don’t bother looking at the logs. <code>monitor</code> is your friend. It usually has bad news, and confuses Eclipse and IntelliJ if it’s running, but at least it’s honest.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ monitor &amp;<span class="built_in">disown</span></div></pre></td></tr></table></figure>
<p>Finally, just invoke <code>dalvikvm</code> with our ZIP as the classpath:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ adb shell</div><div class="line">root@android:/ <span class="comment"># cd /data/local</span></div><div class="line">root@android:/data/<span class="built_in">local</span> <span class="comment"># dalvikvm -cp hello.zip HelloWorld</span></div><div class="line">hello,world!</div><div class="line">root@android:/data/<span class="built_in">local</span> <span class="comment">#</span></div></pre></td></tr></table></figure>
<p>No <code>&quot;crazyballs&quot;</code>, so I guess my hunch was right. I wonder what the error looked like?</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">12</span><span class="number">-21</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">22.035</span>: <span class="keyword">D</span>/dalvikvm(<span class="number">1065</span>): DexOpt: --- BEGIN <span class="string">'hello.zip'</span> (bootstrap=<span class="number">0</span>) ---</div><div class="line"><span class="number">12</span><span class="number">-21</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">22.095</span>: <span class="keyword">D</span>/dalvikvm(<span class="number">1066</span>): DexOpt: <span class="string">'Ljava/lang/Object;'</span> has an earlier definition; blocking out</div><div class="line"><span class="number">12</span><span class="number">-21</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">22.095</span>: <span class="keyword">D</span>/dalvikvm(<span class="number">1066</span>): DexOpt: not verifying/optimizing <span class="string">'Ljava/lang/Object;'</span>: multiple definitions</div><div class="line"><span class="number">12</span><span class="number">-21</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">22.115</span>: <span class="keyword">D</span>/dalvikvm(<span class="number">1066</span>): DexOpt: load <span class="number">14</span>ms, verify+opt <span class="number">11</span>ms, <span class="number">83668</span> bytes</div><div class="line"><span class="number">12</span><span class="number">-21</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">22.115</span>: <span class="keyword">D</span>/dalvikvm(<span class="number">1065</span>): DexOpt: --- END <span class="string">'hello.zip'</span> (success) ---</div><div class="line"><span class="number">12</span><span class="number">-21</span> <span class="number">11</span>:<span class="number">07</span>:<span class="number">22.115</span>: <span class="keyword">D</span>/dalvikvm(<span class="number">1065</span>): DEX prep <span class="string">'hello.zip'</span>: unzip in <span class="number">2</span>ms, rewrite <span class="number">75</span>ms</div></pre></td></tr></table></figure>
<p>If you read between the lines, the actual error message is “has an earlier definition; blocking out (idiot)”.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;While working on a new class loading system for &lt;a href=&quot;https://github.com/CalebFenton/simplify/tree/master/smalivm&quot;&gt;SmaliVM&lt;/a&gt;, I needed to understand exactly how DalvikVM handles the case of a DEX file including a system / framework class such as &lt;code&gt;Ljava/lang/Object;&lt;/code&gt;. I’d originally assumed, naively, in retrospect, that class files in a DEX file should take precedence. Thinking about this for a half second, I have no idea what the hell I was thinking. That would be &lt;em&gt;stupid&lt;/em&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
  </entry>
  
</feed>
