<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Caleb Fenton&#39;s Blog</title>
  <subtitle>Think Like An Attacker</subtitle>
  <link href="/rss2.xml" rel="self"/>
  
  <link href="https://CalebFenton.github.io/"/>
  <updated>2016-04-27T20:13:46.000Z</updated>
  <id>https://CalebFenton.github.io/</id>
  
  <author>
    <name>Caleb Fenton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Code Kata: Bloom Filter</title>
    <link href="https://CalebFenton.github.io/2016/04/26/code-kata-bloom-filter/"/>
    <id>https://CalebFenton.github.io/2016/04/26/code-kata-bloom-filter/</id>
    <published>2016-04-27T02:11:11.000Z</published>
    <updated>2016-04-27T20:13:46.000Z</updated>
    
    <content type="html">&lt;p&gt;If you’re unfamiliar with what a Code Kata is, check out my previous post &lt;a href=&quot;/2016/04/23/code-kata-tdd-and-run-length-encoding/&quot;&gt;Code Kata: TDD and Run-length Encoding&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The goal for this kata is to learn an unfamiliar data structure. It’s called a bloom filter. I’ve read the Wikipedia article and have used them, but until I’ve made it myself I don’t understand it deeply. The more fundamental my understanding, the more flexible I can be in applying a concept. It’s just like calculus. There’s a world of difference between merely memorizing a formula and having a deep, intuitive understanding.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;What_is_a_bloom_filter_3F&quot;&gt;&lt;a href=&quot;#What_is_a_bloom_filter_3F&quot; class=&quot;headerlink&quot; title=&quot;What is a bloom filter?&quot;&gt;&lt;/a&gt;What is a bloom filter?&lt;/h1&gt;&lt;p&gt;A bloom filter has two methods:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;add&lt;/code&gt; - adds an element&lt;/li&gt;
&lt;li&gt;&lt;code&gt;check&lt;/code&gt; / &lt;code&gt;include&lt;/code&gt; - false if an element is &lt;em&gt;definately not&lt;/em&gt; in the filter, true if it &lt;em&gt;possibly&lt;/em&gt; is&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This is a &lt;em&gt;probabilistic&lt;/em&gt; data structure. It can say if an element is &lt;em&gt;definately not&lt;/em&gt; in the set (no false negative), but it may say an element is in the set which isn’t (false positive). The trade off for this uncertainty is that even for large sets the bloom filter is relatively much smaller and faster than storing looking up in a complete set.&lt;/p&gt;
&lt;p&gt;I’m going to assume you’re familiar with the technical aspects of the bloom filter. Others have already done a great job of explaining how they work.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Easy to read description: &lt;a href=&quot;http://billlaboon.com/probabilistic-data-structures-part-i-bloom-filters/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://billlaboon.com/probabilistic-data-structures-part-i-bloom-filters/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Description plus a cool interactive visual aid: &lt;a href=&quot;https://www.jasondavies.com/bloomfilter/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.jasondavies.com/bloomfilter/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;When_to_use_a_bloom_filter_3F&quot;&gt;&lt;a href=&quot;#When_to_use_a_bloom_filter_3F&quot; class=&quot;headerlink&quot; title=&quot;When to use a bloom filter?&quot;&gt;&lt;/a&gt;When to use a bloom filter?&lt;/h1&gt;&lt;p&gt;It’s usefulness is not as obvious as an &lt;code&gt;Array&lt;/code&gt; or &lt;code&gt;Hash&lt;/code&gt;, but there are situations where expensive I/O operations can be skipped for elements definitely not in the filter, and only done if an element may be in the present.&lt;/p&gt;
&lt;p&gt;Example time. Let’s say you’re analyzing Android applications and want to know which strings are unique to a given app. This is important for automated signature generation for malware detection. You must use strings &lt;em&gt;endemic&lt;/em&gt; to a particular sample so the signature won’t false positive. Let’s also assume you already have a few million Android apps and their strings. The simple approach is to extract and store strings and their frequencies. The distribution of string frequencies has a long tail. Some strings are in almost every app, but most are only in a small number of apps. Also, most of the strings for any given app are in almost every app. When analyzing an application, each string frequency is looked up to see if it’s under some threshold. These lookups are expensive.&lt;/p&gt;
&lt;p&gt;To improve on this, you create a bloom filter and add the common strings. Now, instead of checking the frequency of every string with an expensive table lookup, you check the bloom filter &lt;em&gt;first&lt;/em&gt;. Most lookups are thus eliminated. The trade off is some genuinely uncommon strings are considered as common. In this situation, for this scenario, that’s fine. If there’s difficulty finding enough unique strings, you can skip the bloom filter and lookup each string. This won’t happen often so it’s an acceptable cost.&lt;/p&gt;
&lt;p&gt;More example uses for bloom filters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.quora.com/What-are-the-best-applications-of-Bloom-filters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.quora.com/What-are-the-best-applications-of-Bloom-filters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://stackoverflow.com/questions/4282375/what-is-the-advantage-to-using-bloom-filters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://stackoverflow.com/questions/4282375/what-is-the-advantage-to-using-bloom-filters&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Kata_3A_Bloom_Filter&quot;&gt;&lt;a href=&quot;#Kata_3A_Bloom_Filter&quot; class=&quot;headerlink&quot; title=&quot;Kata: Bloom Filter&quot;&gt;&lt;/a&gt;Kata: Bloom Filter&lt;/h1&gt;&lt;h2 id=&quot;Day_1&quot;&gt;&lt;a href=&quot;#Day_1&quot; class=&quot;headerlink&quot; title=&quot;Day 1&quot;&gt;&lt;/a&gt;Day 1&lt;/h2&gt;&lt;p&gt;I’m only giving myself 30 minutes, so I’m going to keep it basic. First, I’ll setup a Ruby project with RSpec. I’ve covered how to do this in my last kata, here: &lt;a href=&quot;https://blog.srcclr.com/code-kata-tdd-run-length-encoding/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blog.srcclr.com/code-kata-tdd-run-length-encoding/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Normally, I’d start with tests, but as I found in my last kata, strict TDD of algorithms is hard. I’d rather prototype the algorithm then hit it with tests. If it were just engineering code, I’d consider testing first.&lt;/p&gt;
&lt;p&gt;I start by quickly reviewing a few articles on how they work. That takes a few minutes. All I really need is an array, preferably a bitset, and some hashing methods. I don’t want to spend time worrying about efficient storage, and I don’t want to pull in any libraries until I get it to work. I’ll just use a plain array. I pick 100 elements as a starting size because it’s close to some numbers I’ve seen while reading about it.&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;BloomFilter&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(size = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        @bitset = Array.new(size, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now, I need some hashing methods. The only important property of the hash functions is that they are evenly distributed. A quick review of the String reveals &lt;code&gt;String#hash&lt;/code&gt; which looks idea, and &lt;code&gt;String#sum&lt;/code&gt; which looks less ideal. I figure it’s good enough for now. Perfect is the enemy of good.&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hash(s).each &amp;#123; &lt;span class=&quot;params&quot;&gt;|h|&lt;/span&gt; @bitset[h] = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    h1 = s.hash % @bitset.size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    h2 = s.sum % @bitset.size&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    [h1, h2]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;To wrap it up, add a method to check if an element is possibly in the filter:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(s)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    hash(s).each &amp;#123; &lt;span class=&quot;params&quot;&gt;|h|&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; @bitset[h] == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;With only a few minutes left, I wrote a little benchmarking code to make sure it all worked:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Add lots of random strings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;length = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;strings = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;.times &amp;#123; strings &amp;lt;&amp;lt; rand(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt; ** length).to_s(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b = BloomFilter.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;strings.each &amp;#123; &lt;span class=&quot;params&quot;&gt;|s|&lt;/span&gt; b.add s &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Make sure they&#39;re all possibly included&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;strings.each &amp;#123; &lt;span class=&quot;params&quot;&gt;|s|&lt;/span&gt; puts &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;s&amp;#125;&lt;/span&gt; should be included but isn&#39;t&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;unless&lt;/span&gt; b.&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;? s &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Rough check of false positives&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;other_strings = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;.times &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string = rand(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt; ** (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + rand(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;))).to_s(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; strings.&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;? string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    other_strings &amp;lt;&amp;lt; string&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;fps = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;other_strings.each &amp;#123; &lt;span class=&quot;params&quot;&gt;|s|&lt;/span&gt; fps += &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; b.&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;? s &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;puts &lt;span class=&quot;string&quot;&gt;&quot;False positive %: &lt;span class=&quot;subst&quot;&gt;#&amp;#123;&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt; * (fps / other_strings.size)&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;Day_2&quot;&gt;&lt;a href=&quot;#Day_2&quot; class=&quot;headerlink&quot; title=&quot;Day 2&quot;&gt;&lt;/a&gt;Day 2&lt;/h2&gt;&lt;p&gt;I read a bit more about bloom filters. I learn there are a few tunable parameters, and some advanced implementations that allow for removal of elements. The advanced stuff looks way out of the scope of a 30 minute session. I’m thinking that a 30 minute kata isn’t a good way to learn anything complicated. You’d need a few solid hours of uninterrupted study to digest anything heavy. For my goal of deepening my understanding of bloom filters, it’s enough. There are two main tunable aspects of the bloom filter:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Size of the array, usually &lt;em&gt;m&lt;/em&gt;. ~16 bits per element regardless of element size to give 0.1% error rate.&lt;/li&gt;
&lt;li&gt;Number of hashing methods, usually &lt;em&gt;k&lt;/em&gt;. Three seems common.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I wanted to add some tests with randomly generated data. For example, generate 1,000 strings, add them all to a filter, and make sure they’re all possibly present. Then, generate 1,000 strings not in the original set and make sure none of them are present. I feel like that’s not a good unit test, because you’d have to &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;include?&lt;/code&gt; in the same test. I spent a lot of time trying to learn the relevant RSpec syntax to make it work.&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;bloom_filter&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;describe BloomFilter &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let(&lt;span class=&quot;string&quot;&gt;&#39;bf&#39;&lt;/span&gt;) &amp;#123; BloomFilter.new &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    describe &lt;span class=&quot;string&quot;&gt;&#39;#include?&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        it &lt;span class=&quot;string&quot;&gt;&#39;should include strings once added&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            strings = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;.times &amp;#123; strings &amp;lt;&amp;lt; rand(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt; ** (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + rand(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;))).to_s(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            strings.each &amp;#123; &lt;span class=&quot;params&quot;&gt;|s|&lt;/span&gt; bf.add s &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            strings.each &amp;#123; &lt;span class=&quot;params&quot;&gt;|s|&lt;/span&gt; expect(bf.&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;?(s)).to be &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        it &lt;span class=&quot;string&quot;&gt;&#39;should not include strings that are not added&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            strings = []&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;.times &amp;#123; strings &amp;lt;&amp;lt; rand(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt; ** (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; + rand(&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;))).to_s(&lt;span class=&quot;number&quot;&gt;36&lt;/span&gt;) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            strings.each &amp;#123; &lt;span class=&quot;params&quot;&gt;|s|&lt;/span&gt; expect(bf.&lt;span class=&quot;keyword&quot;&gt;include&lt;/span&gt;?(s)).to be &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I also moved the benchmark code out of the &lt;code&gt;BloomFilter&lt;/code&gt; class file and into it’s own file.&lt;/p&gt;
&lt;h2 id=&quot;Day_3&quot;&gt;&lt;a href=&quot;#Day_3&quot; class=&quot;headerlink&quot; title=&quot;Day 3&quot;&gt;&lt;/a&gt;Day 3&lt;/h2&gt;&lt;p&gt;Rewrote everything. Such practice. Much fast.&lt;/p&gt;
&lt;h2 id=&quot;Day_4&quot;&gt;&lt;a href=&quot;#Day_4&quot; class=&quot;headerlink&quot; title=&quot;Day 4&quot;&gt;&lt;/a&gt;Day 4&lt;/h2&gt;&lt;p&gt;Rewrote everything. Added an alias for &lt;code&gt;#&amp;lt;&amp;lt;&lt;/code&gt; so addition can be like &lt;code&gt;Array#&amp;lt;&amp;lt;&lt;/code&gt;. Renamed &lt;code&gt;include?&lt;/code&gt; to &lt;code&gt;test&lt;/code&gt; because it’s more honest, and shorter than &lt;code&gt;may_include?&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Day_5&quot;&gt;&lt;a href=&quot;#Day_5&quot; class=&quot;headerlink&quot; title=&quot;Day 5&quot;&gt;&lt;/a&gt;Day 5&lt;/h2&gt;&lt;p&gt;Optimization time. I updated the benchmarking code and saw that I wasn’t getting the false positive rate as low as I wanted. I suspected it was my hash functions. I replaced &lt;code&gt;String#sum&lt;/code&gt; with two over-kill cryptographic digests &lt;code&gt;MD5&lt;/code&gt; and &lt;code&gt;SHA1&lt;/code&gt;. I could have gotten away with something simpler, like &lt;code&gt;CRC32&lt;/code&gt; or &lt;code&gt;ADLER&lt;/code&gt;, but I had no internet and this is all I could divine by grepping through the Ruby installation.&lt;/p&gt;
&lt;p&gt;The effect was good though. It brought the error rate down an order of magnitude.&lt;/p&gt;
&lt;h1 id=&quot;Final_Thoughts&quot;&gt;&lt;a href=&quot;#Final_Thoughts&quot; class=&quot;headerlink&quot; title=&quot;Final Thoughts&quot;&gt;&lt;/a&gt;Final Thoughts&lt;/h1&gt;&lt;p&gt;I feel like I understand the bloom filter now. This includes a deeper appreciation for how much I don’t yet understand of advanced implementations of bloom filters. The simple, mindful practice of carefully writing Ruby was useful. Each time I rewrote it, it came faster and more easily and little optimizations were more apparent.&lt;/p&gt;
&lt;p&gt;The full project can be viewed here:&lt;br&gt;&lt;a href=&quot;https://github.com/CalebFenton/code_kata/tree/master/bloom_filter&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/CalebFenton/code_kata/tree/master/bloom_filter&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;If you’re unfamiliar with what a Code Kata is, check out my previous post &lt;a href=&quot;/2016/04/23/code-kata-tdd-and-run-length-encoding/&quot;&gt;Code Kata: TDD and Run-length Encoding&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The goal for this kata is to learn an unfamiliar data structure. It’s called a bloom filter. I’ve read the Wikipedia article and have used them, but until I’ve made it myself I don’t understand it deeply. The more fundamental my understanding, the more flexible I can be in applying a concept. It’s just like calculus. There’s a world of difference between merely memorizing a formula and having a deep, intuitive understanding.&lt;br&gt;
    
    </summary>
    
    
      <category term="code-kata" scheme="https://CalebFenton.github.io/tags/code-kata/"/>
    
      <category term="algorithm" scheme="https://CalebFenton.github.io/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>Reversing an Open Source Vulnerability</title>
    <link href="https://CalebFenton.github.io/2016/04/24/reversing-an-open-source-vulnerability/"/>
    <id>https://CalebFenton.github.io/2016/04/24/reversing-an-open-source-vulnerability/</id>
    <published>2016-04-24T07:00:00.000Z</published>
    <updated>2016-04-23T01:32:46.000Z</updated>
    
    <content type="html">&lt;p&gt;Vulnerability disclosures rarely include enough technical detail to reproduce the exploit. This is a &lt;em&gt;good&lt;/em&gt; thing. It wouldn’t do to arm every script kiddie with exact details of how to write an exploit with every disclosure. However, there are times when someone like an application security engineer or security researcher need to “reverse engineer” the disclosure to reconstruct the technical detail in order to fully understand the vulnerability or write an exploit to test systems for weakness.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Why_is_this_useful_3F&quot;&gt;&lt;a href=&quot;#Why_is_this_useful_3F&quot; class=&quot;headerlink&quot; title=&quot;Why is this useful?&quot;&gt;&lt;/a&gt;Why is this useful?&lt;/h1&gt;&lt;p&gt;When a vulnerability is found in an open source project, it’s often in a library. A vulnerability in a library could potentially affect &lt;em&gt;many&lt;/em&gt; applications, but it’s notoriously difficult to tell if an application is actually vulnerable just by using the vulnerable library. The application may not actually use any of the vulnerable code or be configured in such a way as to be vulnerable. Of course, this itself might not be obvious because the vulnerability disclosure may not fully explain these details, or it may even be wrong and say that a library is vulnerable when the vulnerable code is in a dependency of the library! A company may be hesitant to upgrade a vulnerable library because of the cost, especially at large companies which have a lot of procedures in place around code changes. We’ve had customers tell us:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“You tell us we have this vulnerability, but we looked into it and aren’t using any of the vulnerable code, plus it would cost a million dollars to upgrade.” - Random J. Customer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This really surprised me when I first heard it, but it made sense after I remembered the time I tried to upgrade a gem in a large Rails project with lots of dependencies. Let me tell you, that is a path which leads quickly to &lt;a href=&quot;https://en.wikipedia.org/wiki/Dependency_hell&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Dependency hell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The cost of upgrading is only worth it if the system is &lt;em&gt;actually&lt;/em&gt; vulnerable, and the fastest, most direct way to test if a system is vulnerable is to &lt;em&gt;hit it with the actual exploit&lt;/em&gt;. This type of test exploit is usually called a &lt;strong&gt;PoC&lt;/strong&gt; (proof of concept). To make a PoC, you really have to understand the nitty-gritty details of the vulnerability. And if a PoC isn’t possible, understanding the vulnerability will help you determine if an application is truly vulnerable.&lt;/p&gt;
&lt;p&gt;Of course, there are also secondary advantages such as education for engineers and security researchers. Understanding the vulnerability can help a developer avoid making the same mistakes. Researchers can use the knowledge to search for and discover (and responsibly disclose) similar vulnerabilities.&lt;/p&gt;
&lt;h1 id=&quot;How_it_u2019s_Done&quot;&gt;&lt;a href=&quot;#How_it_u2019s_Done&quot; class=&quot;headerlink&quot; title=&quot;How it’s Done&quot;&gt;&lt;/a&gt;How it’s Done&lt;/h1&gt;&lt;p&gt;There are three main challenges to reversing a vulnerability:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Find the fix&lt;/li&gt;
&lt;li&gt;Understand the fix&lt;/li&gt;
&lt;li&gt;Create a PoC&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Finding_the_Fix&quot;&gt;&lt;a href=&quot;#Finding_the_Fix&quot; class=&quot;headerlink&quot; title=&quot;Finding the Fix&quot;&gt;&lt;/a&gt;Finding the Fix&lt;/h2&gt;&lt;p&gt;This is the most important and complex of all three steps. Sometimes it’s easy, and the public disclosure links right to the commit hash, and sometimes it’s hard because you spend hours digging through a repository’s commit messages only to find a commit with the message “update pom.xml” that does indeed update the pom file but also sneaks in the actual fix (true story). Some open source groups such as Apache are quite good at linking their vulnerability disclosures to fix commit or at least a link to an issue tracker like JIRA with more details and usually links back to commits. On the other hand, some open source communities go out of their way to hide the fix because they believe it would help the bad guys.&lt;/p&gt;
&lt;p&gt;While it’s true that the fix &lt;em&gt;would&lt;/em&gt; allow attackers to more easily understand the details of the exploit, I personally believe that any attacker sophisticated and motivated enough to analyze the source code to extrapolate a weaponized exploit is going to find the fix &lt;em&gt;with or without&lt;/em&gt; help. Making the fix obvious makes a lot of legitimate endeavors easier, such as allowing package maintainers to back-port fixes to older, unmaintained versions and, of course, all the reasons I mentioned at the beginning of the post.&lt;/p&gt;
&lt;p&gt;The first place to look for the fix is the disclosure. Read it carefully and understand it. Try and read the documentation about any features it mentions. This context will help you find and understand the fix commit, which is necessary to make the PoC. The disclosure will likely have some good keywords for searching if the exact fix commit or relevant issue tracker IDs aren’t referenced.&lt;/p&gt;
&lt;p&gt;Let’s assume there is a disclosure which has very little information and you must start searching for the fix yourself. One critical piece of information should already be obvious: the fixed version. You at least know one of the commits in version has the fix. Unfortunately, there may be several hundred commits and each one is changing all kinds of stuff and you have no idea what’s going on in the code base. You need to filter down the commits to look through. First, read the disclosure, and keep this stuff in mind:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Is the fix in code or configuration?&lt;/li&gt;
&lt;li&gt;Are any classes specifically named?&lt;/li&gt;
&lt;li&gt;Are any features specifically named?&lt;/li&gt;
&lt;li&gt;Is there a mantainer’s name associated with the advisory? Maybe they did the fix also.&lt;br&gt;Sometimes there is only one or two committers who fix security bugs.&lt;/li&gt;
&lt;li&gt;The fix happened &lt;em&gt;before&lt;/em&gt; the public disclosure. Any commit after the advisory won’t contain the fix.&lt;/li&gt;
&lt;li&gt;If the fixed version is a hot fix release (e.g. 1.2.3 -&amp;gt; 1.2.3.1), there are probably only a few changes to look through.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Next, try and get lucky by searching Google. Maybe someone else has already done all the hard work and there’s a blog post and a working PoC or Metasploit module just waiting for you. Fat chance, though. &lt;a href=&quot;https://srcclr.com/security/deserialization-untrusted-data/java/s-1893&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Explaining&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/overwritable-http-request-headers/ruby/s-1894&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;a&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/smtp-injection-attack-due-to-improper/ruby/s-1895&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;vulnerability&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/session-state-modification-when-wildcard/java/s-757&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;is&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/class-loader-manipulation-with/java/s-758&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;hard&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/class-loader-manipulation/java/s-759&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;and&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/remote-classloader-manipulation/java/s-770&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;not&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/cross-site-scripting-xss-through/javascript/s-1878&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;many&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/denial-service-dos-cpu-consumption/java/s-965&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;just&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/denial-service-dos-cpu-consumption/java/s-1442&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;give&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/cross-site-scripting-xss-through/ruby/s-1689&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;them&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/remote-code-execution-through-object/java/s-1710&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;out&lt;/a&gt; &lt;a href=&quot;https://srcclr.com/security/remote-code-execution-through-directory/java/s-1761&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;for&lt;/a&gt; &lt;a href=&quot;https://49.media.tumblr.com/e245b81c8c295d5596a2a883db2fc5a0/tumblr_n33tqolEEM1s0my1wo1_400.gif&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;free&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If the open source project has an issue tracker, try searching that. Use keywords from the advisory or search for issues created within a few weeks before the advisory was published. Depending on how strict the maintainers are about using their issue tracker, it may also be possible to filter for affected versions.&lt;/p&gt;
&lt;p&gt;You can also search the git logs. My favorite ways to search are:&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; --&lt;span class=&quot;keyword&quot;&gt;all&lt;/span&gt; -i --&lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;exploit keyword&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;git &lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt; --since=&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2015&lt;/span&gt; --before &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt; -i --&lt;span class=&quot;keyword&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;keywords&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;--all&lt;/code&gt; searches through all branches. This can be necessary when the fix only appears on a certain branch, since you probably wont know which one. And the &lt;code&gt;-i&lt;/code&gt; tells grep to be case insensitive.&lt;/p&gt;
&lt;p&gt;A great technique is to compare the commits between the fixed version and the version right before that. This can be accessed on GitHub by going to the Releases for a project. For example, &lt;a href=&quot;https://github.com/apache/storm/releases&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Apache Storm Releases&lt;/a&gt;.&lt;br&gt;&lt;img src=&quot;/images/reversing-open-source-vuln/release_list.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;First, select the tag &lt;em&gt;before&lt;/em&gt; the fixed version. Let’s say &lt;a href=&quot;https://github.com/apache/storm/releases/tag/v0.10.0-beta&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v0.10.0-beta&lt;/a&gt; is the tag right before the fix and v0.10.0-beta1 contains the fix. There is a link on the release page which says “1892 commits to master since this tag”.&lt;br&gt;&lt;img src=&quot;/images/reversing-open-source-vuln/release_before_fix.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;That link will compare that release with master. In this example, it’s &lt;a href=&quot;https://github.com/apache/storm/compare/v0.10.0-beta...master&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/apache/storm/compare/v0.10.0-beta1…master&lt;/a&gt;. Notice the &lt;code&gt;v0.10.0-beta...master&lt;/code&gt;. Change this to &lt;code&gt;v0.10.0-beta...v0.10.0-beta1&lt;/code&gt; to get this link: &lt;a href=&quot;https://github.com/apache/storm/compare/v0.10.0-beta...v0.10.0-beta1&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/apache/storm/compare/v0.10.0-beta…v0.10.0-beta1&lt;/a&gt;.&lt;br&gt;&lt;img src=&quot;/images/reversing-open-source-vuln/comparing_changes.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Understanding_the_Fix&quot;&gt;&lt;a href=&quot;#Understanding_the_Fix&quot; class=&quot;headerlink&quot; title=&quot;Understanding the Fix&quot;&gt;&lt;/a&gt;Understanding the Fix&lt;/h2&gt;&lt;p&gt;Ok, so you found the fix commit, or what you think and hope is the fix commit. Great. Now you just need to understand what the change was and how it affected the code. For this, you are going to want to setup an environment for the project. You want to be able to compile, run and debug whatever it is.&lt;/p&gt;
&lt;p&gt;Apart from this, there’s not much I can say. Read the commit message carefully. Good luck!&lt;/p&gt;
&lt;h2 id=&quot;Creating_a_PoC&quot;&gt;&lt;a href=&quot;#Creating_a_PoC&quot; class=&quot;headerlink&quot; title=&quot;Creating a PoC&quot;&gt;&lt;/a&gt;Creating a PoC&lt;/h2&gt;&lt;p&gt;If you didn’t need a working environment to understand the fix, you will likely need one to create the PoC. It’s almost impossible to simply read the code and produce a working PoC. It will take several iterations.&lt;/p&gt;
&lt;p&gt;Many PoCs are written in Ruby or Python because they’re flexible and don’t require a lot of structure and planning to get something complex up and running. You could even use the &lt;a href=&quot;https://www.offensive-security.com/metasploit-unleashed/building-module/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;metasploit framework&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Whatever you do, just remember the PoC won’t make sense to you a few days or weeks from now. Do yourself a favor and document any of the weird strangeness you encounter for future reference. Since your PoC code is exploiting an edge case that eluded developers, there is likely going to be some strangeness. Writing clear and useful comments will also help you understand what is going on.&lt;/p&gt;
&lt;p&gt;Also, if you want your PoC to look legit or just for bonus points,  use the standard “[*]” and “[!]” notation for output. For example:&lt;/p&gt;
&lt;figure class=&quot;highlight prolog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;[*] &lt;span class=&quot;symbol&quot;&gt;Connecting&lt;/span&gt; to server ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[*] &lt;span class=&quot;symbol&quot;&gt;Building&lt;/span&gt; malicious payload ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[*] &lt;span class=&quot;symbol&quot;&gt;Sending&lt;/span&gt; payload over port &lt;span class=&quot;number&quot;&gt;1434&lt;/span&gt; ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[!] &lt;span class=&quot;symbol&quot;&gt;Remote&lt;/span&gt; target exploited successfully! &lt;span class=&quot;symbol&quot;&gt;Target&lt;/span&gt; is vulnerable.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Vulnerability disclosures rarely include enough technical detail to reproduce the exploit. This is a &lt;em&gt;good&lt;/em&gt; thing. It wouldn’t do to arm every script kiddie with exact details of how to write an exploit with every disclosure. However, there are times when someone like an application security engineer or security researcher need to “reverse engineer” the disclosure to reconstruct the technical detail in order to fully understand the vulnerability or write an exploit to test systems for weakness.&lt;br&gt;
    
    </summary>
    
    
      <category term="security" scheme="https://CalebFenton.github.io/tags/security/"/>
    
      <category term="open source" scheme="https://CalebFenton.github.io/tags/open-source/"/>
    
  </entry>
  
  <entry>
    <title>Code Kata: TDD and Run-length Encoding</title>
    <link href="https://CalebFenton.github.io/2016/04/23/code-kata-tdd-and-run-length-encoding/"/>
    <id>https://CalebFenton.github.io/2016/04/23/code-kata-tdd-and-run-length-encoding/</id>
    <published>2016-04-24T02:26:04.000Z</published>
    <updated>2016-04-23T01:32:30.000Z</updated>
    
    <content type="html">&lt;p&gt;A &lt;em&gt;kata&lt;/em&gt; is a martial arts training method. It’s a set of detailed and choreographed movements and poses. The movements are performed repeatedly and internalized. A &lt;em&gt;code kata&lt;/em&gt; is is a training method for developing skill in programming. Take something you do frequently, or wish to do better, strip away everything not essential, and practice it repeatedly.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I was introduced to code katas by &lt;a href=&quot;https://twitter.com/OngEmil&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;@OngEmil&lt;/a&gt; who’s one of the best engineers I’ve ever met. The law of broscience teaches us that “Emil is good implies his advice is true”, so I took it seriously and started practicing and I feel like they’re a useful learning tool to understand.&lt;/p&gt;
&lt;p&gt;Example code kata:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Build a trivial Ruby project with Gemfile and specs&lt;/li&gt;
&lt;li&gt;Write a program which uses an unfamiliar data structure, e.g. &lt;a href=&quot;http://billmill.org/bloomfilter-tutorial/&quot; target=&quot;_blank&quot;&gt;bloom filter&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Implement an unfamiliar algorithm, e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Dijkstra%27s_algorithm#Pseudocode&quot; target=&quot;_blank&quot;&gt;shortest path&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Create a new Android project from scratch&lt;/li&gt;
&lt;li&gt;Practice keyboard shortcuts for your favorite IDE&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Practicing kata combines the essential elements of skill development:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;break down a technique into the essentials&lt;/li&gt;
&lt;li&gt;learn by repetition&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The key elements of a code kata are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;short - should take fewer than 30 minutes, once competent&lt;/li&gt;
&lt;li&gt;essential - develops a desired or critical skill, or improves a weakness&lt;/li&gt;
&lt;li&gt;focused - depth rather than breadth&lt;/li&gt;
&lt;li&gt;challenging - if it’s not challenging, you either aren’t focused, or the problem is too easy&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;Why_use_katas_3F&quot;&gt;&lt;a href=&quot;#Why_use_katas_3F&quot; class=&quot;headerlink&quot; title=&quot;Why use katas?&quot;&gt;&lt;/a&gt;Why use katas?&lt;/h1&gt;&lt;p&gt;You have to practice to get good at anything. Efficient practice focuses on just a few essentials – do this kick five thousand times, play these scales for an hour, lift this weight eight times, etc. This is intuitive, yet with the skill &lt;em&gt;programming&lt;/em&gt;, most never consider applying the same systematic approach. Many programmers think the key to good programming is about &lt;em&gt;intelligence&lt;/em&gt;, or they think it’s to just code a lot. It’s neither. The key is &lt;em&gt;correct practice&lt;/em&gt;. Intelligence helps, but programming is a craft, like carpentry. I doubt people think being intelligent is enough to be good at carpentry. Coding a lot also helps, but without guidance, effort is wasted. Code katas are an attempt to bring a systematic approach to developing programming skill.&lt;/p&gt;
&lt;h1 id=&quot;When_to_use_katas_3F&quot;&gt;&lt;a href=&quot;#When_to_use_katas_3F&quot; class=&quot;headerlink&quot; title=&quot;When to use katas?&quot;&gt;&lt;/a&gt;When to use katas?&lt;/h1&gt;&lt;p&gt;There are three main types of problem I think are amenable to kata training:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;common stuff - setting up a new project, keyboard shortcuts, IDE usage&lt;/li&gt;
&lt;li&gt;new skills - new language, data structure, algorithm&lt;/li&gt;
&lt;li&gt;weaknesses - something that slows you down&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For more on the philosophy and more examples of katas check out:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://codekata.com/&quot; target=&quot;_blank&quot;&gt;codekata.com&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.codekatas.org/&quot; target=&quot;_blank&quot;&gt;www.codekatas.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Kata_3A_Run_Length_Encoding&quot;&gt;&lt;a href=&quot;#Kata_3A_Run_Length_Encoding&quot; class=&quot;headerlink&quot; title=&quot;Kata: Run Length Encoding&quot;&gt;&lt;/a&gt;Kata: Run Length Encoding&lt;/h1&gt;&lt;p&gt;For this kata, I’ll be implementing &lt;a href=&quot;https://en.wikipedia.org/wiki/Run-length_encoding&quot; target=&quot;_blank&quot;&gt;run-length encoding&lt;/a&gt; using test-driven development. It’s simple, but not too simple. The goal is not to practice the algorithm, but to practice writing RSpec tests, and setting up the project. Originally, I tried doing a kata on using TDD to come up with an edit distance algorithm but found it to be a little too complex. I don’t think it’s always possible to get to an algorithm using TDD. I’m also going to be pretending to not know &lt;a href=&quot;http://rosettacode.org/wiki/Run-length_encoding#Ruby&quot; target=&quot;_blank&quot;&gt;regex&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;When performing a kata, be deliberate and focused. Take your time, and let these things sink in. Time box it to 30 minutes and stop if you go over. Start over again next time and you’ll be faster.&lt;/p&gt;
&lt;p&gt;First, create the directory and hop in:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;mkdir run_length&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; run_length&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Or, if you use &lt;em&gt;zsh&lt;/em&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;take run_length &lt;span class=&quot;comment&quot;&gt;# now you&#39;re cool&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I use &lt;a href=&quot;https://rvm.io/&quot; target=&quot;_blank&quot;&gt;RVM&lt;/a&gt; to manage having multiple Ruby and JRuby versions and multiple gemsets for each. A project can specify which Ruby version and gemset to use. When you navigate into that directory, RVM will automatically switch to that version.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; 2.2.1 &amp;gt; .ruby-version&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;echo&lt;/span&gt; run_length &amp;gt; .ruby-gemset&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; .&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Create a &lt;code&gt;Gemfile&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;source &lt;span class=&quot;string&quot;&gt;&#39;https://rubygems.org&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gem &lt;span class=&quot;string&quot;&gt;&#39;rspec&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;~&amp;gt; 3.0&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Since this is an empty gemset, need to install &lt;code&gt;bundler&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gem install bundler&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;bundle install&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Now, when can initialize rspec:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;rspec --init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Create a &lt;em&gt;minimal&lt;/em&gt; &lt;code&gt;lib/run_length.rb&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RunLength&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Create &lt;code&gt;spec/run_length_spec.rb&lt;/code&gt; with one test. I opted for a simple test not because it’s an edge case (empty input), but because it’s simple. I’ll avoid defensive programming, so I won’t test for input of unicode, input of numbers, etc.&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;run_length&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;describe RunLength &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    describe &lt;span class=&quot;string&quot;&gt;&#39;#get&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        let(&lt;span class=&quot;string&quot;&gt;&#39;get&#39;&lt;/span&gt;) &amp;#123; RunLength.get(string) &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        context &lt;span class=&quot;string&quot;&gt;&#39;with an empty string&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            let(&lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;) &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            subject&amp;#123; get &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            it &amp;#123; should eq &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;What do you know? It fails:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;╭─caleb@haxcalibur  ~/repos/code_kata/run_length ‹ruby-2.2.1@fuzzy_lcs›&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;╰─$ rspec&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;F&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Failures:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  1) RunLength&lt;span class=&quot;comment&quot;&gt;#get with an empty string should eq &#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     Failure/Error: it &amp;#123; should eq &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       expected: &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            got: nil&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       (compared using ==)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &lt;span class=&quot;comment&quot;&gt;# ./spec/run_length_spec.rb:11:in `block (4 levels) in &amp;lt;top (required)&amp;gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Finished &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 0.00109 seconds (files took 0.08408 seconds to load)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;1 example, 1 failure&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Failed examples:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;rspec ./spec/run_length_spec.rb:11 &lt;span class=&quot;comment&quot;&gt;# RunLength#get with an empty string should eq &#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I’m practicing &lt;a href=&quot;http://www.jamesshore.com/Blog/Red-Green-Refactor.html&quot; target=&quot;_blank&quot;&gt;Red, Green, Refactor&lt;/a&gt;. That means, to fix a test, I’ll add just enough code to pass the tests &lt;em&gt;and nothing else&lt;/em&gt;. Then, I’ll clean it up if necessary. This is not something I normally get to practice. For comparison, my normal workflow is:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;build a prototype&lt;/li&gt;
&lt;li&gt;hack out some tests (sometimes at the same time as step 1)&lt;/li&gt;
&lt;li&gt;realize the prototype is crap&lt;/li&gt;
&lt;li&gt;scrap the prototype&lt;/li&gt;
&lt;li&gt;rewrite the prototype (simultaneously with step 6)&lt;/li&gt;
&lt;li&gt;refactor the tests, adding and removing where appropriate&lt;/li&gt;
&lt;li&gt;repeat #3 - #6 until it meets requirements&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You might call this “test assisted development” mixed with “merciless refactoring.” I’m usually programming something weird or researchy, and it works well for me with those types of problems. I’ll use tests to break the problem down and build intuition. Writing good unit tests &lt;em&gt;after&lt;/em&gt; writing a functioning unit usually leads to a lot of refactoring at first. I’ve found I can approach the design of a unit by thinking about how I would test it, and that cuts down on refactoring time. I use unwritten tests as opportunties to work when there’s limited time. It can be hard to implement a new feature in 30 minutes, but I could probably add one or two test cases in that time.&lt;/p&gt;
&lt;p&gt;After writing &lt;em&gt;just enough&lt;/em&gt; code to pass the test, it becomes:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Why return &lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt; instead of &lt;code&gt;string&lt;/code&gt;? Because empty quotes is more simple than a variable. Avoid adding any complexity. Before writing code, ask: “Can there be less and still pass the tests?”&lt;/p&gt;
&lt;p&gt;Now, let’s add a slightly less trivial test case:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context &lt;span class=&quot;string&quot;&gt;&#39;with &quot;a&quot;&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let(&lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;) &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subject&amp;#123; get &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    it &amp;#123; should eq &lt;span class=&quot;string&quot;&gt;&#39;1a&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Code change seems a little much. Spent some time thinking about it, but couldn’t think of anything.&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; string.empty?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;1&lt;span class=&quot;subst&quot;&gt;#&amp;#123;string&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Next test adds a little more complexity:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context &lt;span class=&quot;string&quot;&gt;&#39;with &quot;aa&quot;&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let(&lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;) &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;aa&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subject&amp;#123; get &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    it &amp;#123; should eq &lt;span class=&quot;string&quot;&gt;&#39;2a&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;There’s a pattern emerging. We can just add lots of &lt;code&gt;if/else&lt;/code&gt;s for each test case, but that isn’t going to webscale. It would appear we must violate the principle of “just pass the tests.” But, lots of conditionals could be said to have a certain complexity. The challenge now is to write the code in a way that is more simple than having two conditionals and an else. Also, we can be certain there is a nearly 1 to 1 ratio of inputs to conditionals. At this point, I’m trying to avoid jumping ahead and solving the entire problem, since it’s simple enough to guess.&lt;/p&gt;
&lt;p&gt;The code becomes:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; string.empty?&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;string.size&amp;#125;&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;string[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;It’s not much more complex. It passes the tests. I keep feeling there’s a smarter way to do it. That’s fine. I’ll practice this again for a few days and see if anything new jumps out at me.&lt;/p&gt;
&lt;p&gt;Fourth test:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context &lt;span class=&quot;string&quot;&gt;&#39;with &quot;aab&quot;&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let(&lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;) &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;aab&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subject&amp;#123; get &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    it &amp;#123; should eq &lt;span class=&quot;string&quot;&gt;&#39;2a1b&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Originally, I started writing a state machine that iterated over the string and juggled variables like character counts, last character processed, etc. This added a lot of complexity and was ugly. I want to add the least amount of complexity and still pass the tests. I thought about it for a few minutes and rewrote it into something more clear:&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(string)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    counts = Hash.new(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    string.each_char &amp;#123; &lt;span class=&quot;params&quot;&gt;|l|&lt;/span&gt; counts[l] += &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    counts.map &amp;#123; &lt;span class=&quot;params&quot;&gt;|l, c|&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;c&amp;#125;&lt;/span&gt;&lt;span class=&quot;subst&quot;&gt;#&amp;#123;l&amp;#125;&lt;/span&gt;&quot;&lt;/span&gt; &amp;#125;.join&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;You could point out this still makes use of a state machine, but the difference is that this is more idiomatic, there’s less state tracking, and it’s relying on code I didn’t have to write. Not writing code is the best way to not write bugs. This relies on the fact that Ruby &amp;gt; 1.9 maintains key insertion order for hashes. If it didn’t, I could use a sorted hash, or a sorted set of just keys.&lt;/p&gt;
&lt;p&gt;Some people might say we’re done, but I’d like to add just &lt;em&gt;one&lt;/em&gt; complex case. This is not so much to test for correctness. It doesn’t cover any additional code because no code changes are needed to make it pass, but it does &lt;em&gt;document the intent&lt;/em&gt; of the code.&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;context &lt;span class=&quot;string&quot;&gt;&#39;with &quot;aaaabcccccccccdddddz&quot;&#39;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    let(&lt;span class=&quot;string&quot;&gt;&#39;string&#39;&lt;/span&gt;) &amp;#123; &lt;span class=&quot;string&quot;&gt;&#39;aaaabcccccccccdddddz&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subject&amp;#123; get &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    it &amp;#123; should eq &lt;span class=&quot;string&quot;&gt;&#39;4a1b9c5d1z&#39;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;That’s about 30 minutes for me. I’ll stop here and practice again tomorrow. I’ll do this for a week and next time I need to setup a Ruby + RVM + Rails project, I can get all the foundation laid without having to consult any documentation. If this problem is too short after a few days, I’ll add a decoding method.&lt;/p&gt;
&lt;p&gt;What do you think? Do you see something I could have done better? A better test? Cleaner, simpler solutions? Let me know. Have an idea for a kata? Share it here.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;A &lt;em&gt;kata&lt;/em&gt; is a martial arts training method. It’s a set of detailed and choreographed movements and poses. The movements are performed repeatedly and internalized. A &lt;em&gt;code kata&lt;/em&gt; is is a training method for developing skill in programming. Take something you do frequently, or wish to do better, strip away everything not essential, and practice it repeatedly.&lt;br&gt;
    
    </summary>
    
    
      <category term="code-kata" scheme="https://CalebFenton.github.io/tags/code-kata/"/>
    
      <category term="tdd" scheme="https://CalebFenton.github.io/tags/tdd/"/>
    
  </entry>
  
  <entry>
    <title>TetCon 2016 - Android Deobfuscation: Tools and Techniques</title>
    <link href="https://CalebFenton.github.io/2016/04/23/tetcon-2016-android-deobfuscation/"/>
    <id>https://CalebFenton.github.io/2016/04/23/tetcon-2016-android-deobfuscation/</id>
    <published>2016-04-23T07:00:00.000Z</published>
    <updated>2016-04-23T18:40:07.000Z</updated>
    
    <content type="html">&lt;p&gt;I gave a talk at &lt;a href=&quot;https://tetcon.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TetCon 2016&lt;/a&gt; about Android obfuscation and deobfuscation.&lt;/p&gt;
&lt;p&gt;The talks at TetCon were great and the people there were super nice. I got all kinds of new ideas and spent the entire flight home furiously coding. Super motivating to hear from and talk to other people working on similar problems. Thanks to the organizers and volunteers Thai for making everything happen.&lt;/p&gt;
&lt;p&gt;Also, special thanks to everyone for speaking English around me!&lt;/p&gt;
&lt;h1 id=&quot;Slides_+_Video&quot;&gt;&lt;a href=&quot;#Slides_+_Video&quot; class=&quot;headerlink&quot; title=&quot;Slides + Video&quot;&gt;&lt;/a&gt;Slides + Video&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://www.slideshare.net/tekproxy/tetcon-2016&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.slideshare.net/tekproxy/tetcon-2016&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;Tools&quot;&gt;&lt;a href=&quot;#Tools&quot; class=&quot;headerlink&quot; title=&quot;Tools&quot;&gt;&lt;/a&gt;Tools&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CalebFenton/dex-oracle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/CalebFenton/dex-oracle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/CalebFenton/simplify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/CalebFenton/simplify&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;Abstract&quot;&gt;&lt;a href=&quot;#Abstract&quot; class=&quot;headerlink&quot; title=&quot;Abstract&quot;&gt;&lt;/a&gt;Abstract&lt;/h1&gt;&lt;p&gt;State of android deobfuscation is weak. Commercial obfuscators are getting more common, and reversers need to understand how to deobfuscate them. This talk provides an overview of different obfuscation types. After that, it describes two code deobfuscation approaches: pattern recognition and virtual execution.&lt;/p&gt;
&lt;p&gt;Pattern recognition focuses mainly on identifying obfuscation patterns, crafting into regular expressions, and then repeatedly applying pattern-based transformations on the code. Insight into code behavior is improved by limited execution of certain methods and storing the result.&lt;/p&gt;
&lt;p&gt;Virtual execution involves simulating the applications code to determine semantics. A context sensitive graph is generated representing every possible execution path and all possible register + class states for each execution of each instruction. This is then analyzed and modified to make the code easier to understand but behaves identically.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;I gave a talk at &lt;a href=&quot;https://tetcon.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;TetCon 2016&lt;/a&gt; about Android obfuscation and deobfuscation.
    
    </summary>
    
    
      <category term="deobfuscation" scheme="https://CalebFenton.github.io/tags/deobfuscation/"/>
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="simplify" scheme="https://CalebFenton.github.io/tags/simplify/"/>
    
      <category term="dex-oracle" scheme="https://CalebFenton.github.io/tags/dex-oracle/"/>
    
  </entry>
  
  <entry>
    <title>Decompiling XAPK Files</title>
    <link href="https://CalebFenton.github.io/2016/02/28/decompiling-xapk-files/"/>
    <id>https://CalebFenton.github.io/2016/02/28/decompiling-xapk-files/</id>
    <published>2016-02-28T15:41:03.000Z</published>
    <updated>2016-02-28T16:11:44.000Z</updated>
    
    <content type="html">&lt;p&gt;While reviewing new Android reverse engineering questions on Stack Overflow, I came across this request to &lt;a href=&quot;http://stackoverflow.com/questions/35070003/decompile-xapk-file&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;decompile an &lt;code&gt;.xapk&lt;/code&gt;&lt;/a&gt;. A brief, non-technical description of the format is described on &lt;a href=&quot;https://apkpure.com/xapk.htm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;APKPure’s website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XAPK is a brand new file format standard for Android APK package file. Contains all APK package and obb cache asset file to keep Android games or apps working, it always ends in “.xapk”. To ensure games, applications run perfectly, APK Install one click install makes it easy for Android users directly install .apk, .xapk file to the root directory.&lt;br&gt;obb cache data?&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The “OBB cache files” are usually pretty big for games and include all of the assets like maps, models, images, music, whatever.&lt;/p&gt;
&lt;p&gt;Ok, so it looks like we have a new &lt;strong&gt;APK&lt;/strong&gt; format specifically designed for games &lt;em&gt;and&lt;/em&gt; it comes with &lt;a href=&quot;https://apkpure.com/xapk-installer/com.apkpure.installer&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;its own installer&lt;/a&gt;. Since there’s an installer, that might mean the actual &lt;code&gt;.apk&lt;/code&gt; is encrypted and embedded in the OBB. Maybe there’s some metadata in the &lt;code&gt;.xapk&lt;/code&gt; that tells the installer how to lookup the decryption key from their servers? Maybe I’ll need to search for the &lt;strong&gt;ZIP&lt;/strong&gt; magic bytes and carve out the &lt;code&gt;.apk&lt;/code&gt;?&lt;/p&gt;
&lt;p&gt;Nope. &lt;em&gt;The original &lt;code&gt;.apk&lt;/code&gt; is at the root of the &lt;code&gt;.xapk&lt;/code&gt; archive.&lt;/em&gt; EASY. (read: boring) Shit, I was looking for a challenge!&lt;/p&gt;
&lt;p&gt;I downloaded and examined &lt;a href=&quot;https://apkpure.com/side-lift-king/org.ammarz.MT&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Side Lift King&lt;/a&gt;.&lt;br&gt;&lt;img src=&quot;/images/decompiling-xapk/side-lift-king.png&quot; alt=&quot;such lift, much king&quot;&gt;&lt;/p&gt;
&lt;p&gt;Here’s the shasum:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ shasum Side\ Lift\ King_v2.0_apkpure.com.xapk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;155dbed0809d49b477c6ab4c52f555cfc8f47144  Side Lift King_v2.0_apkpure.com.xapk&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;.xapk&lt;/code&gt; is just a ZIP file:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ file Side\ Lift\ King_v2.0_apkpure.com.xapk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Side Lift King_v2.0_apkpure.com.xapk: Zip archive data, at least v2.0 to extract&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The original &lt;code&gt;org.ammarz.MT.apk&lt;/code&gt; is just floating around:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ unzip Side\ Lift\ King_v2.0_apkpure.com.xapk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Archive:  Side Lift King_v2.0_apkpure.com.xapk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; extracting: org.ammarz.MT.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; extracting: icon.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; extracting: Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; extracting: manifest.json&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It’s not encrypted or anything.&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ file org&lt;span class=&quot;selector-class&quot;&gt;.ammarz&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.MT&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.apk&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;org&lt;span class=&quot;selector-class&quot;&gt;.ammarz&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.MT&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.apk&lt;/span&gt;: Java archive data (JAR)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;It decompiles fine with apktool:&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ apktool d org.ammarz.MT.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Using Apktool 2.0.1 on org.ammarz.MT.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Loading resource table...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Decoding AndroidManifest.xml with resources...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Loading resource table from file: /Users/caleb/Library/apktool/framework/1.apk&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Regular manifest package...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Decoding file-resources...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Decoding values */* XMLs...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Baksmaling classes.dex...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Copying assets and libs...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Copying unknown files...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;I: Copying original files...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The OBB file, in case you’re curious, is just a &lt;strong&gt;JAR&lt;/strong&gt; which contains lots of files in an &lt;code&gt;assets/&lt;/code&gt; folder.&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ file Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb                           1 ↵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb: Java archive data (JAR)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;manifest.json&lt;/code&gt; must be the file used by the installer. It must be the metadata used by the installer app. Here is a pretty formatted version:&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;xapk_version&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;package_name&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;org.ammarz.MT&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;name&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Side Lift King&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;version_code&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;8&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;version_name&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;2.0&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;min_sdk_version&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;9&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;target_sdk_version&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;23&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;permissions&quot;&lt;/span&gt;:[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;android.permission.INTERNET&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;android.permission.ACCESS_NETWORK_STATE&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;android.permission.WAKE_LOCK&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;android.permission.ACCESS_WIFI_STATE&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;com.android.vending.CHECK_LICENSE&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;android.permission.READ_EXTERNAL_STORAGE&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;total_size&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;58621386&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;expansions&quot;&lt;/span&gt;:[&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;&quot;file&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;&quot;install_location&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;EXTERNAL_STORAGE&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;         &lt;span class=&quot;attr&quot;&gt;&quot;install_path&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;Android/obb/org.ammarz.MT/main.8.org.ammarz.MT.obb&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h1 id=&quot;Summary&quot;&gt;&lt;a href=&quot;#Summary&quot; class=&quot;headerlink&quot; title=&quot;Summary&quot;&gt;&lt;/a&gt;Summary&lt;/h1&gt;&lt;p&gt;If you want to decompile an &lt;code&gt;.xapk&lt;/code&gt;, all you have to do is unzip it, look for the original &lt;code&gt;.apk&lt;/code&gt;, and decompile it normally.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;While reviewing new Android reverse engineering questions on Stack Overflow, I came across this request to &lt;a href=&quot;http://stackoverflow.com/questions/35070003/decompile-xapk-file&quot;&gt;decompile an &lt;code&gt;.xapk&lt;/code&gt;&lt;/a&gt;. A brief, non-technical description of the format is described on &lt;a href=&quot;https://apkpure.com/xapk.htm&quot;&gt;APKPure’s website&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;XAPK is a brand new file format standard for Android APK package file. Contains all APK package and obb cache asset file to keep Android games or apps working, it always ends in “.xapk”. To ensure games, applications run perfectly, APK Install one click install makes it easy for Android users directly install .apk, .xapk file to the root directory.&lt;br&gt;obb cache data?&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="reversing" scheme="https://CalebFenton.github.io/tags/reversing/"/>
    
  </entry>
  
  <entry>
    <title>How does Dalvik handle &#39;this&#39; registers?</title>
    <link href="https://CalebFenton.github.io/2016/02/21/how-does-dalvik-handle-this-registers/"/>
    <id>https://CalebFenton.github.io/2016/02/21/how-does-dalvik-handle-this-registers/</id>
    <published>2016-02-21T20:44:39.000Z</published>
    <updated>2016-04-18T23:08:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;The_this_Reference&quot;&gt;&lt;a href=&quot;#The_this_Reference&quot; class=&quot;headerlink&quot; title=&quot;The this Reference&quot;&gt;&lt;/a&gt;The &lt;code&gt;this&lt;/code&gt; Reference&lt;/h2&gt;&lt;p&gt;For every instance (virtual, non-static) method in Dalvik, the first parameter is a reference to itself, or, in Java, the &lt;code&gt;this&lt;/code&gt; reference. I wanted to know if it was legal to reassign the register value.&lt;/p&gt;
&lt;p&gt;Just so I’m sure you know what I’m talking about, here’s a simple Java class with an instance method called &lt;code&gt;instanceMethod&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Instance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;The above smali gets turned into this (you can safely ignore &lt;code&gt;&amp;lt;init&amp;gt;()V&lt;/code&gt;):&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LInstance;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.super&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.field&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; private&lt;/span&gt; number:I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; constructor&lt;/span&gt; &amp;lt;init&amp;gt;()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-direct &lt;/span&gt;&amp;#123;p0&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;-&amp;gt;&amp;lt;init&amp;gt;()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; const/4 &lt;/span&gt;v0, 0x5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; iput &lt;/span&gt;v0, p0, &lt;span class=&quot;class&quot;&gt;LInstance;&lt;/span&gt;-&amp;gt;number:I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; instanceMethod()I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# p0 is the &#39;this&#39; reference&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; iget &lt;/span&gt;v0, p0, &lt;span class=&quot;class&quot;&gt;LInstance;&lt;/span&gt;-&amp;gt;number:I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return &lt;/span&gt;v0&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Do your decompilations look different? It may be because mine was generated using &lt;code&gt;baksmali --use-locals&lt;/code&gt; which separates the registers into registers used within the method body (locals) and those passed as parameters. Local registers are named &lt;code&gt;v0&lt;/code&gt;, &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, and so on and the parameters are named &lt;code&gt;p0&lt;/code&gt;, &lt;code&gt;p1&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;The default behavior is to name all registers based on how they’re actually laid out by Dalvik: &lt;code&gt;r0&lt;/code&gt;, &lt;code&gt;r1&lt;/code&gt;, &lt;code&gt;r2&lt;/code&gt; and so on, regardless of if they’re local or parameters. To clarify, a method like this:&lt;br&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public example(JI)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .registers&lt;/span&gt; 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Has a register layout like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r0&lt;/code&gt;, &lt;code&gt;r1&lt;/code&gt;, &lt;code&gt;r2&lt;/code&gt; - local registers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r3&lt;/code&gt; - &lt;code&gt;this&lt;/code&gt; register (p0 with &lt;code&gt;--use-locals&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r4&lt;/code&gt; &amp;amp; &lt;code&gt;r5&lt;/code&gt; - &lt;code&gt;J&lt;/code&gt; parameter (wide types use two registers)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r6&lt;/code&gt; - &lt;code&gt;I&lt;/code&gt; parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;The_Question&quot;&gt;&lt;a href=&quot;#The_Question&quot; class=&quot;headerlink&quot; title=&quot;The Question&quot;&gt;&lt;/a&gt;The Question&lt;/h2&gt;&lt;p&gt;I wondered if &lt;code&gt;p0&lt;/code&gt; was somehow special and if it was possible to rewrite it. One of the optimizers I’m working on needs to rewrite Smali and it works best if it knows all of the available registers at a certain point in code. A register is “available” if it’s not used for the rest of the execution. If you’ve ever written a tool to automatically modify Smali, you have probably run into this problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spoiler warning:&lt;/strong&gt; It is &lt;em&gt;not&lt;/em&gt; special and it &lt;em&gt;is&lt;/em&gt; possible to reassign &lt;code&gt;p0&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Here’s the code I used to test:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LHello;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.super&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.source&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello.java&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; constructor&lt;/span&gt; &amp;lt;init&amp;gt;()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-direct &lt;/span&gt;&amp;#123;p0&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;-&amp;gt;&amp;lt;init&amp;gt;()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; main([&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .param&lt;/span&gt; p0, &lt;span class=&quot;string&quot;&gt;&quot;argv&quot;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# [Ljava/lang/String;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; sget-object &lt;/span&gt;v0, &lt;span class=&quot;class&quot;&gt;Ljava/lang/System;&lt;/span&gt;-&amp;gt;out:&lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; new-instance &lt;/span&gt;v1, &lt;span class=&quot;class&quot;&gt;LHello;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-direct &lt;/span&gt;&amp;#123;v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;LHello;&lt;/span&gt;-&amp;gt;&amp;lt;init&amp;gt;()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;LHello;&lt;/span&gt;-&amp;gt;instance()I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; move-result &lt;/span&gt;v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;v0, v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;-&amp;gt;println(I)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; instance()I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# rewrite p0 with 0x5, cross fingers, hope it works&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; const/4 &lt;/span&gt;p0, 0x5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return &lt;/span&gt;p0&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And then to compile and run it:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ smali hello.smali -o classes.dex &amp;amp;&amp;amp; zip Hello.zip classes.dex &amp;amp;&amp;amp; adb push Hello.zip /data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt; &amp;amp;&amp;amp; adb shell dalvikvm -cp /data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/Hello.zip Hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  adding: classes.dex (deflated 45%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;115 KB/s (619 bytes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 0.005s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The test code outputs the expected &lt;code&gt;5&lt;/code&gt; with no errors or warnings. It makes sense that a register should be able to hold a reference to anything, but the only way to be absolutely sure (without closely examining the source) is to test it.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The_this_Reference&quot;&gt;&lt;a href=&quot;#The_this_Reference&quot; class=&quot;headerlink&quot; title=&quot;The this Reference&quot;&gt;&lt;/a&gt;The &lt;code&gt;this&lt;/code&gt; Reference&lt;/h2&gt;&lt;p&gt;For every instance (virtual, non-static) method in Dalvik, the first parameter is a reference to itself, or, in Java, the &lt;code&gt;this&lt;/code&gt; reference. I wanted to know if it was legal to reassign the register value.&lt;/p&gt;
&lt;p&gt;Just so I’m sure you know what I’m talking about, here’s a simple Java class with an instance method called &lt;code&gt;instanceMethod&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Instance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
  </entry>
  
  <entry>
    <title>How does Dalvik handle null?</title>
    <link href="https://CalebFenton.github.io/2016/02/16/how-does-dalvik-handle-null-types/"/>
    <id>https://CalebFenton.github.io/2016/02/16/how-does-dalvik-handle-null-types/</id>
    <published>2016-02-17T03:44:39.000Z</published>
    <updated>2016-04-18T23:08:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;The_Problem&quot;&gt;&lt;a href=&quot;#The_Problem&quot; class=&quot;headerlink&quot; title=&quot;The Problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;Dalvik doesn’t have a proper null type. A null is &lt;a href=&quot;https://github.com/android/platform_dalvik/blob/master/dx/src/com/android/dx/rop/cst/CstKnownNull.java#L92&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;represented by a &lt;code&gt;0&lt;/code&gt;&lt;/a&gt;. Consider this example Smali code:&lt;br&gt;&lt;code&gt;const/4 v0, 0x0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It could actually represent a few of different types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean v0 = false;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byte v0 = 0x0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And even: &lt;code&gt;v0 = null;&lt;/code&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you were wondering about how &lt;code&gt;char&lt;/code&gt; is handled, &lt;code&gt;char c = &amp;#39;a&amp;#39;&lt;/code&gt; it looks like this:&lt;br&gt;&lt;code&gt;const/16 v0, 0x61&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I wanted to know when Dalvik coaxed &lt;code&gt;0&lt;/code&gt; values into &lt;code&gt;null&lt;/code&gt; references for my work on &lt;a href=&quot;https://github.com/CalebFenton/simplify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simplify&lt;/a&gt;. I tried searching and only found bits and pieces, and, of course, a bunch of source code. The first page I found that looked promising was &lt;a href=&quot;http://forensics.spreitzenbarth.de/2012/08/27/comparison-of-dalvik-and-java-bytecode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://forensics.spreitzenbarth.de/2012/08/27/comparison-of-dalvik-and-java-bytecode/
&lt;/a&gt; but &lt;em&gt;all&lt;/em&gt; it said about &lt;code&gt;null&lt;/code&gt;s was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dalvik bytecode does not have a specific null type. Instead, Dalvik uses a 0 value constant. So, the ambiguous implication of constant 0 should be distinguished properly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This wasn’t going to cut it.&lt;/p&gt;
&lt;h2 id=&quot;The_Experiment&quot;&gt;&lt;a href=&quot;#The_Experiment&quot; class=&quot;headerlink&quot; title=&quot;The Experiment&quot;&gt;&lt;/a&gt;The Experiment&lt;/h2&gt;&lt;p&gt;I dug through the source code a little and felt like I only partially understood when it happened. To be sure, and to understand more deeply, and mostly because I like to do things the cheap, easy, ghetto way, I decided to write some Java, convert it to Smali, and execute it to see what happens!&lt;/p&gt;
&lt;p&gt;Consider this bit of code which handles &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; back to back:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addNullAnd0ToList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;Integer&amp;gt; wtf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wtf.add(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wtf.add(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(wtf); &lt;span class=&quot;comment&quot;&gt;// [null, 0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is the resulting Smali (with a &lt;code&gt;main&lt;/code&gt; method that I added because I’m nice and want you to be able to easily execute this yourself):&lt;br&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LHelloWorld;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.super&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; varargs main([&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .prologue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-static &lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;class&quot;&gt;LHelloWorld;&lt;/span&gt;-&amp;gt;addNullAnd0ToList()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; addNullAnd0ToList()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .prologue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; new-instance &lt;/span&gt;v0, &lt;span class=&quot;class&quot;&gt;Ljava/util/LinkedList;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-direct &lt;/span&gt;&amp;#123;v0&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/LinkedList;&lt;/span&gt;-&amp;gt;&amp;lt;init&amp;gt;()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .local&lt;/span&gt; v0, &lt;span class=&quot;string&quot;&gt;&quot;wtf&quot;&lt;/span&gt;:&lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Ljava/util/List&amp;lt;Ljava/lang/Integer;&amp;gt;;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; const/4 &lt;/span&gt;v1, 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-interface &lt;/span&gt;&amp;#123;v0, v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;-&amp;gt;add(&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;)Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; const/4 &lt;/span&gt;v1, 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-static &lt;/span&gt;&amp;#123;v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/Integer;&lt;/span&gt;-&amp;gt;valueOf(I)&lt;span class=&quot;class&quot;&gt;Ljava/lang/Integer;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; move-result-object &lt;/span&gt;v1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-interface &lt;/span&gt;&amp;#123;v0, v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;-&amp;gt;add(&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;)Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; sget-object &lt;/span&gt;v1, &lt;span class=&quot;class&quot;&gt;Ljava/lang/System;&lt;/span&gt;-&amp;gt;out:&lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;v1, v0&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;-&amp;gt;println(&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;These two lines are responsible for adding the &lt;code&gt;null&lt;/code&gt; to &lt;code&gt;wtf:Ljava/lang/List;&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const/4 v1, 0x0&lt;span class=&quot;built_in&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;invoke-interface &lt;/span&gt;&amp;#123;v0, v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;-&amp;gt;add(&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;)Z&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;My first guess was Dalvik sees that &lt;code&gt;v1&lt;/code&gt; contains an integer but is used as a &lt;code&gt;Ljava/lang/Object;&lt;/code&gt; type argument. Does it have to be an integer? Does it work with other numbers? What if &lt;code&gt;v1&lt;/code&gt; was a &lt;code&gt;short&lt;/code&gt;? I added a &lt;code&gt;check-cast&lt;/code&gt; to force &lt;code&gt;v1&lt;/code&gt; into &lt;code&gt;short&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const/4 v1, 0x0&lt;span class=&quot;built_in&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check-cast &lt;/span&gt;v1, S&lt;span class=&quot;built_in&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;invoke-interface &lt;/span&gt;&amp;#123;v0, v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;-&amp;gt;add(&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;)Z&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Then compiled an ran everything:&lt;br&gt;&lt;code&gt;smali hello.smali -o classes.dex &amp;amp;&amp;amp; zip Hello.zip classes.dex &amp;amp;&amp;amp; adb push Hello.zip /data/local &amp;amp;&amp;amp; adb shell dalvikvm -cp /data/local/Hello.zip HelloWorld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It failed:&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;DexOpt:&lt;/span&gt; --- BEGIN &lt;span class=&quot;string&quot;&gt;&#39;Hello.zip&#39;&lt;/span&gt; (bootstrap=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;DexOpt:&lt;/span&gt; load &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;ms, verify &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;ms, opt &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;DexOpt:&lt;/span&gt; --- END &lt;span class=&quot;string&quot;&gt;&#39;Hello.zip&#39;&lt;/span&gt; (success) ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEX prep &lt;span class=&quot;string&quot;&gt;&#39;/data/local/Hello.zip&#39;&lt;/span&gt;: unzip &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;ms, rewrite &lt;span class=&quot;number&quot;&gt;58&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt; S is not instance of Ljava&lt;span class=&quot;regexp&quot;&gt;/lang/&lt;/span&gt;Object;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt; bad arg &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (into Ljava&lt;span class=&quot;regexp&quot;&gt;/lang/&lt;/span&gt;Object;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt;  rejecting call to Ljava&lt;span class=&quot;regexp&quot;&gt;/util/&lt;/span&gt;List;.add (Ljava&lt;span class=&quot;regexp&quot;&gt;/lang/&lt;/span&gt;Object;)Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt;  rejecting opcode &lt;span class=&quot;number&quot;&gt;0x72&lt;/span&gt; at &lt;span class=&quot;number&quot;&gt;0x0008&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt;  rejected LHelloWorld;.addNullAnd0ToList ()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Verifier rejected &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LHelloWorld&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The key part of this error is the &lt;code&gt;S is not instance of Ljava/lang/Object;&lt;/code&gt;. Ok, that’s fair. There must be a difference between registers with and without explicit type casting. But does it work with integers? I tried with &lt;code&gt;check-cast v1, I&lt;/code&gt; and got about the same error. The code didn’t get past the verifier, so it knew at runtime it was wrong. To use a &lt;code&gt;short&lt;/code&gt; without a &lt;code&gt;check-cast&lt;/code&gt; I just added a &lt;code&gt;getShort()S&lt;/code&gt; method. I didn’t think it would work because in both the method call and with &lt;code&gt;check-cast&lt;/code&gt;, explicit type information is available.&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;invoke-static &amp;#123;&amp;#125;, &lt;span class=&quot;class&quot;&gt;LHelloWorld;&lt;/span&gt;-&amp;gt;getShort()S&lt;span class=&quot;built_in&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;move-result &lt;/span&gt;v1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; getShort()S&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; const/4 &lt;/span&gt;v0, 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return &lt;/span&gt;v0&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And I was right; it fails:&lt;br&gt;&lt;figure class=&quot;highlight dts&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;VFY:&lt;/span&gt; register1 v1 type &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, wanted ref&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;VFY:&lt;/span&gt; bad arg &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (into Ljava&lt;span class=&quot;meta-keyword&quot;&gt;/lang/&lt;/span&gt;Object;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is getting silly and I’m starting to think I should maybe just audit the source to fully understand. So I spend another 10 - 15 minutes poking around before giving up. I’ll just derrive the behavior experimentally &lt;em&gt;hashtag yolo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For the sake of completeness, I also try with a &lt;code&gt;getInt()I&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;invoke-static &amp;#123;&amp;#125;, &lt;span class=&quot;class&quot;&gt;LHelloWorld;&lt;/span&gt;-&amp;gt;getInt()I&lt;span class=&quot;built_in&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;move-result &lt;/span&gt;v1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; getInt()I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; const/4 &lt;/span&gt;v0, 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return &lt;/span&gt;v0&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Another failure:&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;VFY: register1 v1 &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, wanted &lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Dalvik can see through my cheap tricks. What if I try a wide value like with &lt;code&gt;const-wide&lt;/code&gt;? There’s no &lt;em&gt;explicit&lt;/em&gt; type… Slight change to the code because &lt;code&gt;long&lt;/code&gt;s are fat and take up two registers. I had to move the register to &lt;code&gt;v2&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight actionscript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;-wide v2, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;L&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;NOPE:&lt;br&gt;&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;VFY: register1 v2 &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, wanted &lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Eventually, I found that only two things work for a &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;const/4 v1, 0x0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const/16 v1, 0x0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And these are considered &lt;code&gt;null&lt;/code&gt; &lt;em&gt;only&lt;/em&gt; if there’s no explicit type information available between assignment and use. Now I can take these delicious, esoteric trivialities and apply them towards creating failing tests. And I can’t help but simultaneously get excited by the prospect of failing tests and wonder what kind of life choices led to this.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The_Problem&quot;&gt;&lt;a href=&quot;#The_Problem&quot; class=&quot;headerlink&quot; title=&quot;The Problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;Dalvik doesn’t have a proper null type. A null is &lt;a href=&quot;https://github.com/android/platform_dalvik/blob/master/dx/src/com/android/dx/rop/cst/CstKnownNull.java#L92&quot;&gt;represented by a &lt;code&gt;0&lt;/code&gt;&lt;/a&gt;. Consider this example Smali code:&lt;br&gt;&lt;code&gt;const/4 v0, 0x0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It could actually represent a few of different types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean v0 = false;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byte v0 = 0x0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And even: &lt;code&gt;v0 = null;&lt;/code&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
  </entry>
  
  <entry>
    <title>Why Anti-Virus Software Sucks</title>
    <link href="https://CalebFenton.github.io/2016/02/07/why-anti-virus-sucks/"/>
    <id>https://CalebFenton.github.io/2016/02/07/why-anti-virus-sucks/</id>
    <published>2016-02-08T04:13:40.000Z</published>
    <updated>2016-02-17T03:47:05.000Z</updated>
    
    <content type="html">&lt;p&gt;Everyone knows anti-virus products suck and you can say anti-virus sucks for many different reasons and at different levels. You could start with obvious, surface level reasons: anti-virus software (AV) sucks because it’s slow, klunky, self-advertising garbage that slows your machine down. From there, you could move on to more perceptive complaints such as how it hardly ever detects new malware and almost certainly will not detect fancypants, bespoke, advanced persistent threats (APT). You could still deeper and claim that there’s something wrong with an industry that thrives on selling people fear and selling companies mere compliance so their insurance doesn’t laugh in their faces when they try to collect after getting their gibson’s backdoor hacked.&lt;/p&gt;
&lt;p&gt;The obvious question is then &lt;em&gt;why&lt;/em&gt; do AV products suck? Malware is a big problem that costs people money and heartache all the time. Why isn’t this solved better? Need to understand the problem at the most fundamental level. For me, this means understanding the condition in terms of economics principals–incentives, constraints, market forces at work, and so on. Once you understand something at this level, you can usually extrapolate most of the symptoms yourself and, importantly, you’ll have a much better idea of how to actually &lt;em&gt;fix&lt;/em&gt; it. This brings me to my main thesis: &lt;strong&gt;AV software sucks because it’s impossible for the market to be informed and to meaningfully differentiate between products and objectively determine which one is better.&lt;/strong&gt; Because of this, there isn’t much incentive for companies to make lean, clean, optimized, AV products with amazing, complex detection capabilities and behavior analysis. They can’t compete on quality, because people can’t tell the difference between great and crap, so they have to compete on sales and advertising.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://usercontent1.hubimg.com/3675524_f520.jpg&quot; alt=&quot;fearmongering&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may have a favorite AV scanner, but can you honestly tell me, objectively, why it’s better than all the others? You might have a few good, small reasons like one has a cleaner, faster user interface (UI) or &lt;em&gt;seems&lt;/em&gt; to have better detections. But how can you be sure? Do you know what each one is really doing under the hood? How do you know how good it is at detecting new viruses? How do you know how fast its detection signatures are updated? What about code quality and security bugs in the AV software itself? If you’re like most people, you simply prefer one AV product because it sucks the &lt;em&gt;least&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgflip.com/8bki5.jpg&quot; alt=&quot;gear grinding&quot;&gt;&lt;/p&gt;
&lt;p&gt;It’s pretty much impossible for laypeeps to have any clue how good an AV product is. Actually, I can’t even tell, so I reckon most experts can’t either, at least in general. Because of this general inability to compare, AV testing companies have stepped up to solve this problem. They test and compare all the different AV products and claim to provide an objective, meaningful, comparative analysis. The idea is that consumers can read their reports and really know what’s going on and pick a good AV product based on &lt;em&gt;science&lt;/em&gt; and not anecdotal hearsay.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.kappit.com/img/pics/201412_1752_gaaid_sm.jpg&quot; alt=&quot;difficulty&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Why_AV_Testing_Sucks&quot;&gt;&lt;a href=&quot;#Why_AV_Testing_Sucks&quot; class=&quot;headerlink&quot; title=&quot;Why AV Testing Sucks&quot;&gt;&lt;/a&gt;Why AV Testing Sucks&lt;/h2&gt;&lt;p&gt;First, if you’ve never seen an AV Test report and you’re some kind of masochist, here are two from 2015:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.av-test.org/fileadmin/tests/mobile/avtest_summary_mobile_2015-11.xlsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.av-test.org/fileadmin/tests/mobile/avtest_summary_mobile_2015-11.xlsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.av-comparatives.org/wp-content/uploads/2015/12/avc_prot_2015b_en.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.av-comparatives.org/wp-content/uploads/2015/12/avc_prot_2015b_en.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;They evaluate products on various features and abilities such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;% of malware detected (detection rates)&lt;/li&gt;
&lt;li&gt;% of good apps detected as malware (false positives)&lt;/li&gt;
&lt;li&gt;ability to detect new and unknown threats (0day detections)&lt;/li&gt;
&lt;li&gt;user-interface and usability&lt;/li&gt;
&lt;li&gt;battery usage (for mobile devices)&lt;/li&gt;
&lt;li&gt;other nice features: backup, device locate, remote wipe, remote lock, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sounds good, doesn’t it? Where’s the problem here?, you may be wondering. I’ll just cut straight to the heart of it. Let’s start at #1, detection rates, the most critical metric. &lt;em&gt;How can an AV test determine this?&lt;/em&gt; How can they possibly know how much malware an AV product detects and misses? First off, they would need a sample set of &lt;em&gt;known&lt;/em&gt; malware to run through the AV scanner. Hmm. But that can’t be right. How can they make a malware sample set? How can they know what malware is? If they had perfect knowledge of what was malware and what wasn’t they would &lt;em&gt;be&lt;/em&gt; an AV company not an AV &lt;em&gt;testing&lt;/em&gt; company!&lt;/p&gt;
&lt;p&gt;The truth is that AV testing companies have no clue how to detect malware. Instead, and this part is just pure gold, they rely on the &lt;em&gt;AV companies&lt;/em&gt; to provide the malware samples. Sort of like if college students got to pick which questions were on the test.&lt;/p&gt;
&lt;p&gt;Yeah. Just let that sink in for a minute. While you meditate on how fucked up that is, contemplate on the “appropriate” use of “ironic” quotes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/K8AFzev.png&quot; alt=&quot;ironic quotes&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Problem_1_3A_Black_Magic&quot;&gt;&lt;a href=&quot;#Problem_1_3A_Black_Magic&quot; class=&quot;headerlink&quot; title=&quot;Problem 1: Black Magic&quot;&gt;&lt;/a&gt;Problem 1: Black Magic&lt;/h3&gt;&lt;p&gt;Right off the bat, the objectivity of the test is seriously compromised. Different AV companies submit their samples and somehow the AV test has to somehow figure out which ones are actually malware and which ones are false positives from the AV company. How does it achieve such a feat? I’m assuming it has something to do with many Excel spreadsheets, animal sacrifice, and &lt;em&gt;fucking witchery&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There was one time I found an entirely new family of sneaky malware that no one else detected. So we submitted some as test samples. Since everyone &lt;em&gt;except us&lt;/em&gt; missed it, they took it out of the sample set. Because, you know, it must not be malware, right?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/VAsfyWg.jpg&quot; alt=&quot;its magic&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Problem_2_3A_Biased_Against_Small_Companies&quot;&gt;&lt;a href=&quot;#Problem_2_3A_Biased_Against_Small_Companies&quot; class=&quot;headerlink&quot; title=&quot;Problem 2: Biased Against Small Companies&quot;&gt;&lt;/a&gt;Problem 2: Biased Against Small Companies&lt;/h3&gt;&lt;p&gt;Not all companies have the time or resources to curate and submit test samples, so that only leaves the big companies. And you can be absolutely 100% sure the big companies have test machines setup to run samples through the competition so they know exactly what samples the other AV products are likely to miss. Because of this, the sample set is biased against companies which don’t bother or can’t afford to do “offensive sample testing”. I’ve been at conferences and talked with people enough to learn that some companies spend millions of dollars and have entire teams just for winning these tests. That’s money and resources &lt;em&gt;not&lt;/em&gt; going to improving the product and protecting the customer.&lt;/p&gt;
&lt;h3 id=&quot;Problem_3_3A_Unrealistic_Samples&quot;&gt;&lt;a href=&quot;#Problem_3_3A_Unrealistic_Samples&quot; class=&quot;headerlink&quot; title=&quot;Problem 3: Unrealistic Samples&quot;&gt;&lt;/a&gt;Problem 3: Unrealistic Samples&lt;/h3&gt;&lt;p&gt;The sample sets used in these tests are completely unrealistic. It’s usually a bunch of samples from a few families no one ever actually encounters in the wild. Where I worked, ~0.3% of our test misses were actually encountered by users. That means 99.7% of the test samples were never seen &lt;em&gt;once&lt;/em&gt; by &lt;em&gt;any&lt;/em&gt; of our customers.&lt;/p&gt;
&lt;p&gt;Since the number of families used in the sample set is not nearly representative of the number of actual families spreading in the wild, if an AV company misses one family, they could miss a lot of samples. It’s like when one paragraph from a single chapter in a book is used to make 99.7% of the test.&lt;/p&gt;
&lt;p&gt;I remember when I saw Microsoft Security Essentials massively fail a particular AV test and was amazed by their badass response:&lt;br&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/mmpc/2014/01/17/key-lessons-learned-from-the-latest-test-results/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blogs.technet.microsoft.com/mmpc/2014/01/17/key-lessons-learned-from-the-latest-test-results/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this polished, polite, and diplomatic response, homeboy drops the mic with this little gem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our review showed that 0.0033 percent of our Microsoft Security Essentials and Microsoft Forefront Endpoint Protection customers were impacted by malware samples not detected during the test. In addition, 94 percent of the malware samples not detected during the test didn’t impact our customers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don’t want to be accused of putting words in anyone’s mouth, but this basically says “y’alls test is bunk lol whatever”.&lt;/p&gt;
&lt;h3 id=&quot;Problem_4_3A_Not_All_Detections_Are_Equal&quot;&gt;&lt;a href=&quot;#Problem_4_3A_Not_All_Detections_Are_Equal&quot; class=&quot;headerlink&quot; title=&quot;Problem 4: Not All Detections Are Equal&quot;&gt;&lt;/a&gt;Problem 4: Not All Detections Are Equal&lt;/h3&gt;&lt;p&gt;If an app with ads is infected with the most malicious, vile, and insidious malware ever created by man is submitted to AV test as a sample, the tests have no way to distinguish between a detection of the ads and a detection of the actual malware. What you end up with is every product scurrying around to aggressively detect adware. Also, this creates an incentive to create broad, noisy signatures which detect just about anything possibly bad. These “weak detections” usually read like as “This application smells funny and might be bad, but we’re not saying it’s bad. We don’t know. Don’t break eye contact! Good luck!”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TZSHLqV.jpg&quot; alt=&quot;unequal&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Because good testing is so hard, people will continue to pick what AV product they use based on reading tea leaves, chicken bones, PCMagazine articles, word of mouth, etc. Until quality can be better measured, AV companies will continue focus on marketing and winning these bullshit tests, or pretty much anything except for making their stuff better.&lt;/p&gt;
&lt;p&gt;Good testing is needed and that requires a good sample set of relevant, recent, modern malware. But those best equipped for creating this ideal sample set are the same being tested, so a perfect solution may not be possible. One way to improve it would be if companies open sourced their detection data and samples from some of the most prevalent families. I’m not talking a download link on their main page, but if a security researcher or academic wanted a copy, they could contact the company and there would be a system in place to verify they’re legit and send them the goods. This would open up AV testing to competition and would also make the process more transparent. Another cool side effect is academics can stop using super old malware sample sets for research.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Everyone knows anti-virus products suck and you can say anti-virus sucks for many different reasons and at different levels. You could start with obvious, surface level reasons: anti-virus software (AV) sucks because it’s slow, klunky, self-advertising garbage that slows your machine down. From there, you could move on to more perceptive complaints such as how it hardly ever detects new malware and almost certainly will not detect fancypants, bespoke, advanced persistent threats (APT). You could still deeper and claim that there’s something wrong with an industry that thrives on selling people fear and selling companies mere compliance so their insurance doesn’t laugh in their faces when they try to collect after getting their gibson’s backdoor hacked.&lt;/p&gt;
&lt;p&gt;The obvious question is then &lt;em&gt;why&lt;/em&gt; do AV products suck? Malware is a big problem that costs people money and heartache all the time. Why isn’t this solved better? Need to understand the problem at the most fundamental level. For me, this means understanding the condition in terms of economics principals–incentives, constraints, market forces at work, and so on. Once you understand something at this level, you can usually extrapolate most of the symptoms yourself and, importantly, you’ll have a much better idea of how to actually &lt;em&gt;fix&lt;/em&gt; it. This brings me to my main thesis: &lt;strong&gt;AV software sucks because it’s impossible for the market to be informed and to meaningfully differentiate between products and objectively determine which one is better.&lt;/strong&gt; Because of this, there isn’t much incentive for companies to make lean, clean, optimized, AV products with amazing, complex detection capabilities and behavior analysis. They can’t compete on quality, because people can’t tell the difference between great and crap, so they have to compete on sales and advertising.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://usercontent1.hubimg.com/3675524_f520.jpg&quot; alt=&quot;fearmongering&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="realtalk" scheme="https://CalebFenton.github.io/tags/realtalk/"/>
    
      <category term="anti-virus" scheme="https://CalebFenton.github.io/tags/anti-virus/"/>
    
  </entry>
  
  <entry>
    <title>What happens when a DEX includes a framework class?</title>
    <link href="https://CalebFenton.github.io/2015/12/21/what-happens-when-a-dex-includes-a-framework-class/"/>
    <id>https://CalebFenton.github.io/2015/12/21/what-happens-when-a-dex-includes-a-framework-class/</id>
    <published>2015-12-22T04:13:40.000Z</published>
    <updated>2016-02-17T19:02:10.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;While working on a new class loading system for &lt;a href=&quot;https://github.com/CalebFenton/simplify/tree/master/smalivm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SmaliVM&lt;/a&gt;, I needed to understand exactly how DalvikVM handles the case of a DEX file including a system / framework class such as &lt;code&gt;Ljava/lang/Object;&lt;/code&gt;. I’d originally assumed, naively, in retrospect, that class files in a DEX file should take precedence. Thinking about this for a half second, I have no idea what the hell I was thinking. That would be &lt;em&gt;stupid&lt;/em&gt;.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If Dalvik let apps redefine framework classes, it has huge security implications. Sure, each app runs it its own zygote-spawned sandbox, but what if somewhere, somehow, my malicious app’s DEX file was loaded by an app with system or root access? I could just backdoor &lt;code&gt;Ljava/lang/Object;&lt;/code&gt;. Even if that’s not possible, I’m sure I could think of something nefarious if you gave me the ability to backdoor any class.&lt;/p&gt;
&lt;p&gt;Well, derp, so now I have to rewrite part of &lt;a href=&quot;https://github.com/CalebFenton/simplify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simplify&lt;/a&gt; and (hopefully) fix some tests. I might as well know exactly how it fails and document it for other researchers, right?&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How&quot;&gt;&lt;/a&gt;How&lt;/h2&gt;&lt;p&gt;First, I created two small Smali files.&lt;/p&gt;
&lt;p&gt;smali/&lt;strong&gt;hello.smali&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LHelloWorld;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.super&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; main([&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; sget-object &lt;/span&gt;v0, &lt;span class=&quot;class&quot;&gt;Ljava/lang/System;&lt;/span&gt;-&amp;gt;out:&lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; const-string &lt;/span&gt;v1, &lt;span class=&quot;string&quot;&gt;&quot;hello,world!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;v0, v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;-&amp;gt;println(&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The purpose of this is just to provide a &lt;code&gt;main(String[])&lt;/code&gt; method and to have &lt;code&gt;Object&lt;/code&gt; as a &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;smali/&lt;strong&gt;object.smali&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; &amp;lt;clinit&amp;gt;()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; sget-object &lt;/span&gt;v0, &lt;span class=&quot;class&quot;&gt;Ljava/lang/System;&lt;/span&gt;-&amp;gt;out:&lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; const-string &lt;/span&gt;v1, &lt;span class=&quot;string&quot;&gt;&quot;crazyballs&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;v0, v1&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;-&amp;gt;println(&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;)V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;built_in&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This is the real test. If I can overwrite framework classes, I should get a lot of errors, duh, but not before &lt;code&gt;&amp;lt;clinit&amp;gt;&lt;/code&gt; prints out something witty.&lt;/p&gt;
&lt;p&gt;After that, it was just packing it up and shoving it onto an emulator:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ smali smali -o classes.dex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ zip hello.zip classes.dex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  adding: classes.dex (deflated 47%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ adb push hello.zip /data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I’ll also wanted to see the error explosions in the logs. You’d be surprised how many people have an app crash or something and don’t bother looking at the logs. &lt;code&gt;monitor&lt;/code&gt; is your friend. It usually has bad news, and confuses Eclipse and IntelliJ if it’s running, but at least it’s honest.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ monitor &amp;amp;&lt;span class=&quot;built_in&quot;&gt;disown&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Finally, just invoke &lt;code&gt;dalvikvm&lt;/code&gt; with our ZIP as the classpath:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ adb shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@android:/ &lt;span class=&quot;comment&quot;&gt;# cd /data/local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@android:/data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# dalvikvm -cp hello.zip HelloWorld&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello,world!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@android:/data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;No &lt;code&gt;&amp;quot;crazyballs&amp;quot;&lt;/code&gt;, so I guess my hunch was right. I wonder what the error looked like?&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.035: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1065): DexOpt: --- BEGIN &#39;hello.&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;&#39; (&lt;span class=&quot;keyword&quot;&gt;bootstrap&lt;/span&gt;=0) ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.095: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1066): DexOpt: &#39;Ljava/lang/Object;&#39; has &lt;span class=&quot;keyword&quot;&gt;an&lt;/span&gt; earlier definition; blocking &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.095: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1066): DexOpt: not verifying/optimizing &#39;Ljava/lang/Object;&#39;: multiple definitions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.115: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1066): DexOpt: load 14ms, verify+opt 11ms, 83668 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.115: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1065): DexOpt: --- END &#39;hello.&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;&#39; (success) ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.115: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1065): DEX prep &#39;hello.&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;&#39;: unzip &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 2ms, rewrite 75ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If you read between the lines, the actual error message is “has an earlier definition; blocking out (idiot)”.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;While working on a new class loading system for &lt;a href=&quot;https://github.com/CalebFenton/simplify/tree/master/smalivm&quot;&gt;SmaliVM&lt;/a&gt;, I needed to understand exactly how DalvikVM handles the case of a DEX file including a system / framework class such as &lt;code&gt;Ljava/lang/Object;&lt;/code&gt;. I’d originally assumed, naively, in retrospect, that class files in a DEX file should take precedence. Thinking about this for a half second, I have no idea what the hell I was thinking. That would be &lt;em&gt;stupid&lt;/em&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
  </entry>
  
</feed>
