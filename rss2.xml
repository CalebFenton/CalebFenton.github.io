<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Caleb Fenton&#39;s Blog</title>
  <subtitle>Think Like An Attacker</subtitle>
  <link href="/rss2.xml" rel="self"/>
  
  <link href="https://CalebFenton.github.io/"/>
  <updated>2016-02-22T16:17:18.000Z</updated>
  <id>https://CalebFenton.github.io/</id>
  
  <author>
    <name>Caleb Fenton</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>How does Dalvik handle &#39;this&#39; references?</title>
    <link href="https://CalebFenton.github.io/2016/02/21/how-does-dalvik-handle-this-references/"/>
    <id>https://CalebFenton.github.io/2016/02/21/how-does-dalvik-handle-this-references/</id>
    <published>2016-02-21T20:44:39.000Z</published>
    <updated>2016-02-22T16:17:18.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;The_this_Reference&quot;&gt;&lt;a href=&quot;#The_this_Reference&quot; class=&quot;headerlink&quot; title=&quot;The this Reference&quot;&gt;&lt;/a&gt;The &lt;code&gt;this&lt;/code&gt; Reference&lt;/h2&gt;&lt;p&gt;For every instance (virtual, non-static) method in Dalvik, the first parameter is a reference to itself, or, in Java, the &lt;code&gt;this&lt;/code&gt; reference. I wanted to know if it was legal to reassign the register value.&lt;/p&gt;
&lt;p&gt;Just so I’m sure you know what I’m talking about, here’s a simple Java class with an instance method called &lt;code&gt;instanceMethod&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Instance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;The above smali gets turned into this (you can safely ignore &lt;code&gt;&amp;lt;init&amp;gt;()V&lt;/code&gt;):&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LInstance;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.super&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.field&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; private&lt;/span&gt; number:I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; constructor&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; &amp;lt;init&amp;gt;(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-direct &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;p0&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;&amp;lt;init&amp;gt;(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; const/4 &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, 0x5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; iput &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;p0&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;LInstance;&lt;/span&gt;-&amp;gt;number:I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; instanceMethod(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# p0 is the &#39;this&#39; reference&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; iget &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;p0&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;LInstance;&lt;/span&gt;-&amp;gt;number:I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Do your decompilations look different? It may be because mine was generated using &lt;code&gt;baksmali --use-locals&lt;/code&gt; which separates the registers into registers used within the method body (locals) and those passed as parameters. Local registers are named &lt;code&gt;v0&lt;/code&gt;, &lt;code&gt;v1&lt;/code&gt;, &lt;code&gt;v2&lt;/code&gt;, and so on and the parameters are named &lt;code&gt;p0&lt;/code&gt;, &lt;code&gt;p1&lt;/code&gt;, etc.&lt;/p&gt;
&lt;p&gt;The default behavior is to name all registers based on how they’re actually laid out by Dalvik: &lt;code&gt;r0&lt;/code&gt;, &lt;code&gt;r1&lt;/code&gt;, &lt;code&gt;r2&lt;/code&gt; and so on, regardless of if they’re local or parameters. To clarify, a method like this:&lt;br&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public&lt;span class=&quot;function&quot;&gt; example(&lt;/span&gt;JI&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .registers&lt;/span&gt; 3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Has a register layout like this:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;r0&lt;/code&gt;, &lt;code&gt;r1&lt;/code&gt;, &lt;code&gt;r2&lt;/code&gt; - local registers&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r3&lt;/code&gt; - &lt;code&gt;this&lt;/code&gt; register (p0 with &lt;code&gt;--use-locals&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r4&lt;/code&gt; &amp;amp; &lt;code&gt;r5&lt;/code&gt; - &lt;code&gt;J&lt;/code&gt; parameter (wide types use two registers)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;r6&lt;/code&gt; - &lt;code&gt;I&lt;/code&gt; parameter&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;The_Question&quot;&gt;&lt;a href=&quot;#The_Question&quot; class=&quot;headerlink&quot; title=&quot;The Question&quot;&gt;&lt;/a&gt;The Question&lt;/h2&gt;&lt;p&gt;I wondered if &lt;code&gt;p0&lt;/code&gt; was somehow special and if it was possible to rewrite it. One of the optimizers I’m working on needs to rewrite Smali and it works best if it knows all of the available registers at a certain point in code. A register is “available” if it’s not used for the rest of the execution. If you’ve ever written a tool to automatically modify Smali, you have probably run into this problem.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Spoiler warning:&lt;/strong&gt; It is &lt;em&gt;not&lt;/em&gt; special and it &lt;em&gt;is&lt;/em&gt; possible to reassign &lt;code&gt;p0&lt;/code&gt;!&lt;/p&gt;
&lt;p&gt;Here’s the code I used to test:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LHello;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.super&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.source&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Hello.java&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; constructor&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; &amp;lt;init&amp;gt;(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-direct &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;p0&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;&amp;lt;init&amp;gt;(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; main(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .param&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;p0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;argv&quot;&lt;/span&gt;    &lt;span class=&quot;comment&quot;&gt;# [Ljava/lang/String;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; sget-object &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/System;&lt;/span&gt;-&amp;gt;out:&lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; new-instance &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;LHello;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-direct &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;LHello;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;&amp;lt;init&amp;gt;(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;LHello;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;instance(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; move-result &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;println(&lt;/span&gt;I&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; instance(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# rewrite p0 with 0x5, cross fingers, hope it works&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; const/4 &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;p0&lt;/span&gt;, 0x5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;p0&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And then to compile and run it:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ smali hello.smali -o classes.dex &amp;amp;&amp;amp; zip Hello.zip classes.dex &amp;amp;&amp;amp; adb push Hello.zip /data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt; &amp;amp;&amp;amp; adb shell dalvikvm -cp /data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;/Hello.zip Hello&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  adding: classes.dex (deflated &lt;span class=&quot;number&quot;&gt;45&lt;/span&gt;%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;115&lt;/span&gt; KB/s (&lt;span class=&quot;number&quot;&gt;619&lt;/span&gt; bytes &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0.005&lt;/span&gt;s)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The test code outputs the expected &lt;code&gt;5&lt;/code&gt; with no errors or warnings. It makes sense that a register should be able to hold a reference to anything, but the only way to be absolutely sure (without closely examining the source) is to test it.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The_this_Reference&quot;&gt;&lt;a href=&quot;#The_this_Reference&quot; class=&quot;headerlink&quot; title=&quot;The this Reference&quot;&gt;&lt;/a&gt;The &lt;code&gt;this&lt;/code&gt; Reference&lt;/h2&gt;&lt;p&gt;For every instance (virtual, non-static) method in Dalvik, the first parameter is a reference to itself, or, in Java, the &lt;code&gt;this&lt;/code&gt; reference. I wanted to know if it was legal to reassign the register value.&lt;/p&gt;
&lt;p&gt;Just so I’m sure you know what I’m talking about, here’s a simple Java class with an instance method called &lt;code&gt;instanceMethod&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Instance&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; number = &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;instanceMethod&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.number;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
  </entry>
  
  <entry>
    <title>How does Dalvik handle null?</title>
    <link href="https://CalebFenton.github.io/2016/02/16/how-does-dalvik-handle-null-types/"/>
    <id>https://CalebFenton.github.io/2016/02/16/how-does-dalvik-handle-null-types/</id>
    <published>2016-02-17T03:44:39.000Z</published>
    <updated>2016-02-19T19:16:39.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;The_Problem&quot;&gt;&lt;a href=&quot;#The_Problem&quot; class=&quot;headerlink&quot; title=&quot;The Problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;Dalvik doesn’t have a proper null type. A null is &lt;a href=&quot;https://github.com/android/platform_dalvik/blob/master/dx/src/com/android/dx/rop/cst/CstKnownNull.java#L92&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;represented by a &lt;code&gt;0&lt;/code&gt;&lt;/a&gt;. Consider this example Smali code:&lt;br&gt;&lt;code&gt;const/4 v0, 0x0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It could actually represent a few of different types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean v0 = false;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byte v0 = 0x0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And even: &lt;code&gt;v0 = null;&lt;/code&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In case you were wondering about how &lt;code&gt;char&lt;/code&gt; is handled, &lt;code&gt;char c = &amp;#39;a&amp;#39;&lt;/code&gt; it looks like this:&lt;br&gt;&lt;code&gt;const/16 v0, 0x61&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;I wanted to know when Dalvik coaxed &lt;code&gt;0&lt;/code&gt; values into &lt;code&gt;null&lt;/code&gt; references for my work on &lt;a href=&quot;https://github.com/CalebFenton/simplify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simplify&lt;/a&gt;. I tried searching and only found bits and pieces, and, of course, a bunch of source code. The first page I found that looked promising was &lt;a href=&quot;http://forensics.spreitzenbarth.de/2012/08/27/comparison-of-dalvik-and-java-bytecode/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://forensics.spreitzenbarth.de/2012/08/27/comparison-of-dalvik-and-java-bytecode/
&lt;/a&gt; but &lt;em&gt;all&lt;/em&gt; it said about &lt;code&gt;null&lt;/code&gt;s was:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Dalvik bytecode does not have a specific null type. Instead, Dalvik uses a 0 value constant. So, the ambiguous implication of constant 0 should be distinguished properly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This wasn’t going to cut it.&lt;/p&gt;
&lt;h2 id=&quot;The_Experiment&quot;&gt;&lt;a href=&quot;#The_Experiment&quot; class=&quot;headerlink&quot; title=&quot;The Experiment&quot;&gt;&lt;/a&gt;The Experiment&lt;/h2&gt;&lt;p&gt;I dug through the source code a little and felt like I only partially understood when it happened. To be sure, and to understand more deeply, and mostly because I like to do things the cheap, easy, ghetto way, I decided to write some Java, convert it to Smali, and execute it to see what happens!&lt;/p&gt;
&lt;p&gt;Consider this bit of code which handles &lt;code&gt;null&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; back to back:&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addNullAnd0ToList&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    List&amp;lt;Integer&amp;gt; wtf = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; LinkedList&amp;lt;Integer&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wtf.add(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    wtf.add(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    System.out.println(wtf); &lt;span class=&quot;comment&quot;&gt;// [null, 0]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is the resulting Smali (with a &lt;code&gt;main&lt;/code&gt; method that I added because I’m nice and want you to be able to easily execute this yourself):&lt;br&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LHelloWorld;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.super&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; varargs&lt;span class=&quot;function&quot;&gt; main(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .prologue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-static &lt;/span&gt;&amp;#123;&amp;#125;, &lt;span class=&quot;class&quot;&gt;LHelloWorld;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;addNullAnd0ToList(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; addNullAnd0ToList(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .prologue&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; new-instance &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;Ljava/util/LinkedList;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-direct &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/LinkedList;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;&amp;lt;init&amp;gt;(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .local&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;wtf&quot;&lt;/span&gt;:&lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;Ljava/util/List&amp;lt;Ljava/lang/Integer;&amp;gt;;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; const/4 &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-interface &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;add(&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; const/4 &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-static &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/Integer;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;valueOf(&lt;/span&gt;I&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/Integer;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; move-result-object &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-interface &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;add(&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; sget-object &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/System;&lt;/span&gt;-&amp;gt;out:&lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;println(&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;These two lines are responsible for adding the &lt;code&gt;null&lt;/code&gt; to &lt;code&gt;wtf:Ljava/lang/List;&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const/4 &lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, 0x0&lt;span class=&quot;instruction&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;invoke-interface &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;add(&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;My first guess was Dalvik sees that &lt;code&gt;v1&lt;/code&gt; contains an integer but is used as a &lt;code&gt;Ljava/lang/Object;&lt;/code&gt; type argument. Does it have to be an integer? Does it work with other numbers? What if &lt;code&gt;v1&lt;/code&gt; was a &lt;code&gt;short&lt;/code&gt;? I added a &lt;code&gt;check-cast&lt;/code&gt; to force &lt;code&gt;v1&lt;/code&gt; into &lt;code&gt;short&lt;/code&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;const/4 &lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, 0x0&lt;span class=&quot;instruction&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;check-cast &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, S&lt;span class=&quot;instruction&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;invoke-interface &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/util/List;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;add(&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;Z&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Then compiled an ran everything:&lt;br&gt;&lt;code&gt;smali hello.smali -o classes.dex &amp;amp;&amp;amp; zip Hello.zip classes.dex &amp;amp;&amp;amp; adb push Hello.zip /data/local &amp;amp;&amp;amp; adb shell dalvikvm -cp /data/local/Hello.zip HelloWorld&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It failed:&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;DexOpt:&lt;/span&gt; --- BEGIN &lt;span class=&quot;string&quot;&gt;&#39;Hello.zip&#39;&lt;/span&gt; (bootstrap=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;DexOpt:&lt;/span&gt; load &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;ms, verify &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;ms, opt &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;DexOpt:&lt;/span&gt; --- END &lt;span class=&quot;string&quot;&gt;&#39;Hello.zip&#39;&lt;/span&gt; (success) ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;DEX prep &lt;span class=&quot;string&quot;&gt;&#39;/data/local/Hello.zip&#39;&lt;/span&gt;: unzip &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;ms, rewrite &lt;span class=&quot;number&quot;&gt;58&lt;/span&gt;ms&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt; S is not instance of Ljava&lt;span class=&quot;regexp&quot;&gt;/lang/&lt;/span&gt;Object;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt; bad arg &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (into Ljava&lt;span class=&quot;regexp&quot;&gt;/lang/&lt;/span&gt;Object;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt;  rejecting call to Ljava&lt;span class=&quot;regexp&quot;&gt;/util/&lt;/span&gt;List;.add (Ljava&lt;span class=&quot;regexp&quot;&gt;/lang/&lt;/span&gt;Object;)Z&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt;  rejecting opcode &lt;span class=&quot;number&quot;&gt;0x72&lt;/span&gt; at &lt;span class=&quot;number&quot;&gt;0x0008&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;VFY:&lt;/span&gt;  rejected LHelloWorld;.addNullAnd0ToList ()V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Verifier rejected &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;LHelloWorld&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;The key part of this error is the &lt;code&gt;S is not instance of Ljava/lang/Object;&lt;/code&gt;. Ok, that’s fair. There must be a difference between registers with and without explicit type casting. But does it work with integers? I tried with &lt;code&gt;check-cast v1, I&lt;/code&gt; and got about the same error. The code didn’t get past the verifier, so it knew at runtime it was wrong. To use a &lt;code&gt;short&lt;/code&gt; without a &lt;code&gt;check-cast&lt;/code&gt; I just added a &lt;code&gt;getShort()S&lt;/code&gt; method. I didn’t think it would work because in both the method call and with &lt;code&gt;check-cast&lt;/code&gt;, explicit type information is available.&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;invoke-static &amp;#123;&amp;#125;, &lt;span class=&quot;class&quot;&gt;LHelloWorld;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;getShort(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;S&lt;span class=&quot;instruction&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;move-result &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; getShort(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;S&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; const/4 &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, 0x0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;And I was right; it fails:&lt;br&gt;&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;VFY&lt;/span&gt;: register1 v1 &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, wanted &lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;VFY&lt;/span&gt;: bad arg &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; (into &lt;span class=&quot;type&quot;&gt;Ljava&lt;/span&gt;/lang/&lt;span class=&quot;type&quot;&gt;Object&lt;/span&gt;;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;This is getting silly and I’m starting to think I should maybe just audit the source to fully understand. So I spend another 10 - 15 minutes poking around before giving up. I’ll just derrive the behavior experimentally &lt;em&gt;hashtag yolo&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For the sake of completeness, I also try with a &lt;code&gt;getInt()I&lt;/code&gt;:&lt;br&gt;&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;invoke-&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &amp;#123;&amp;#125;, &lt;span class=&quot;type&quot;&gt;LHelloWorld&lt;/span&gt;;-&amp;gt;getInt()I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;move-&lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; v1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;method&lt;/span&gt; public &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; getInt()I&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    .locals &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;/&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt; v0, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; v0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;.&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Another failure:&lt;br&gt;&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;VFY&lt;/span&gt;: register1 v1 &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, wanted &lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Dalvik can see through my cheap tricks. What if I try a wide value like with &lt;code&gt;const-wide&lt;/code&gt;? There’s no &lt;em&gt;explicit&lt;/em&gt; type… Slight change to the code because &lt;code&gt;long&lt;/code&gt;s are fat and take up two registers. I had to move the register to &lt;code&gt;v2&lt;/code&gt;.&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt;-wide v2, &lt;span class=&quot;number&quot;&gt;0x0&lt;/span&gt;L&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;NOPE:&lt;br&gt;&lt;figure class=&quot;highlight nimrod&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;type&quot;&gt;VFY&lt;/span&gt;: register1 v2 &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;13&lt;/span&gt;, wanted &lt;span class=&quot;keyword&quot;&gt;ref&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Eventually, I found that only two things work for a &lt;code&gt;null&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;const/4 v1, 0x0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;const/16 v1, 0x0&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;And these are considered &lt;code&gt;null&lt;/code&gt; &lt;em&gt;only&lt;/em&gt; if there’s no explicit type information available between assignment and use. Now I can take these delicious, esoteric trivialities and apply them towards creating failing tests. And I can’t help but simultaneously get excited by the prospect of failing tests and wonder what kind of life choices led to this.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;The_Problem&quot;&gt;&lt;a href=&quot;#The_Problem&quot; class=&quot;headerlink&quot; title=&quot;The Problem&quot;&gt;&lt;/a&gt;The Problem&lt;/h2&gt;&lt;p&gt;Dalvik doesn’t have a proper null type. A null is &lt;a href=&quot;https://github.com/android/platform_dalvik/blob/master/dx/src/com/android/dx/rop/cst/CstKnownNull.java#L92&quot;&gt;represented by a &lt;code&gt;0&lt;/code&gt;&lt;/a&gt;. Consider this example Smali code:&lt;br&gt;&lt;code&gt;const/4 v0, 0x0&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It could actually represent a few of different types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;boolean v0 = false;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;byte v0 = 0x0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;short v0 = 0;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;And even: &lt;code&gt;v0 = null;&lt;/code&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
  </entry>
  
  <entry>
    <title>Why Anti-Virus Software Sucks</title>
    <link href="https://CalebFenton.github.io/2016/02/07/why-anti-virus-sucks/"/>
    <id>https://CalebFenton.github.io/2016/02/07/why-anti-virus-sucks/</id>
    <published>2016-02-08T04:13:40.000Z</published>
    <updated>2016-02-17T03:47:05.000Z</updated>
    
    <content type="html">&lt;p&gt;Everyone knows anti-virus products suck and you can say anti-virus sucks for many different reasons and at different levels. You could start with obvious, surface level reasons: anti-virus software (AV) sucks because it’s slow, klunky, self-advertising garbage that slows your machine down. From there, you could move on to more perceptive complaints such as how it hardly ever detects new malware and almost certainly will not detect fancypants, bespoke, advanced persistent threats (APT). You could still deeper and claim that there’s something wrong with an industry that thrives on selling people fear and selling companies mere compliance so their insurance doesn’t laugh in their faces when they try to collect after getting their gibson’s backdoor hacked.&lt;/p&gt;
&lt;p&gt;The obvious question is then &lt;em&gt;why&lt;/em&gt; do AV products suck? Malware is a big problem that costs people money and heartache all the time. Why isn’t this solved better? Need to understand the problem at the most fundamental level. For me, this means understanding the condition in terms of economics principals–incentives, constraints, market forces at work, and so on. Once you understand something at this level, you can usually extrapolate most of the symptoms yourself and, importantly, you’ll have a much better idea of how to actually &lt;em&gt;fix&lt;/em&gt; it. This brings me to my main thesis: &lt;strong&gt;AV software sucks because it’s impossible for the market to be informed and to meaningfully differentiate between products and objectively determine which one is better.&lt;/strong&gt; Because of this, there isn’t much incentive for companies to make lean, clean, optimized, AV products with amazing, complex detection capabilities and behavior analysis. They can’t compete on quality, because people can’t tell the difference between great and crap, so they have to compete on sales and advertising.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://usercontent1.hubimg.com/3675524_f520.jpg&quot; alt=&quot;fearmongering&quot;&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You may have a favorite AV scanner, but can you honestly tell me, objectively, why it’s better than all the others? You might have a few good, small reasons like one has a cleaner, faster user interface (UI) or &lt;em&gt;seems&lt;/em&gt; to have better detections. But how can you be sure? Do you know what each one is really doing under the hood? How do you know how good it is at detecting new viruses? How do you know how fast its detection signatures are updated? What about code quality and security bugs in the AV software itself? If you’re like most people, you simply prefer one AV product because it sucks the &lt;em&gt;least&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgflip.com/8bki5.jpg&quot; alt=&quot;gear grinding&quot;&gt;&lt;/p&gt;
&lt;p&gt;It’s pretty much impossible for laypeeps to have any clue how good an AV product is. Actually, I can’t even tell, so I reckon most experts can’t either, at least in general. Because of this general inability to compare, AV testing companies have stepped up to solve this problem. They test and compare all the different AV products and claim to provide an objective, meaningful, comparative analysis. The idea is that consumers can read their reports and really know what’s going on and pick a good AV product based on &lt;em&gt;science&lt;/em&gt; and not anecdotal hearsay.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://www.kappit.com/img/pics/201412_1752_gaaid_sm.jpg&quot; alt=&quot;difficulty&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Why_AV_Testing_Sucks&quot;&gt;&lt;a href=&quot;#Why_AV_Testing_Sucks&quot; class=&quot;headerlink&quot; title=&quot;Why AV Testing Sucks&quot;&gt;&lt;/a&gt;Why AV Testing Sucks&lt;/h2&gt;&lt;p&gt;First, if you’ve never seen an AV Test report and you’re some kind of masochist, here are two from 2015:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://www.av-test.org/fileadmin/tests/mobile/avtest_summary_mobile_2015-11.xlsx&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.av-test.org/fileadmin/tests/mobile/avtest_summary_mobile_2015-11.xlsx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.av-comparatives.org/wp-content/uploads/2015/12/avc_prot_2015b_en.pdf&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.av-comparatives.org/wp-content/uploads/2015/12/avc_prot_2015b_en.pdf&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;They evaluate products on various features and abilities such as:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;% of malware detected (detection rates)&lt;/li&gt;
&lt;li&gt;% of good apps detected as malware (false positives)&lt;/li&gt;
&lt;li&gt;ability to detect new and unknown threats (0day detections)&lt;/li&gt;
&lt;li&gt;user-interface and usability&lt;/li&gt;
&lt;li&gt;battery usage (for mobile devices)&lt;/li&gt;
&lt;li&gt;other nice features: backup, device locate, remote wipe, remote lock, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Sounds good, doesn’t it? Where’s the problem here?, you may be wondering. I’ll just cut straight to the heart of it. Let’s start at #1, detection rates, the most critical metric. &lt;em&gt;How can an AV test determine this?&lt;/em&gt; How can they possibly know how much malware an AV product detects and misses? First off, they would need a sample set of &lt;em&gt;known&lt;/em&gt; malware to run through the AV scanner. Hmm. But that can’t be right. How can they make a malware sample set? How can they know what malware is? If they had perfect knowledge of what was malware and what wasn’t they would &lt;em&gt;be&lt;/em&gt; an AV company not an AV &lt;em&gt;testing&lt;/em&gt; company!&lt;/p&gt;
&lt;p&gt;The truth is that AV testing companies have no clue how to detect malware. Instead, and this part is just pure gold, they rely on the &lt;em&gt;AV companies&lt;/em&gt; to provide the malware samples. Sort of like if college students got to pick which questions were on the test.&lt;/p&gt;
&lt;p&gt;Yeah. Just let that sink in for a minute. While you meditate on how fucked up that is, contemplate on the “appropriate” use of “ironic” quotes:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/K8AFzev.png&quot; alt=&quot;ironic quotes&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Problem_1_3A_Black_Magic&quot;&gt;&lt;a href=&quot;#Problem_1_3A_Black_Magic&quot; class=&quot;headerlink&quot; title=&quot;Problem 1: Black Magic&quot;&gt;&lt;/a&gt;Problem 1: Black Magic&lt;/h3&gt;&lt;p&gt;Right off the bat, the objectivity of the test is seriously compromised. Different AV companies submit their samples and somehow the AV test has to somehow figure out which ones are actually malware and which ones are false positives from the AV company. How does it achieve such a feat? I’m assuming it has something to do with many Excel spreadsheets, animal sacrifice, and &lt;em&gt;fucking witchery&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There was one time I found an entirely new family of sneaky malware that no one else detected. So we submitted some as test samples. Since everyone &lt;em&gt;except us&lt;/em&gt; missed it, they took it out of the sample set. Because, you know, it must not be malware, right?&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/VAsfyWg.jpg&quot; alt=&quot;its magic&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Problem_2_3A_Biased_Against_Small_Companies&quot;&gt;&lt;a href=&quot;#Problem_2_3A_Biased_Against_Small_Companies&quot; class=&quot;headerlink&quot; title=&quot;Problem 2: Biased Against Small Companies&quot;&gt;&lt;/a&gt;Problem 2: Biased Against Small Companies&lt;/h3&gt;&lt;p&gt;Not all companies have the time or resources to curate and submit test samples, so that only leaves the big companies. And you can be absolutely 100% sure the big companies have test machines setup to run samples through the competition so they know exactly what samples the other AV products are likely to miss. Because of this, the sample set is biased against companies which don’t bother or can’t afford to do “offensive sample testing”. I’ve been at conferences and talked with people enough to learn that some companies spend millions of dollars and have entire teams just for winning these tests. That’s money and resources &lt;em&gt;not&lt;/em&gt; going to improving the product and protecting the customer.&lt;/p&gt;
&lt;h3 id=&quot;Problem_3_3A_Unrealistic_Samples&quot;&gt;&lt;a href=&quot;#Problem_3_3A_Unrealistic_Samples&quot; class=&quot;headerlink&quot; title=&quot;Problem 3: Unrealistic Samples&quot;&gt;&lt;/a&gt;Problem 3: Unrealistic Samples&lt;/h3&gt;&lt;p&gt;The sample sets used in these tests are completely unrealistic. It’s usually a bunch of samples from a few families no one ever actually encounters in the wild. Where I worked, ~0.3% of our test misses were actually encountered by users. That means 99.7% of the test samples were never seen &lt;em&gt;once&lt;/em&gt; by &lt;em&gt;any&lt;/em&gt; of our customers.&lt;/p&gt;
&lt;p&gt;Since the number of families used in the sample set is not nearly representative of the number of actual families spreading in the wild, if an AV company misses one family, they could miss a lot of samples. It’s like when one paragraph from a single chapter in a book is used to make 99.7% of the test.&lt;/p&gt;
&lt;p&gt;I remember when I saw Microsoft Security Essentials massively fail a particular AV test and was amazed by their badass response:&lt;br&gt;&lt;a href=&quot;https://blogs.technet.microsoft.com/mmpc/2014/01/17/key-lessons-learned-from-the-latest-test-results/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://blogs.technet.microsoft.com/mmpc/2014/01/17/key-lessons-learned-from-the-latest-test-results/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;In this polished, polite, and diplomatic response, homeboy drops the mic with this little gem:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Our review showed that 0.0033 percent of our Microsoft Security Essentials and Microsoft Forefront Endpoint Protection customers were impacted by malware samples not detected during the test. In addition, 94 percent of the malware samples not detected during the test didn’t impact our customers.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;I don’t want to be accused of putting words in anyone’s mouth, but this basically says “y’alls test is bunk lol whatever”.&lt;/p&gt;
&lt;h3 id=&quot;Problem_4_3A_Not_All_Detections_Are_Equal&quot;&gt;&lt;a href=&quot;#Problem_4_3A_Not_All_Detections_Are_Equal&quot; class=&quot;headerlink&quot; title=&quot;Problem 4: Not All Detections Are Equal&quot;&gt;&lt;/a&gt;Problem 4: Not All Detections Are Equal&lt;/h3&gt;&lt;p&gt;If an app with ads is infected with the most malicious, vile, and insidious malware ever created by man is submitted to AV test as a sample, the tests have no way to distinguish between a detection of the ads and a detection of the actual malware. What you end up with is every product scurrying around to aggressively detect adware. Also, this creates an incentive to create broad, noisy signatures which detect just about anything possibly bad. These “weak detections” usually read like as “This application smells funny and might be bad, but we’re not saying it’s bad. We don’t know. Don’t break eye contact! Good luck!”.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://i.imgur.com/TZSHLqV.jpg&quot; alt=&quot;unequal&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Conclusion&quot;&gt;&lt;a href=&quot;#Conclusion&quot; class=&quot;headerlink&quot; title=&quot;Conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Because good testing is so hard, people will continue to pick what AV product they use based on reading tea leaves, chicken bones, PCMagazine articles, word of mouth, etc. Until quality can be better measured, AV companies will continue focus on marketing and winning these bullshit tests, or pretty much anything except for making their stuff better.&lt;/p&gt;
&lt;p&gt;Good testing is needed and that requires a good sample set of relevant, recent, modern malware. But those best equipped for creating this ideal sample set are the same being tested, so a perfect solution may not be possible. One way to improve it would be if companies open sourced their detection data and samples from some of the most prevalent families. I’m not talking a download link on their main page, but if a security researcher or academic wanted a copy, they could contact the company and there would be a system in place to verify they’re legit and send them the goods. This would open up AV testing to competition and would also make the process more transparent. Another cool side effect is academics can stop using super old malware sample sets for research.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Everyone knows anti-virus products suck and you can say anti-virus sucks for many different reasons and at different levels. You could start with obvious, surface level reasons: anti-virus software (AV) sucks because it’s slow, klunky, self-advertising garbage that slows your machine down. From there, you could move on to more perceptive complaints such as how it hardly ever detects new malware and almost certainly will not detect fancypants, bespoke, advanced persistent threats (APT). You could still deeper and claim that there’s something wrong with an industry that thrives on selling people fear and selling companies mere compliance so their insurance doesn’t laugh in their faces when they try to collect after getting their gibson’s backdoor hacked.&lt;/p&gt;
&lt;p&gt;The obvious question is then &lt;em&gt;why&lt;/em&gt; do AV products suck? Malware is a big problem that costs people money and heartache all the time. Why isn’t this solved better? Need to understand the problem at the most fundamental level. For me, this means understanding the condition in terms of economics principals–incentives, constraints, market forces at work, and so on. Once you understand something at this level, you can usually extrapolate most of the symptoms yourself and, importantly, you’ll have a much better idea of how to actually &lt;em&gt;fix&lt;/em&gt; it. This brings me to my main thesis: &lt;strong&gt;AV software sucks because it’s impossible for the market to be informed and to meaningfully differentiate between products and objectively determine which one is better.&lt;/strong&gt; Because of this, there isn’t much incentive for companies to make lean, clean, optimized, AV products with amazing, complex detection capabilities and behavior analysis. They can’t compete on quality, because people can’t tell the difference between great and crap, so they have to compete on sales and advertising.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://usercontent1.hubimg.com/3675524_f520.jpg&quot; alt=&quot;fearmongering&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="anti-virus" scheme="https://CalebFenton.github.io/tags/anti-virus/"/>
    
      <category term="realtalk" scheme="https://CalebFenton.github.io/tags/realtalk/"/>
    
  </entry>
  
  <entry>
    <title>What happens when a DEX includes a framework class?</title>
    <link href="https://CalebFenton.github.io/2015/12/21/what-happens-when-a-dex-includes-a-framework-class/"/>
    <id>https://CalebFenton.github.io/2015/12/21/what-happens-when-a-dex-includes-a-framework-class/</id>
    <published>2015-12-22T04:13:40.000Z</published>
    <updated>2016-02-17T19:02:10.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;While working on a new class loading system for &lt;a href=&quot;https://github.com/CalebFenton/simplify/tree/master/smalivm&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;SmaliVM&lt;/a&gt;, I needed to understand exactly how DalvikVM handles the case of a DEX file including a system / framework class such as &lt;code&gt;Ljava/lang/Object;&lt;/code&gt;. I’d originally assumed, naively, in retrospect, that class files in a DEX file should take precedence. Thinking about this for a half second, I have no idea what the hell I was thinking. That would be &lt;em&gt;stupid&lt;/em&gt;.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If Dalvik let apps redefine framework classes, it has huge security implications. Sure, each app runs it its own zygote-spawned sandbox, but what if somewhere, somehow, my malicious app’s DEX file was loaded by an app with system or root access? I could just backdoor &lt;code&gt;Ljava/lang/Object;&lt;/code&gt;. Even if that’s not possible, I’m sure I could think of something nefarious if you gave me the ability to backdoor any class.&lt;/p&gt;
&lt;p&gt;Well, derp, so now I have to rewrite part of &lt;a href=&quot;https://github.com/CalebFenton/simplify&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Simplify&lt;/a&gt; and (hopefully) fix some tests. I might as well know exactly how it fails and document it for other researchers, right?&lt;/p&gt;
&lt;h2 id=&quot;How&quot;&gt;&lt;a href=&quot;#How&quot; class=&quot;headerlink&quot; title=&quot;How&quot;&gt;&lt;/a&gt;How&lt;/h2&gt;&lt;p&gt;First, I created two small Smali files.&lt;/p&gt;
&lt;p&gt;smali/&lt;strong&gt;hello.smali&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;LHelloWorld;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.super&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; main(&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; sget-object &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/System;&lt;/span&gt;-&amp;gt;out:&lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; const-string &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;hello,world!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;println(&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;The purpose of this is just to provide a &lt;code&gt;main(String[])&lt;/code&gt; method and to have &lt;code&gt;Object&lt;/code&gt; as a &lt;code&gt;super&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;smali/&lt;strong&gt;object.smali&lt;/strong&gt;:&lt;/p&gt;
&lt;figure class=&quot;highlight smali&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.class&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;Ljava/lang/Object;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;.method&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt;&lt;span class=&quot;function&quot;&gt; &amp;lt;clinit&amp;gt;(&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;    .locals&lt;/span&gt; 2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; sget-object &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;class&quot;&gt;Ljava/lang/System;&lt;/span&gt;-&amp;gt;out:&lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; const-string &lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;crazyballs&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; invoke-virtual &lt;/span&gt;&amp;#123;&lt;span class=&quot;variable&quot;&gt;v0&lt;/span&gt;, &lt;span class=&quot;variable&quot;&gt;v1&lt;/span&gt;&amp;#125;, &lt;span class=&quot;class&quot;&gt;Ljava/io/PrintStream;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;-&amp;gt;println(&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;Ljava/lang/String;&lt;/span&gt;&lt;span class=&quot;function&quot;&gt;)&lt;/span&gt;V&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;instruction&quot;&gt; return-void&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;.end method&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;This is the real test. If I can overwrite framework classes, I should get a lot of errors, duh, but not before &lt;code&gt;&amp;lt;clinit&amp;gt;&lt;/code&gt; prints out something witty.&lt;/p&gt;
&lt;p&gt;After that, it was just packing it up and shoving it onto an emulator:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ smali smali -o classes.dex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ zip hello.zip classes.dex&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  adding: classes.dex (deflated &lt;span class=&quot;number&quot;&gt;47&lt;/span&gt;%)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ adb push hello.zip /data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;I’ll also wanted to see the error explosions in the logs. You’d be surprised how many people have an app crash or something and don’t bother looking at the logs. &lt;code&gt;monitor&lt;/code&gt; is your friend. It usually has bad news, and confuses Eclipse and IntelliJ if it’s running, but at least it’s honest.&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ monitor &amp;amp;&lt;span class=&quot;built_in&quot;&gt;disown&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Finally, just invoke &lt;code&gt;dalvikvm&lt;/code&gt; with our ZIP as the classpath:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ adb shell&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@android:/ &lt;span class=&quot;comment&quot;&gt;# cd /data/local&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@android:/data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;# dalvikvm -cp hello.zip HelloWorld&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;hello,world!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root@android:/data/&lt;span class=&quot;built_in&quot;&gt;local&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;No &lt;code&gt;&amp;quot;crazyballs&amp;quot;&lt;/code&gt;, so I guess my hunch was right. I wonder what the error looked like?&lt;/p&gt;
&lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.035: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1065): DexOpt: --- BEGIN &#39;hello.&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;&#39; (&lt;span class=&quot;keyword&quot;&gt;bootstrap&lt;/span&gt;=0) ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.095: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1066): DexOpt: &#39;Ljava/lang/Object;&#39; has &lt;span class=&quot;keyword&quot;&gt;an&lt;/span&gt; earlier definition; blocking &lt;span class=&quot;keyword&quot;&gt;out&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.095: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1066): DexOpt: not verifying/optimizing &#39;Ljava/lang/Object;&#39;: multiple definitions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.115: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1066): DexOpt: load 14ms, verify+opt 11ms, 83668 bytes&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.115: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1065): DexOpt: --- END &#39;hello.&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;&#39; (success) ---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12-21 11:07:22.115: &lt;span class=&quot;keyword&quot;&gt;D&lt;/span&gt;/dalvikvm(1065): DEX prep &#39;hello.&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt;&#39;: unzip &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; 2ms, rewrite 75ms&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;If you read between the lines, the actual error message is “has an earlier definition; blocking out (idiot)”.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Why&quot;&gt;&lt;a href=&quot;#Why&quot; class=&quot;headerlink&quot; title=&quot;Why&quot;&gt;&lt;/a&gt;Why&lt;/h2&gt;&lt;p&gt;While working on a new class loading system for &lt;a href=&quot;https://github.com/CalebFenton/simplify/tree/master/smalivm&quot;&gt;SmaliVM&lt;/a&gt;, I needed to understand exactly how DalvikVM handles the case of a DEX file including a system / framework class such as &lt;code&gt;Ljava/lang/Object;&lt;/code&gt;. I’d originally assumed, naively, in retrospect, that class files in a DEX file should take precedence. Thinking about this for a half second, I have no idea what the hell I was thinking. That would be &lt;em&gt;stupid&lt;/em&gt;.&lt;br&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://CalebFenton.github.io/tags/android/"/>
    
      <category term="dalvik" scheme="https://CalebFenton.github.io/tags/dalvik/"/>
    
      <category term="research" scheme="https://CalebFenton.github.io/tags/research/"/>
    
  </entry>
  
</feed>
